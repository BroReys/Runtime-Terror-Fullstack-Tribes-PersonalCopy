{"version":3,"sources":["../../src/services/unit-level-service.js"],"names":["generateBasicUnitLevels","kingdomId","troopTypes","type","i","length","unitLevel","upgradeLevel","UnitLevelRepository","generateUnitLevel","upgradeUnitLevel","user","KingdomRepository","findKingdomById","authenticatedUserKingdom","BuildingRepository","findAcademyByKingdomId","kingdomsAcademy","id","userId","includes","status","findUnitLevelByTroopTypeAndByKingdomId","save","findUnitLevelByTroopTypeAndKingdomId"],"mappings":"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","sourcesContent":["import UnitLevelRepository from \"../repositories/unit-level-repository\";\nimport {troopRules} from \"../rules/troops-rules\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport {canAffordUnitUpgrade} from \"../utilities/upgrade-troop-level-check\";\nimport BuildingRepository from \"../repositories/building-repository\";\n\n//---> used during Kingdom registration, to generate lvl 1 upgradeLevels <---\nconst generateBasicUnitLevels = async (kingdomId) => {\n  let troopTypes = troopRules().type;\n  for (let i = 0; i < troopTypes.length; i++) {\n    let unitLevel = {\n      type: troopTypes[i],\n      upgradeLevel: 1,\n      kingdomId: kingdomId\n    }\n    await UnitLevelRepository.generateUnitLevel(unitLevel)\n  }\n}\n\n// ---> to upgrade unitLevel, goes through several checks\nconst upgradeUnitLevel = async (type, kingdomId, user) => {\n  let authenticatedUserKingdom = await KingdomRepository\n  .findKingdomById(kingdomId);\n  let kingdomsAcademy = await BuildingRepository\n  .findAcademyByKingdomId(kingdomId);\n\n  if (!type) {\n    return \"wrong_type\";\n  } else if (!authenticatedUserKingdom) {\n    return \"kingdom_not_exists\";\n  } else if (user.id !== authenticatedUserKingdom.userId) {\n    return \"wrong_kingdom_id\";\n  } else if (!troopRules().type.includes(type)) {\n    return \"wrong_troop_type\";\n  } else if (!await canAffordUnitUpgrade(kingdomId, type)) {\n    return \"no_gold\";\n  } else if (!kingdomsAcademy) {\n    return \"no_academy\";\n  } else if (!kingdomsAcademy.status) {\n    return \"academy_destroyed\";\n  } else {\n    let unitLevel = await UnitLevelRepository\n    .findUnitLevelByTroopTypeAndByKingdomId(kingdomId, type)\n    if (unitLevel.upgradeLevel >= 20) {\n      return \"max_level\";\n    }\n    unitLevel.upgradeLevel += 1;\n    await unitLevel.save();\n    return \"ok\";\n  }\n}\n\nconst findUnitLevelByTroopTypeAndKingdomId = async (kingdomId, type) => {\n  return UnitLevelRepository.findUnitLevelByTroopTypeAndByKingdomId(kingdomId,\n      type)\n}\n\nexport default {\n  generateBasicUnitLevels,\n  findUnitLevelByTroopTypeAndKingdomId,\n  upgradeUnitLevel\n}\n"],"file":"unit-level-service.js"}