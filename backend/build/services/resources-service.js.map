{"version":3,"sources":["../../src/services/resources-service.js"],"names":["updateResourcesByKingdomId","kingdomId","updateResources","KingdomService","getKingdomById","kingdom","currentTick","console","log","name","Math","floor","Date","now","get","elapsedTicks","lastTick","tick_length","BuildingService","getUpdateBreakpoints","TroopsUpdateService","breakpoints","breakpointsUnique","Set","sort","updateBuildings","updateTroops","loyalty","newLoyalty","i","random","min","countBuildingsResources","buildingStats","getKingdomLevelByTownhall","level","foodForTroops","food","foodProduction","foodConsumption","TroopsService","countFoodConsumption","troopsFoodConsumption","countTroopsInKingdom","troopsInKingdom","killRandomTroop","countTroopsInBattle","troopsInBattle","killRandomTroopInBattle","foodForBuildings","countDestroyableBuildingsForFood","buildingsToDestroyFood","destroyRandomBuildingForFood","goldForBuildings","gold","goldProduction","countDestroyableBuildingsForGold","buildingsToDestroyGold","goldConsumption","destroyRandomBuildingForGold","foodPerTick","goldPerTick","maxGold","max_gold","newGold","maxFood","max_food","newFood","save"],"mappings":"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","sourcesContent":["import {rules} from \"../rules/rules\";\nimport KingdomService from \"./kingdom-service\";\nimport BuildingService from \"./building-service\";\nimport TroopsService from \"./troops-services/troops-service\";\nimport TroopsUpdateService from \"./troops-services/troops-update-service\";\n\nconst updateResourcesByKingdomId = async (kingdomId) => {\n  await updateResources(await KingdomService.getKingdomById(kingdomId));\n}\n\nconst updateResources = async (kingdom, currentTick) => {\n\n  console.log(\"======== UPDATING RESOURCES - \" + kingdom.name);\n\n  if (!currentTick) {\n    currentTick = Math.floor(Date.now() / 1000);\n  }\n\n  let kingdomId = kingdom.get('id');\n  let elapsedTicks = (currentTick - kingdom.lastTick) / rules().tick_length;\n  elapsedTicks = Math.floor(elapsedTicks);\n\n  let breakpoints = [\n    ...await BuildingService.getUpdateBreakpoints(kingdomId, currentTick),\n    ...await TroopsUpdateService.getUpdateBreakpoints(kingdomId, currentTick),\n    currentTick\n  ];\n  let breakpointsUnique = [...new Set(breakpoints)];\n  breakpointsUnique.sort();\n\n  console.log(breakpointsUnique);\n\n  for (let currentTick of breakpointsUnique) {\n\n    //update buildings\n    await BuildingService.updateBuildings(kingdomId, currentTick);\n\n    //update troops\n    await TroopsUpdateService.updateTroops(kingdomId, currentTick);\n\n    //update loyalty 1/114 per tick (=10 per 24h) - we use randomness to produce whole integers\n    if (kingdom.loyalty < 100) {\n      let newLoyalty = 0;\n      for (let i = 0; i < elapsedTicks; i++) {\n        let random = Math.floor(Math.random() * 114);\n        if (random === 1) {\n          newLoyalty++;\n        }\n      }\n      kingdom.loyalty = Math.min(kingdom.loyalty + newLoyalty, 100);\n    }\n\n    let buildingStats = await BuildingService.countBuildingsResources(kingdomId);\n    let level = await BuildingService.getKingdomLevelByTownhall(kingdomId);\n\n    console.log(buildingStats);\n    console.log(level);\n\n    // count food consumption of troops and kill some if we don't have enough food\n    let foodForTroops = kingdom.food + (buildingStats.foodProduction - buildingStats.foodConsumption) * elapsedTicks;\n    let troopsFoodConsumption = await TroopsService.countFoodConsumption(kingdomId);\n    let troopsInKingdom = await TroopsService.countTroopsInKingdom(kingdomId);\n    console.log(\"=== Troops food consumption:\" + troopsFoodConsumption);\n\n    while ((foodForTroops < (troopsFoodConsumption * elapsedTicks)) && (troopsInKingdom > 0)) {\n      await TroopsService.killRandomTroop(kingdomId);\n      troopsInKingdom--;\n      troopsFoodConsumption = await TroopsService.countFoodConsumption(kingdomId);\n    }\n\n    //kill some troop in battle if we still don't have enough food\n    troopsFoodConsumption = await TroopsService.countFoodConsumption(kingdomId);\n    let troopsInBattle = await TroopsService.countTroopsInBattle(kingdomId);\n\n    while ((foodForTroops < (troopsFoodConsumption * elapsedTicks)) && (troopsInBattle > 0)) {\n      await TroopsService.killRandomTroopInBattle(kingdomId);\n      troopsInBattle--;\n      troopsFoodConsumption = await TroopsService.countFoodConsumption(kingdomId);\n    }\n\n    //destroy some buildings if we don't have enough FOOD for their consumption\n\n    let foodForBuildings = kingdom.food + (buildingStats.foodProduction - troopsFoodConsumption) * elapsedTicks;\n    let buildingsToDestroyFood = await BuildingService.countDestroyableBuildingsForFood(kingdomId);\n\n    while ((foodForBuildings < (buildingStats.foodConsumption * elapsedTicks)) && (buildingsToDestroyFood > 0)) {\n      await BuildingService.destroyRandomBuildingForFood(kingdomId);\n      buildingsToDestroyFood--;\n      buildingStats = await BuildingService.countBuildingsResources(kingdomId);\n    }\n\n    //destroy some buildings if we don't have enough GOLD for their consumption\n\n    let goldForBuildings = kingdom.gold + (buildingStats.goldProduction * elapsedTicks);\n    let buildingsToDestroyGold = await BuildingService.countDestroyableBuildingsForGold(kingdomId);\n\n    while ((goldForBuildings < (buildingStats.goldConsumption * elapsedTicks)) && (buildingsToDestroyGold > 0)) {\n      await BuildingService.destroyRandomBuildingForGold(kingdomId);\n      buildingsToDestroyGold--;\n      buildingStats = await BuildingService.countBuildingsResources(kingdomId);\n    }\n\n    let foodPerTick = (buildingStats.foodProduction - buildingStats.foodConsumption - troopsFoodConsumption);\n    let goldPerTick = (buildingStats.goldProduction - buildingStats.goldConsumption);\n\n    //produce gold to maximum level\n    let maxGold = rules(level).kingdom.max_gold;\n    if (kingdom.gold < maxGold) {\n      let newGold = goldPerTick * elapsedTicks;\n      kingdom.gold = Math.min(maxGold, kingdom.gold + newGold);\n    } else {\n      kingdom.gold = maxGold;\n    }\n\n    //produce food to maximum level\n    let maxFood = rules(level).kingdom.max_food;\n    if (kingdom.food < maxFood) {\n      let newFood = foodPerTick * elapsedTicks;\n      kingdom.food = Math.min(maxFood, kingdom.food + newFood);\n    } else {\n      kingdom.food = maxFood;\n    }\n\n    //update last tick and food/gold production and save\n    kingdom.lastTick += elapsedTicks * rules().tick_length;\n    kingdom.foodProduction = buildingStats.foodProduction;\n    kingdom.goldProduction = buildingStats.goldProduction;\n\n    await kingdom.save();\n\n  }\n\n}\n\nexport default {\n  updateResources,\n  updateResourcesByKingdomId\n}\n"],"file":"resources-service.js"}