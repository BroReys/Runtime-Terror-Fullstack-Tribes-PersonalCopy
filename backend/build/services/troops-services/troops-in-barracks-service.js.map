{"version":3,"sources":["../../../src/services/troops-services/troops-in-barracks-service.js"],"names":["trainTroop","type","quantity","kingdomId","user","KingdomRepository","findKingdomById","authenticatedUserKingdom","id","userId","includes","TroopsInBarracksRepository","findKingdomTroopsInBarracksByTypeAndOrderByEndtimeDesc","settlersInBarracks","TroopsRepository","findRecruitedTroopTypeByKingdomId","settlers","quantityInBattle","troops","i","troop","isTrained","startTime","endTime","push","kingdomTroopsInBarracksByType","length","maxEndtime","Math","floor","Date","now","generateTroopCreationTime","createsAtWhenPreviousExists","createsAt","createsAtNextTroop","bulkCreateTroops","findKingdomTroopsInBarracks"],"mappings":"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","sourcesContent":["import KingdomRepository from \"../../repositories/kingdom-repository\";\nimport {troopRules} from \"../../rules/troops-rules\";\nimport generateTroopCreationTime\n  from \"../../utilities/generate-troop-creation-time\";\nimport TroopsInBarracksRepository\n  from \"../../repositories/troops-repositories/troops-in-barracks-repository\";\nimport {canAfford} from \"../../utilities/troop-creation-check\";\nimport TroopsRepository\n  from \"../../repositories/troops-repositories/troops-repository\";\n\n\nconst trainTroop = async (type,quantity,kingdomId,user) => {\n\n  let authenticatedUserKingdom = await KingdomRepository\n  .findKingdomById(kingdomId);\n\n  if (!type || !quantity) {\n    return \"missing_field\";\n  } else if (!authenticatedUserKingdom) {\n    return \"kingdom_not_exists\";\n  } else if (user.id !== authenticatedUserKingdom.userId) {\n    return \"wrong_kingdom_id\";\n  } else if (!troopRules().type.includes(type)) {\n    return \"wrong_type\";\n  } else if (type === \"settlers\" && quantity > 1) {\n    return \"settler_only_one\";\n  } else if (!await canAfford(kingdomId,type,quantity)) {\n    return \"no_gold\";\n  } else {\n    if (type === \"settlers\") {\n      let settlersInBarracks = await TroopsInBarracksRepository\n      .findKingdomTroopsInBarracksByTypeAndOrderByEndtimeDesc(kingdomId);\n      let settlers = await TroopsRepository\n      .findRecruitedTroopTypeByKingdomId(kingdomId,type);\n      if (settlersInBarracks || settlers.quantity > 0 || settlers.quantityInBattle > 0) {\n        return \"already_built_settler\"\n      }\n    }\n    let troops = [];\n    for (let i = 1; i <= quantity ; i++) {\n      let troop = {\n        kingdomId: kingdomId,\n        type: type,\n        isTrained: false,\n        startTime: 0,\n        endTime: 0\n      }\n      troops.push(troop);\n    }\n    // -----> necessary to look into troops in barracks table and check whether same type of troop is training <-----\n    let kingdomTroopsInBarracksByType = await TroopsInBarracksRepository\n    .findKingdomTroopsInBarracksByTypeAndOrderByEndtimeDesc(kingdomId,type);\n    let maxEndtime;\n    // -----> check if such troop is still training by accesing returned object and get into array <-----\n    if ((kingdomTroopsInBarracksByType[0]).length !== 0) {\n      maxEndtime = kingdomTroopsInBarracksByType[0][0].endTime;\n    }\n    for (let i = 0; i < troops.length ; i++) {\n      // ----> firstly access first element of array - first troop to create <----\n      if (i === 0) {\n        // ----> then check if maxEndtime is truthy - if yes, it means there is already a troop of same type still training <----\n        if (maxEndtime && !(Math.floor(Date.now()/1000) >= maxEndtime) ) {\n          // ----> if there is a troop still, we need to set the start of  next batch of sent to academy\n          // according to the latest time of troop which is still training <----\n            troops[i].startTime = maxEndtime;\n            troops[i].endTime = generateTroopCreationTime\n            .createsAtWhenPreviousExists(type,maxEndtime);\n        } else {\n          // ---> if maxEndtime is falsy or smaller than Date.now set start time of first troop in batch according to Date.now\n          troops[i].startTime = Math.floor(Date.now()/1000);\n          troops[i].endTime = generateTroopCreationTime.createsAt(type);\n        }\n      } else {\n        // ---> this sets time of next troop in the loop after 0 index troop\n        troops[i].startTime = troops[i-1].endTime;\n        troops[i].endTime = troops[i-1]\n            .endTime + generateTroopCreationTime.createsAtNextTroop(type);\n      }\n    }\n    await TroopsInBarracksRepository.bulkCreateTroops(troops);\n    return \"ok\";\n  }\n}\n\nconst findKingdomTroopsInBarracks = async (kingdomId) => {\n  return await TroopsInBarracksRepository.findKingdomTroopsInBarracks(kingdomId);\n}\n\nexport default {\n  trainTroop,\n  findKingdomTroopsInBarracks\n}"],"file":"troops-in-barracks-service.js"}