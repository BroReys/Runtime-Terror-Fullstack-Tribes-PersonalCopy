{"version":3,"sources":["../../../src/services/troops-services/troops-service.js"],"names":["listAllRecruitedKingdomTroops","kingdomId","user","KingdomRepository","findKingdomById","authenticatedUserKingdom","id","userId","joinTroopArmy","type","quantity","TroopsRepository","findRecruitedTroopTypeByKingdomId","troops","save","UnitLevelService","findUnitLevelByTroopTypeAndKingdomId","unitLevel","unitLevelId","troop","createTroop","countTroopsInKingdom","sum","findRecruitedKingdomTroops","kingdomTroops","console","log","countTroopsInBattle","quantityInBattle","countFoodConsumption","food","foodConsumption","killRandomTroop","findRandomKingdomTroop","randomTroop","killRandomTroopInBattle","findRandomKingdomTroopInBattle","findTroopInBattle","randomTroopInBattle"],"mappings":"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","sourcesContent":["import TroopsRepository\n  from \"../../repositories/troops-repositories/troops-repository\";\nimport KingdomRepository from \"../../repositories/kingdom-repository\";\nimport {troopRules} from \"../../rules/troops-rules\";\nimport UnitLevelService from \"../unit-level-service\";\n\nconst listAllRecruitedKingdomTroops = async (kingdomId, user) => {\n\n  let authenticatedUserKingdom = await KingdomRepository\n  .findKingdomById(kingdomId);\n\n  if (!authenticatedUserKingdom) {\n    return \"kingdom_not_exists\"\n  } else if (user.id !== authenticatedUserKingdom.userId) {\n    return \"no_authorized\";\n  } else {\n    return \"ok\";\n  }\n}\n// --->used in middleware to join the troop army<---\nconst joinTroopArmy = async (type, quantity, kingdomId) => {\n  const troops = await TroopsRepository.findRecruitedTroopTypeByKingdomId(\n      kingdomId, type);\n  if (troops) {\n    troops.quantity += quantity;\n    await troops.save();\n  } else {\n    let unitLevel = await UnitLevelService\n    .findUnitLevelByTroopTypeAndKingdomId(kingdomId, type)\n    if (!unitLevel) {\n      return null;\n    }\n    let unitLevelId = unitLevel.id;\n    let troop = {\n      type: type,\n      kingdomId: kingdomId,\n      quantity: quantity,\n      unitLevelId: unitLevelId\n    }\n    await TroopsRepository.createTroop(troop);\n  }\n\n}\n\nconst countTroopsInKingdom = async (kingdomId) => {\n  let sum = 0;\n  let kingdomTroops = await TroopsRepository.findRecruitedKingdomTroops(\n      kingdomId);\n  if (kingdomTroops) {\n    for (let troop of kingdomTroops) {\n      sum += troop.quantity;\n    }\n  }\n  console.log(sum);\n  return sum;\n}\n\nconst countTroopsInBattle = async (kingdomId) => {\n  let sum = 0;\n  let kingdomTroops = await TroopsRepository.findRecruitedKingdomTroops(\n      kingdomId);\n  if (kingdomTroops) {\n    for (let troop of kingdomTroops) {\n      sum += troop.quantityInBattle;\n    }\n  }\n  console.log(sum);\n  return sum;\n}\n\nconst countFoodConsumption = async (kingdomId) => {\n  let food = 0;\n  let kingdomTroops = await TroopsRepository.findRecruitedKingdomTroops(\n      kingdomId);\n  if (kingdomTroops) {\n    for (let troop of kingdomTroops) {\n      food += troopRules()[troop.type].foodConsumption * (troop.quantity + troop.quantityInBattle);\n    }\n  }\n  return food;\n}\n\nconst killRandomTroop = async (kingdomId) => {\n  let randomTroop = await TroopsRepository.findRandomKingdomTroop(kingdomId);\n  randomTroop.quantity -= 1;\n  await randomTroop.save();\n}\n\nconst killRandomTroopInBattle = async (kingdomId) => {\n  let randomTroop = await TroopsRepository.findRandomKingdomTroopInBattle(kingdomId);\n  let randomTroopInBattle;\n  if (randomTroop.type !== \"settlers\") {\n    randomTroopInBattle = await TroopsRepository.findTroopInBattle(randomTroop.type, kingdomId);\n  }\n  if (randomTroop) {\n    randomTroop.quantityInBattle -= 1;\n    await randomTroop.save();\n  }\n  if (randomTroopInBattle) {\n    randomTroopInBattle.quantity -= 1;\n    await randomTroopInBattle.save();\n  }\n}\n\nexport default {\n  listAllRecruitedKingdomTroops,\n  joinTroopArmy,\n  countTroopsInKingdom,\n  countTroopsInBattle,\n  countFoodConsumption,\n  killRandomTroop,\n  killRandomTroopInBattle\n}\n"],"file":"troops-service.js"}