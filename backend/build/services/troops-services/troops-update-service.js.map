{"version":3,"sources":["../../../src/services/troops-services/troops-update-service.js"],"names":["getUpdateBreakpoints","kingdomId","currentTick","breakpoints","TroopsInBarracksRepository","findAllByKingdomIdAndUntil","troopsInBarracks","troop","push","endTime","updateTroops","troopTypes","type","i","length","findTrainedKingdomTroopsInBarracksByType","trainedTroopsInBarracks","quantity","TroopsService","joinTroopArmy","deleteAllAlreadyTrainedTroops"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEA,IAAMA,oBAAoB;AAAA,2FAAG,iBAAOC,SAAP,EAAkBC,WAAlB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,WADuB,GACT,EADS;AAAA;AAAA,mBAEEC,uCAA2BC,0BAA3B,CAAsDJ,SAAtD,EAAiEC,WAAjE,CAFF;;AAAA;AAEvBI,YAAAA,gBAFuB;AAAA,mDAGTA,gBAHS;;AAAA;AAG3B,kEAAoC;AAA3BC,gBAAAA,KAA2B;AAClCJ,gBAAAA,WAAW,CAACK,IAAZ,CAAiBD,KAAK,CAACE,OAAvB;AACD;AAL0B;AAAA;AAAA;AAAA;AAAA;;AAAA,6CAMpBN,WANoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBH,oBAAoB;AAAA;AAAA;AAAA,GAA1B;;AASA,IAAMU,YAAY;AAAA,4FAAG,kBAAOT,SAAP,EAAkBC,WAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AACfS,YAAAA,UADe,GACF,+BAAaC,IADX;AAGVC,YAAAA,CAHU,GAGN,CAHM;;AAAA;AAAA,kBAGHA,CAAC,GAAGF,UAAU,CAACG,MAHZ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKmBV,uCACnCW,wCADmC,CACMd,SADN,EACiBU,UAAU,CAACE,CAAD,CAD3B,EACgCX,WADhC,CALnB;;AAAA;AAKbc,YAAAA,uBALa;AAOjB;AACIC,YAAAA,QARa,GAQFD,uBAAuB,CAAC,CAAD,CAAvB,CAA2BF,MARzB,EASjB;;AATiB;AAAA,mBAUXI,0BAAcC,aAAd,CAA4BR,UAAU,CAACE,CAAD,CAAtC,EAA2CI,QAA3C,EAAqDhB,SAArD,CAVW;;AAAA;AAGoBY,YAAAA,CAAC,EAHrB;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAcbT,uCAA2BgB,6BAA3B,EAda;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZV,YAAY;AAAA;AAAA;AAAA,GAAlB;;eAkBe;AACbV,EAAAA,oBAAoB,EAApBA,oBADa;AAEbU,EAAAA,YAAY,EAAZA;AAFa,C","sourcesContent":["import TroopsInBarracksRepository from \"../../repositories/troops-repositories/troops-in-barracks-repository\";\nimport {troopRules} from \"../../rules/troops-rules\";\nimport TroopsService from \"./troops-service\";\n\nconst getUpdateBreakpoints = async (kingdomId, currentTick) => {\n  let breakpoints = [];\n  let troopsInBarracks = await TroopsInBarracksRepository.findAllByKingdomIdAndUntil(kingdomId, currentTick);\n  for (let troop of troopsInBarracks) {\n    breakpoints.push(troop.endTime);\n  }\n  return breakpoints;\n}\n\nconst updateTroops = async (kingdomId, currentTick) => {\n  let troopTypes = troopRules().type;\n\n  for (let i = 0; i < troopTypes.length; i++) {\n    // --->first check if there are troops of same type trained in barracks<---\n    let trainedTroopsInBarracks = await TroopsInBarracksRepository\n    .findTrainedKingdomTroopsInBarracksByType(kingdomId, troopTypes[i], currentTick);\n    // --->u have to access first element, because sequalize returns object tree - [results][metadata]<---\n    let quantity = trainedTroopsInBarracks[0].length;\n    //--->if there are troops, call joinTroopArmy\n    await TroopsService.joinTroopArmy(troopTypes[i], quantity, kingdomId);\n\n  }\n\n  await TroopsInBarracksRepository.deleteAllAlreadyTrainedTroops();\n\n}\n\nexport default {\n  getUpdateBreakpoints,\n  updateTroops\n}"],"file":"troops-update-service.js"}