{"version":3,"sources":["../../src/services/leaderboard-service.js"],"names":["getLeaderboardsByKingdoms","LeaderboardRepository","getKingdomsBuildingPoints","buildingsLevelSum","length","maxBP","total","maxTP","leaderboard","index","KingdomRepository","findKingdomById","kingdomId","kingdom","UserRepository","findById","userId","user","buildingPoints","Math","floor","getKingdomTroopPoints","troopPoints","ruler","username","name","points","finalizeTheLeaderboard","status","error","getLeaderboardsByRulers","getRulerBuildingPoints","getKingdoms","userKingdoms","getTroops","kingdomTroops","getUnitLevel","unitLevel","upgradeLevel","type","attack","defence","quantity","j","sort","a","b"],"mappings":"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","sourcesContent":["import LeaderboardRepository from \"../repositories/leaderboard-repository\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport UserRepository from \"../repositories/user-repository\";\nimport {troopRules} from \"../rules/troops-rules\";\n\nconst getLeaderboardsByKingdoms = async () => {\n  let buildingsLevelSum = await LeaderboardRepository.getKingdomsBuildingPoints();\n\n  if (buildingsLevelSum.length > 0) {\n    let buildingPoints;\n    let troopPoints;\n    let maxBP = buildingsLevelSum[0].total;\n    let maxTP = 0;\n    let leaderboard = [];\n\n    for (let index = 0; index < buildingsLevelSum.length; index++) {\n      let kingdom = await KingdomRepository.findKingdomById(buildingsLevelSum[index].kingdomId);\n      let user = await UserRepository.findById(kingdom.userId);\n      buildingPoints = Math.floor((buildingsLevelSum[index].total / maxBP) * 50);\n      troopPoints = await getKingdomTroopPoints(kingdom);\n\n      if (maxTP < troopPoints) {\n        maxTP = troopPoints;\n      }\n      leaderboard[index] = {\n        ruler: user.username,\n        kingdom: kingdom.name,\n        points: 0,\n        buildingPoints: buildingPoints,\n        troopPoints: troopPoints\n      }\n    }\n    leaderboard = await finalizeTheLeaderboard(leaderboard, maxTP);\n    return {status: 200, leaderboard};\n\n  } else {\n    return {status: 400, error: 'No leaderboards available!'};\n  }\n};\n\nconst getLeaderboardsByRulers = async () => {\n  let buildingsLevelSum = await LeaderboardRepository.getRulerBuildingPoints();\n\n  if (buildingsLevelSum.length > 0) {\n    let buildingPoints;\n    let maxBP = buildingsLevelSum[0].total;\n    let maxTP = 0;\n    let leaderboard = [];\n\n    for (let index = 0; index < buildingsLevelSum.length; index++) {\n      let user = await UserRepository.findById(buildingsLevelSum[index].userId);\n      let userKingdoms = await user.getKingdoms();\n      let troopPoints = 0;\n      buildingPoints = Math.floor((buildingsLevelSum[index].total / maxBP) * 50);\n\n      for (let index = 0; index < userKingdoms.length; index++) {\n        troopPoints += await getKingdomTroopPoints(userKingdoms[index]);\n      }\n      if (maxTP < troopPoints) {\n        maxTP = troopPoints;\n      }\n      leaderboard[index] = {\n        ruler: user.username,\n        points: 0,\n        buildingPoints: buildingPoints,\n        troopPoints: troopPoints\n      }\n    }\n    leaderboard = await finalizeTheLeaderboard(leaderboard, maxTP);\n    return {status: 200, leaderboard};\n\n  } else {\n    return {status: 400, error: 'No leaderboards available!'};\n  }\n};\n\nconst getKingdomTroopPoints = async (kingdom) => {\n  let kingdomTroops = await kingdom.getTroops();\n  let troopPoints = 0;\n\n  for (let index = 0; index < kingdomTroops.length; index++) {\n    let unitLevel = await kingdomTroops[index].getUnitLevel();\n    troopPoints += (troopRules(unitLevel.upgradeLevel)[kingdomTroops[index].type].attack\n            + troopRules(unitLevel.upgradeLevel)[kingdomTroops[index].type].defence)\n        * kingdomTroops[index].quantity;\n  }\n  return troopPoints;\n};\n\nconst finalizeTheLeaderboard = async (leaderboard, maxTP) => {\n  for (let j = 0; j < leaderboard.length; j++) {\n    leaderboard[j].points = Math.floor(leaderboard[j].buildingPoints + ((leaderboard[j].troopPoints / maxTP * 50) || 0));\n    delete leaderboard[j].buildingPoints;\n    delete leaderboard[j].troopPoints;\n  }\n  return leaderboard.sort((a, b) => b.points - a.points);\n};\n\nexport default {\n  getLeaderboardsByKingdoms,\n  getLeaderboardsByRulers\n}\n"],"file":"leaderboard-service.js"}