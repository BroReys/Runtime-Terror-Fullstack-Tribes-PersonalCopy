{"version":3,"sources":["../../src/services/user-service.js"],"names":["createUser","possibleUser","username","email","password","status","UserRepository","findUserByEmailOrUsername","userInDatabase","regex","match","userToDatabase","registrationToken","setUserToActive","possibleToken","findUserByToken","user","currentTime","Math","floor","Date","now","registrationTokenExpiresAt","active","updateUser","areMembersInDatabases","members","Array","isArray","i","length","findUserByUsername","areTheyInDatabase","loginUser","hashedPassword","sentPassword","doesPasswordMatch","bcrypt","compareSync","KingdomRepository","findKingdomByUserId","id","registeredKingdom","identifyUser","token","authorizationResponseStatus","AuthenticationMiddleware","authorization","forgotPassword","findUserByEmail","forgottenPasswordToken","forgottenPasswordTokenExpiresAt","save","resetPassword","pswToken","firstPsw","secondPsw","pswExpirationTokenTime","userOldPassword","hashedPasswordNewPassword","findByUsername","undefined","findById"],"mappings":"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","sourcesContent":["import UserRepository from \"../repositories/user-repository\";\nimport hashPassword from \"../utilities/hash-password\";\nimport sendMail from \"../utilities/mail-sender\";\nimport generateConfirmationToken\n  from \"../utilities/generate-confirmation-token\";\nimport expiresIn from '../utilities/generate-day-expiration-number'\nimport bcrypt from 'bcrypt';\nimport AuthenticationMiddleware from \"../middlewares/authentication-middleware\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport generateForgottenPswToken\n  from \"../utilities/generate-forgotten-psw-token\";\nimport expiresInForgottenPswToken\n  from \"../utilities/generate-forgotten-psw-expiration-time\";\nimport sendPasswordResetMail from \"../utilities/mail-sender-forgotten-psw\";\n\nconst createUser = async (possibleUser) => {\n  // 400 missing fields\n  // 422 wrong format password\n  // 409 user with same fields\n  // 201 created email send\n\n  let status;\n  if (!possibleUser.username || !possibleUser.email\n      || !possibleUser.password) {\n    status = 400;\n  } else {\n    const userInDatabase = await UserRepository.findUserByEmailOrUsername(\n        possibleUser.username, possibleUser.email);\n    let regex = \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$\";\n\n    if (userInDatabase == null) {\n      if (!possibleUser.password.match(regex)) {\n        status = 422;\n      } else {\n        possibleUser.password = await hashPassword(possibleUser.password);\n        const userToDatabase = await UserRepository.createUser(possibleUser);\n        sendMail(userToDatabase.email, userToDatabase.registrationToken);\n        status = 201;\n      }\n    } else {\n      status = 409;\n    }\n  }\n  return status;\n}\n\nconst setUserToActive = async (possibleToken) => {\n\n  const user = await UserRepository.findUserByToken(\n      possibleToken)\n  let currentTime = Math.floor(Date.now()/1000);\n\n  if (user !== null) {\n    if (currentTime <= user.registrationTokenExpiresAt) {\n      user.active = true;\n      await UserRepository.updateUser(user);\n      return \"activated\";\n    } else {\n      user.registrationToken = generateConfirmationToken();\n      user.registrationTokenExpiresAt = expiresIn();\n      await UserRepository.updateUser(user);\n      sendMail(user.email, user.registrationToken);\n      return \"activation_expired\";\n    }\n  } else {\n    return \"not_found\";\n  }\n\n}\n\nconst areMembersInDatabases = async (members) => {\n  let areTheyInDatabase;\n  if (Array.isArray(members)) {\n    for (let i = 0; i < members.length; i++) {\n      let user = await UserRepository.findUserByUsername(members[i]);\n      areTheyInDatabase = user !== null;\n    }\n  } else {\n    let user = await UserRepository.findUserByUsername(members);\n    areTheyInDatabase = user !== null;\n  }\n  return areTheyInDatabase;\n};\n\nconst loginUser = async (possibleUser) => {\n  if (!possibleUser.username || !possibleUser.password) {\n    return 400;\n  }\n  const userInDatabase = await UserRepository.findUserByUsername(\n      possibleUser.username);\n  if (userInDatabase !== null) {\n    let hashedPassword = userInDatabase.password;\n    let sentPassword = possibleUser.password;\n    const doesPasswordMatch = bcrypt.compareSync(sentPassword, hashedPassword);\n    let registeredKingdom = await KingdomRepository.findKingdomByUserId(userInDatabase.id)\n    if (!doesPasswordMatch) {\n      return 409;\n    } else if (!userInDatabase.active) {\n      return 403;\n    } else if (registeredKingdom === null) {\n      return 412;\n    } else {\n      return 200;\n    }\n  } else {\n    return 404;\n  }\n}\n\nconst identifyUser = (token) => {\n  let authorizationResponseStatus = AuthenticationMiddleware.authorization(\n      token);\n\n  switch (authorizationResponseStatus) {\n    case 403:\n      return authorizationResponseStatus = 403;\n    case 200:\n      return authorizationResponseStatus = 200;\n  }\n}\n\nconst forgotPassword = async (email) => {\n  let user = await UserRepository.findUserByEmail(email);\n\n  if (!user) {\n    return \"no_records\";\n  } else {\n    user.forgottenPasswordToken = generateForgottenPswToken();\n    user.forgottenPasswordTokenExpiresAt = expiresInForgottenPswToken();\n    await user.save();\n    sendPasswordResetMail(user.email,user.forgottenPasswordToken)\n    return \"ok_token_generated\"\n  }\n}\n\nconst resetPassword = async (pswToken,firstPsw,secondPsw) => {\n  let currentTime = Math.floor(Date.now()/1000);\n  let user = await UserRepository.findUserByToken(pswToken);\n  let regex = \"^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9]).{8,}$\";\n  if (!user) {\n    return \"no_user\";\n  }\n  if (!firstPsw || !secondPsw) {\n    return \"no_psw_provided\"\n  }\n  let pswExpirationTokenTime = user.forgottenPasswordTokenExpiresAt;\n  if (pswExpirationTokenTime <= currentTime) {\n    return \"expired\";\n  }\n  if (firstPsw !== secondPsw) {\n    return \"no_match\"\n  }\n  if (!secondPsw.match(regex)) {\n    return \"no_regex_match\"\n  }\n  let userOldPassword = user.password;\n  const doesPasswordMatch = bcrypt.compareSync(secondPsw, userOldPassword);\n  if (doesPasswordMatch) {\n    return \"old_psw_entered\"\n  } else {\n    let hashedPasswordNewPassword = await hashPassword(secondPsw)\n    user.password = hashedPasswordNewPassword;\n    user.forgottenPasswordTokenExpiresAt = Math.floor(Date.now()/1000);\n    await user.save();\n    return \"ok\";\n  }\n};\n\n\nconst findByUsername = async (username) => {\n  return username !== undefined ? await UserRepository.findUserByUsername(username) : null;\n};\n\nconst findById = async (id) => {\n  return await UserRepository.findById(id);\n};\n\nexport default {\n  createUser,\n  setUserToActive,\n  areMembersInDatabases,\n  findById,\n  findByUsername,\n  loginUser,\n  identifyUser,\n  forgotPassword,\n  resetPassword\n};\n"],"file":"user-service.js"}