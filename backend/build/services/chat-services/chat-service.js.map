{"version":3,"sources":["../../../src/services/chat-services/chat-service.js"],"names":["createChat","subjectOfChat","ownerOfChat","members","textOfMessage","ChatRepository","chat","ChatMemberService","createChatMember","createMultipleMembers","membersResult","MessageService","createMessage","findById","id","getChatDTOs","userId","UserService","user","getChats","chatsFromUser","chatDTOs","chatsFromDB","i","length","getOwnerName","subject","chat_members","lastViewed","editMembers","editMessages","chatDto","chatOwner","messages","sort","a","parseFloat","Date","parse","createdAt","getSpecificChatDTO","chatId","ChatMemberRepository","findByChatIdAndUserId","specificChat","getUsers","editedMembers","j","username","member","filter","element","getMessages","editedMessages","getAuthor","author","message","text","b","getOwner","owner","ownerUsername"],"mappings":"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","sourcesContent":["import ChatRepository\n  from \"../../repositories/chat-repositories/chat-repository\";\nimport ChatMemberService from \"./chat-member-service\";\nimport MessageService from \"./message-service\";\nimport UserService from \"../user-service\";\nimport ChatMemberRepository\n  from \"../../repositories/chat-repositories/chat-member-repository\";\n\nconst createChat = async (subjectOfChat, ownerOfChat, members,\n    textOfMessage) => {\n\n  const chat = await ChatRepository.createChat(subjectOfChat, ownerOfChat);\n  await ChatMemberService.createChatMember(chat, ownerOfChat);\n  let membersResult = await ChatMemberService.createMultipleMembers(chat,\n      members);\n  await MessageService.createMessage(textOfMessage, chat, ownerOfChat);\n  return membersResult;\n};\n\nconst findById = async (id) => {\n  return await ChatRepository.findById(id);\n};\n\nconst getChatDTOs = async (userId) => {\n  const user = await UserService.findById(userId); // find user\n  const chatsFromUser = await user.getChats(); // get chats where he's a chat member\n  let chatDTOs = [];\n  let chatsFromDB = [];\n\n  for (let i = 0; i < chatsFromUser.length; i++) {\n    chatsFromDB[i] = await findById(chatsFromUser[i].id) // in order to work with the chat as an object, needs to be found through db\n\n    let chatDto = { // create the dto\n      id: chatsFromDB[i].id,\n      chatOwner: await getOwnerName(chatsFromDB[i]),\n      subject: chatsFromDB[i].subject,\n      lastViewed: chatsFromUser[i].chat_members.lastViewed,\n      members: await editMembers(chatsFromDB[i]),\n      messages: await editMessages(chatsFromDB[i])\n    };\n    chatDTOs[i] = chatDto;\n  }\n  return chatDTOs.sort((a) => parseFloat(\n      Date.parse(a.lastViewed) - parseFloat(\n          Date.parse(a.messages[0].createdAt)))); // compare last viewed with the newest message in the chat -> then on top of the list\n};\n\nconst getSpecificChatDTO = async (chatId, userId) => {\n  const chat = await findById(chatId); // find chat\n  const user = await UserService.findById(userId); // find user\n  const specificChat = await ChatMemberRepository.findByChatIdAndUserId(chat,\n      user); //find the chat_members row to see if this user is associated with this chat\n\n  if (specificChat !== null) { //check if user is part of this chat\n    let chatDto = { // create the dto\n      id: chat.id,\n      chatOwner: await getOwnerName(chat),\n      subject: chat.subject,\n      lastViewed: specificChat.lastViewed,\n      members: await editMembers(chat),\n      messages: await editMessages(chat)\n    }\n    return chatDto;\n  }\n  return null;\n};\n\nconst editMembers = async (chat) => { // edit members to have only username and id, dont show owner again\n  let members = await chat.getUsers();\n  let editedMembers = [];\n  for (let j = 0; j < members.length; j++) {\n    if (members[j].username != await getOwnerName(chat)) {\n      let member = {\n        id: members[j].id,\n        username: members[j].username\n      };\n      editedMembers[j] = member;\n    }\n  }\n  return editedMembers.filter(element => { // filter out null = owner\n    return element != null;\n  });\n};\n\nconst editMessages = async (chat) => { // edit messages to show id, author username, text and created at\n  let messages = await chat.getMessages();\n  let editedMessages = [];\n  for (let j = 0; j < messages.length; j++) {\n    let author = await messages[j].getAuthor();\n    let message = {\n      id: messages[j].id,\n      author: author.username,\n      text: messages[j].text,\n      createdAt: messages[j].createdAt\n    };\n    editedMessages[j] = message;\n  }\n  return editedMessages.sort((a, b) => parseFloat( // return sorted messages by newest at the top\n      Date.parse(b.createdAt) - parseFloat(Date.parse(a.createdAt))));\n};\n\nconst getOwnerName = async (chat) => {\n  let owner = await chat.getOwner();\n  let ownerUsername = owner.username;\n  return ownerUsername;\n}; // get owner username\n\nexport default {\n  createChat,\n  findById,\n  getChatDTOs,\n  getSpecificChatDTO,\n};\n"],"file":"chat-service.js"}