{"version":3,"sources":["../../src/services/building-service.js"],"names":["getBuildings","kingdomId","userId","KingdomRepository","findKingdomById","currentKingdom","authenticationError","idError","checkKingdomIdError","parseId","parseInt","buildings","BuildingRepository","findAllByKingdomIdAndStatusTrue","length","getKingdomBuildings","findAllBuiltAndActiveByKingdomId","addBuildingToKingdom","type","inputError","buildingToCreate","kingdom","undefined","buildingStats","getBuildingStatsByName","findAllByKingdomIdWhereType","buildingWithTargetPosition","currentGold","gold","currentFood","food","resourceError","foodCost","goldCost","name","position","status","level","startTime","Math","floor","Date","now","endTime","constructionTime","destroyTime","id","save","createBuilding","upgradeOrTeardownBuilding","buildingId","action","instant","kingdomIdError","buildingIdError","checkBuildingIdError","typeOfAction","findBuildingByPk","currentBuilding","findTownhallByKingdomId","kingdomTownhall","error","max_townhall_level","upgradeBuilding","teardownWithInstantTrue","teardownWithInstantFalse","building","currentBuildingLevel","currentKingdomFood","currentKingdomGold","upgradeBuildingLevel","set","saveBuilding","buildingTime","teardownBuildingLevel","destroyBuilding","buildingArray","Object","entries","i","Number","isNaN","updateBuildings","currentTime","findAllByKingdomIdAndStatusFalse","countBuildingsResources","foodConsumption","goldConsumption","foodProduction","goldProduction","farm","generation","mine","getKingdomLevelByTownhall","townhall","countDestroyableBuildingsForFood","countDestroyableBuildingsExcept","countDestroyableBuildingsForGold","destroyRandomBuildingExcept","buildingType","getRandomBuildingExcept","destroyRandomBuildingForFood","destroyRandomBuildingForGold","getUpdateBreakpoints","currentTick","breakpoints","findAllInProgressUntil","push","generateStarterBuildings","starterBuildingTypes","startedBuildings"],"mappings":"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","sourcesContent":["import BuildingRepository from \"../repositories/building-repository\";\nimport generateErrorMessage from \"../utilities/error-message\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport {buildingRules} from \"../rules/building-rules\";\nimport {rules} from \"../rules/rules\";\nimport UnitLevelRepository from \"../repositories/unit-level-repository\";\n\nconst getBuildings = async (kingdomId, userId) => {\n  let currentKingdom = await KingdomRepository.findKingdomById(kingdomId);\n\n  let authenticationError = null;\n  let idError = checkKingdomIdError(kingdomId);\n  const parseId = parseInt(kingdomId);\n  let buildings = null;\n\n  if (idError) {\n    return {idError, buildings};\n  }\n\n  if (!currentKingdom || currentKingdom.userId !== userId) {\n    authenticationError = generateErrorMessage(\n        \"This kingdom does not belong to authenticated player\");\n    return {authenticationError, buildings};\n  }\n\n  buildings = await BuildingRepository.findAllByKingdomIdAndStatusTrue(parseId);\n\n  if (buildings.length === 0) {\n    buildings = {\"status\": \"Kingdom has 0 active buildings\"};\n    return buildings;\n  }\n\n  return buildings;\n};\n\nconst getKingdomBuildings = async (kingdomId) => BuildingRepository.findAllBuiltAndActiveByKingdomId(\n    kingdomId);\n\nconst addBuildingToKingdom = async (kingdomId, type, userId) => {\n  let authenticationError = null;\n\n  let idError = checkKingdomIdError(kingdomId);\n  let inputError = null;\n  const parseId = parseInt(kingdomId);\n  let buildingToCreate = null;\n  const kingdom = await KingdomRepository.findKingdomById(parseId);\n\n  if (idError) {\n    return {idError, buildingToCreate};\n  }\n\n  if (type === undefined || type === null) {\n    inputError = generateErrorMessage(\"Type is required!\");\n    return {inputError, buildingToCreate};\n  }\n\n  if (!kingdom) {\n    inputError = generateErrorMessage(\"No kingdom with provided ID!\")\n    return {inputError, buildingToCreate};\n  }\n\n  if (!kingdom || kingdom.userId !== userId) {\n    authenticationError = generateErrorMessage(\n        \"This kingdom does not belong to authenticated player\");\n    return {authenticationError, buildingToCreate};\n  }\n\n  // searching for correct building names\n  const buildingStats = getBuildingStatsByName(1, type);\n\n  if (!buildingStats) {\n    inputError = generateErrorMessage(\"Incorrect type!\");\n    return {inputError, buildingToCreate};\n  }\n\n  const buildingWithTargetPosition = await BuildingRepository.findAllByKingdomIdWhereType(\n      parseId, type);\n  if (buildingWithTargetPosition.length !== 0) {\n    inputError = generateErrorMessage(\"That type of building already exists!\");\n    return {inputError, buildingToCreate};\n  }\n\n  const currentGold = kingdom.gold;\n  const currentFood = kingdom.food;\n  let resourceError = null\n\n  if (buildingStats.foodCost > currentFood || buildingStats.goldCost\n      > currentGold) {\n    resourceError = generateErrorMessage(\"Not enough resources!\");\n    return {resourceError, buildingToCreate};\n  }\n\n  buildingToCreate = {\n    type: buildingStats.name,\n    position: buildingStats.position,\n    status: false,\n    level: 1,\n    startTime: Math.floor(Date.now() / 1000),\n    endTime: Math.floor(Date.now() / 1000) + buildingStats.constructionTime,\n    destroyTime: null,\n    kingdomId: kingdom.id\n  }\n  kingdom.food = currentFood - buildingStats.foodCost;\n  kingdom.gold = currentGold - buildingStats.goldCost;\n  await KingdomRepository.save(kingdom);\n  await BuildingRepository.createBuilding(buildingToCreate);\n  return buildingToCreate;\n}\n\nconst upgradeOrTeardownBuilding = async (kingdomId, buildingId, action, instant,\n    userId) => {\n  let kingdomIdError = checkKingdomIdError(kingdomId);\n  let buildingIdError = checkBuildingIdError(buildingId);\n  let typeOfAction = action;\n  let inputError = null;\n  let resourceError = null;\n  let currentBuilding = await BuildingRepository.findBuildingByPk(buildingId);\n  let currentKingdom = await KingdomRepository.findKingdomById(kingdomId);\n  let kingdomTownhall = await BuildingRepository.findTownhallByKingdomId(\n      kingdomId);\n\n  let authenticationError = null;\n\n  if (kingdomIdError) {\n    return {kingdomIdError, currentBuilding};\n  }\n  if (buildingIdError) {\n    return {buildingIdError, currentBuilding};\n  }\n\n  if (!currentKingdom || currentKingdom.userId !== userId) {\n    authenticationError = generateErrorMessage(\n        \"This kingdom does not belong to authenticated player\");\n    return {authenticationError, buildings};\n  }\n\n  if (!typeOfAction) {\n    inputError = {error: \"Missing action!\"};\n    return {inputError, currentBuilding};\n  }\n\n  if (typeOfAction !== \"upgrade\" && typeOfAction !== \"tear-down\") {\n    inputError = {error: \"Wrong action!\"};\n    return {inputError, currentBuilding};\n  }\n\n  if (!currentBuilding || !currentKingdom) {\n    inputError = generateErrorMessage(\"Invalid ID!\");\n    return {inputError, currentBuilding};\n  }\n\n  if (currentBuilding.kingdomId !== currentKingdom.id) {\n    inputError = generateErrorMessage(\n        \"This building doesn't belong to this kingdom!\");\n    return {inputError, currentBuilding};\n  }\n\n  if (currentBuilding.status === false) {\n    inputError = generateErrorMessage(\n        \"You can't upgrade this building right now!\")\n    return {inputError, currentBuilding};\n  }\n\n  if (typeOfAction === \"upgrade\") {\n    if (currentBuilding.level >= rules(1).max_townhall_level\n        || (currentBuilding.level >= kingdomTownhall.level\n            && currentBuilding.position !== 1)) {\n      inputError = generateErrorMessage(\n          \"You can't upgrade building above townhall level!\");\n      return {inputError, currentBuilding};\n    }\n    currentBuilding = await upgradeBuilding(currentBuilding, currentKingdom);\n    if (!currentBuilding) {\n      resourceError = generateErrorMessage(\n          \"You don't have enough resources to upgrade!\");\n      return {resourceError, currentBuilding};\n    }\n  }\n\n  if (typeOfAction === \"tear-down\" && instant === true) {\n    currentBuilding = teardownWithInstantTrue(currentBuilding, currentKingdom);\n    if (!currentBuilding) {\n      resourceError = generateErrorMessage(\n          \"You don't have enough resources to upgrade!\");\n      return {resourceError, currentBuilding};\n    } else {\n      return {status: \"Instant teardown successful!\"}\n    }\n  }\n\n  if (typeOfAction === \"tear-down\" && instant === false) {\n    if (currentBuilding.level === 1) {\n      inputError = generateErrorMessage(\n          \"You can't teardown building on level 1! Please use instant teardown!\");\n      return {inputError, currentBuilding};\n    }\n    currentBuilding = teardownWithInstantFalse(currentBuilding);\n    return currentBuilding;\n  }\n\n  return currentBuilding;\n\n}\n\nconst upgradeBuilding = (building, kingdom) => {\n  const currentBuildingLevel = building.level;\n  const currentKingdomFood = kingdom.food;\n  const currentKingdomGold = kingdom.gold;\n  const upgradeBuildingLevel = currentBuildingLevel + 1;\n  let buildingStats = getBuildingStatsByName(upgradeBuildingLevel,\n      building.type);\n\n  if (currentKingdomGold < buildingStats.goldCost && currentKingdomFood\n      < buildingStats.foodCost) {\n    return null;\n  }\n\n  kingdom.set({\n    food: currentKingdomFood - buildingStats.foodCost,\n    gold: currentKingdomGold - buildingStats.goldCost\n  })\n\n  KingdomRepository.save(kingdom);\n\n  building.set({\n    status: false,\n    level: currentBuildingLevel + 1,\n    startTime: Math.floor(Date.now() / 1000),\n    endTime: Math.floor(Date.now() / 1000) + buildingStats.constructionTime\n  })\n\n  building = BuildingRepository.saveBuilding(building);\n\n  return building;\n}\n\nconst teardownWithInstantFalse = (building) => {\n  const currentBuildingLevel = building.level;\n  let buildingStats = getBuildingStatsByName(currentBuildingLevel,\n      building.type);\n  let buildingTime = buildingStats.constructionTime / 10;\n\n  building.set({\n    status: false,\n    level: currentBuildingLevel - 1,\n    startTime: Math.floor(Date.now() / 1000),\n    endTime: Math.floor(Date.now() / 1000) + buildingTime\n  })\n\n  building = BuildingRepository.saveBuilding(building);\n\n  return building;\n}\n\nconst teardownWithInstantTrue = (building, kingdom) => {\n  const currentBuildingLevel = building.level;\n  const currentKingdomFood = kingdom.food;\n  const currentKingdomGold = kingdom.gold;\n  const teardownBuildingLevel = currentBuildingLevel - 1;\n  let buildingStats = getBuildingStatsByName(teardownBuildingLevel,\n      building.type);\n\n  if (currentKingdomGold < buildingStats.goldCost && currentKingdomFood\n      < buildingStats.foodCost) {\n    return null;\n  }\n\n  kingdom.set({\n    food: currentKingdomFood - buildingStats.foodCost,\n    gold: currentKingdomGold - buildingStats.goldCost\n  })\n\n  KingdomRepository.save(kingdom);\n\n  BuildingRepository.destroyBuilding(building);\n\n  return {status: \"ok\"};\n}\n\nconst getBuildingStatsByName = (level, type) => {\n  const buildingArray = Object.entries(buildingRules(level));\n  let buildingStats;\n  for (let i = 0; i < buildingArray.length; i++) {\n    if (type === buildingArray[i][1].name) {\n      buildingStats = buildingArray[i][1];\n    }\n  }\n  return buildingStats;\n}\n\nconst checkKingdomIdError = (kingdomId) => {\n  let idError = null;\n  const parseId = parseInt(kingdomId);\n\n  if (Number.isNaN(parseId)) {\n    idError = generateErrorMessage(\"Kingdom ID is not a number!\");\n    return idError;\n  }\n\n  if (kingdomId === null || kingdomId === undefined) {\n    idError = generateErrorMessage(\"Wrong kingdom ID!\");\n    return idError;\n  }\n}\n\nconst checkBuildingIdError = (buildingId) => {\n  let idError = null;\n  const parseId = parseInt(buildingId);\n\n  if (Number.isNaN(parseId)) {\n    idError = generateErrorMessage(\"Building ID is not a number!\");\n    return idError;\n  }\n\n  if (buildingId === null || buildingId === undefined) {\n    idError = generateErrorMessage(\"Wrong building ID!\");\n    return idError;\n  }\n}\n\nconst updateBuildings = async (kingdomId, currentTime) => {\n  const buildings = await BuildingRepository.findAllByKingdomIdAndStatusFalse(\n      kingdomId);\n  if (!currentTime) {\n    currentTime = Math.floor(Date.now() / 1000);\n  }\n\n  for (const currentBuilding of buildings) {\n    if (currentBuilding.endTime < currentTime) {\n      currentBuilding.status = true;\n      await BuildingRepository.saveBuilding(currentBuilding);\n    }\n  }\n\n}\n\nconst countBuildingsResources = async (kingdomId) => {\n  let foodConsumption = 0;\n  let goldConsumption = 0;\n  let foodProduction = 0;\n  let goldProduction = 0;\n  let buildings = await getKingdomBuildings(kingdomId);\n\n  if (buildings) {\n\n    //count food/gold consumption and generation for each active and built building in a kingdom\n    for (let building of buildings) {\n      if (building.type === 'farm') {\n        foodProduction += (buildingRules(building.level).farm.generation || 0);\n      } else if (building.type === 'mine') {\n        goldProduction += (buildingRules(building.level).mine.generation || 0);\n      }\n      foodConsumption += (buildingRules(\n          building.level)[building.type].foodConsumption || 0);\n      goldConsumption += (buildingRules(\n          building.level)[building.type].goldConsumption || 0);\n    }\n\n  }\n  return {\n    foodConsumption: foodConsumption,\n    goldConsumption: goldConsumption,\n    foodProduction: foodProduction,\n    goldProduction: goldProduction\n  }\n}\n\nconst getKingdomLevelByTownhall = async (kingdomId) => {\n  let townhall = await BuildingRepository.findTownhallByKingdomId(kingdomId);\n  if (townhall) {\n    return townhall.level;\n  } else {\n    return 0;\n  }\n}\n\nconst countDestroyableBuildingsForFood = async (kingdomId) => {\n  let buildings = await BuildingRepository.countDestroyableBuildingsExcept(\n      kingdomId, \"farm\");\n  let townhall = await getKingdomLevelByTownhall(kingdomId);\n  return townhall + buildings;\n}\n\nconst countDestroyableBuildingsForGold = async (kingdomId) => {\n  let buildings = await BuildingRepository.countDestroyableBuildingsExcept(\n      kingdomId, \"mine\");\n  let townhall = await getKingdomLevelByTownhall(kingdomId);\n  return townhall + buildings;\n}\n\nconst destroyRandomBuildingExcept = async (kingdomId, buildingType) => {\n  let building = await BuildingRepository.getRandomBuildingExcept(kingdomId,\n      buildingType);\n  // if there is some building which is not farm or townhall -> destroy\n  if (building) {\n    await BuildingRepository.destroyBuilding(building);\n  } else {\n    //if not, then downgrade townhall by one level\n    let townhall = await BuildingRepository.findTownhallByKingdomId(kingdomId);\n    townhall.level -= 1;\n    await BuildingRepository.saveBuilding(townhall);\n  }\n}\n\nconst destroyRandomBuildingForFood = async (kingdomId) => destroyRandomBuildingExcept(\n    kingdomId, \"farm\");\nconst destroyRandomBuildingForGold = async (kingdomId) => destroyRandomBuildingExcept(\n    kingdomId, \"mine\");\n\nconst getUpdateBreakpoints = async (kingdomId, currentTick) => {\n  let breakpoints = [];\n  let buildings = await BuildingRepository.findAllInProgressUntil(kingdomId, currentTick);\n  for (let building of buildings) {\n    breakpoints.push(building.endTime);\n  }\n  return breakpoints;\n}\n\n//---> used during Kingdom creation, to generate lvl 1 starter buildings  <---\nconst generateStarterBuildings = async (kingdomId) => {\n  let starterBuildingTypes = buildingRules().startedBuildings;\n  for (let i = 0; i < starterBuildingTypes.length; i++) {\n    let buildingStats = getBuildingStatsByName(1, starterBuildingTypes[i]);\n    let buildingToCreate = {\n      type: buildingStats.name,\n      position: buildingStats.position,\n      status: true,\n      level: 1,\n      startTime: Math.floor(Date.now() / 1000),\n      endTime: Math.floor(Date.now() / 1000),\n      destroyTime: null,\n      kingdomId: kingdomId\n    }\n    await BuildingRepository.createBuilding(buildingToCreate);\n  }\n}\n\nexport default {\n  getBuildings,\n  getKingdomBuildings,\n  addBuildingToKingdom,\n  getBuildingStatsByName,\n  upgradeOrTeardownBuilding,\n  updateBuildings,\n  countBuildingsResources,\n  getKingdomLevelByTownhall,\n  destroyRandomBuildingForFood,\n  destroyRandomBuildingForGold,\n  countDestroyableBuildingsForFood,\n  countDestroyableBuildingsForGold,\n  checkKingdomIdError,\n  checkBuildingIdError,\n  getUpdateBreakpoints,\n  generateStarterBuildings\n}"],"file":"building-service.js"}