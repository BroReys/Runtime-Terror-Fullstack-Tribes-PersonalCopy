{"version":3,"sources":["../../src/services/kingdom-service.js"],"names":["createKingdom","username","password","kingdomName","coordinateX","coordinateY","MapService","identifyKingdom","error","status","UserService","findByUsername","userInDatabase","hashedPassword","doesPasswordMatch","bcrypt","compareSync","hadKingdomAlready","active","kingdom","name","userId","id","KingdomRepository","savedKingdom","save","UnitLevelService","generateBasicUnitLevels","BuildingService","generateStarterBuildings","message","createAiKingdoms","UserRepository","findUserByUsername","buildingTypes","type","troopTypes","user","email","role","User","create","savedUser","i","Math","floor","random","level","x","y","gold","food","Kingdom","newKingdom","j","length","addBuildingToKingdom","BuildingRepository","findOneByKingdomIdWhereType","building","unitQuantities","randomUnitQuantity","l","quantity","TroopsService","joinTroopArmy","UnitLevelRepository","findUnitLevelByTroopTypeAndByKingdomId","unitLevel","upgradeLevel","banditsUtil","createBandits","updateKingdomName","kingdomId","findKingdomById","findById","owner","getKingdomDetails","ruler","location","amount","production","getKingdomsBuildings","getKingdomsTroops","resources","buildings","troops","details","findKingdomsByUserId","findKingdomByUserId","getAllKingdoms","getAllKingdomsByUserId","getWinnerStats","top_ruler","get","count","getKingdomsCount","getFirstPlayer","getKingdomById","getDTOAllKingdoms","kingdoms","DTOs","DTO"],"mappings":"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","sourcesContent":["import KingdomRepository from \"../repositories/kingdom-repository\";\nimport MapService from \"./map-service\";\nimport UserService from \"./user-service\";\nimport bcrypt from \"bcrypt\";\nimport UnitLevelService from \"./unit-level-service\";\nimport Kingdom from \"../models/kingdom\";\nimport UnitLevelRepository from \"../repositories/unit-level-repository\";\nimport {troopRules} from \"../rules/troops-rules\";\nimport {buildingRules} from \"../rules/building-rules\";\nimport BuildingService from \"./building-service\";\nimport TroopsService from \"./troops-services/troops-service\";\nimport BuildingRepository from \"../repositories/building-repository\";\nimport UserRepository from \"../repositories/user-repository\";\nimport User from \"../models/user\";\nimport banditsUtil from '../utilities/bandits'\n\nconst createKingdom = async ({\n  username,\n  password,\n  kingdomName,\n  coordinateX,\n  coordinateY\n}) => {\n\n  const {error, status} = await MapService.identifyKingdom(coordinateX,\n      coordinateY);\n\n  const userInDatabase = await UserService.findByUsername(username);\n\n  if (!username) {\n    return {status: 400, error: 'Username must be provided!'};\n\n  } else if (!password) {\n    return {status: 400, error: 'Password must be provided!'};\n\n  } else if (!userInDatabase) {\n    return {status: 404, error: 'User not found!'};\n\n  } else {\n\n    let hashedPassword = userInDatabase.password;\n    const doesPasswordMatch = bcrypt.compareSync(password, hashedPassword);\n\n    if (userInDatabase.hadKingdomAlready) {\n      return {status: 404, error: 'You already have a kingdom!'};\n\n    } else if (!userInDatabase.active) {\n      return {status: 403, error: 'User registration not completed!'};\n\n    } else if (!doesPasswordMatch) {\n      return {status: 403, error: 'Invalid password'};\n\n    } else if (!coordinateX || !coordinateY) {\n      return {status: 400, error: 'Coordinates must be provided!'};\n\n    } else if (error) {\n      return {status: 403, error: error};\n\n    } else if (status === \"taken\") {\n      return {\n        status: 403,\n        error: 'Coordinates already taken by another kingdom'\n      };\n\n    } else {\n      let kingdom = {\n        name: kingdomName || userInDatabase.username + \"'s kingdom\",\n        coordinateX: coordinateX,\n        coordinateY: coordinateY,\n        userId: userInDatabase.id,\n      };\n      const savedKingdom = await KingdomRepository.createKingdom(kingdom);\n      userInDatabase.hadKingdomAlready = true;\n      await userInDatabase.save();\n      await UnitLevelService.generateBasicUnitLevels(savedKingdom.id);\n      await BuildingService.generateStarterBuildings(savedKingdom.id);\n      return {\n        status: 200,\n        message: `Congratulations '${username}'! Your kingdom '${kingdom.name}' has been found at world map coordinates [${coordinateX},${coordinateY}]!`\n      };\n    }\n  }\n};\n\nconst createAiKingdoms = async () => {\n\n  if (!(await UserRepository.findUserByUsername('AI-ruler'))) {\n    //TODO exclude from middlewares\n    let buildingTypes = buildingRules().type;\n    let troopTypes = troopRules().type;\n\n    let user = {\n      username: \"AI-ruler\",\n      email: \"airuler@hotmail.com\",\n      password: \"Password123\",\n      role: \"user\"\n    }\n\n    let savedUser = await User.create(user);\n\n    for (let i = 1; i <= Math.floor(Math.random() * (10) + 3); i++) {\n\n      let level = Math.floor(Math.random() * (15 - 1) + 1);\n      let x = Math.floor(Math.random() * 10); // TODO (10-1) + 1 vs (10) + 1\n      let y = Math.floor(Math.random() * 10);\n\n      while ((await MapService.identifyKingdom(x, y)).status === 'taken'\n      || (await MapService.identifyKingdom(x, y)).error) {\n        x = Math.floor(Math.random() * 10);\n        y = Math.floor(Math.random() * 10);\n      }\n\n      let kingdom = {\n        name: `AI-kingdom${i}`,\n        coordinateX: x,\n        coordinateY: y,\n        gold: 1000 * level,\n        food: 2000 * level,\n        userId: savedUser.id\n      };\n\n      let newKingdom = await Kingdom.create(kingdom);\n      await UnitLevelService.generateBasicUnitLevels(newKingdom.id);\n\n      for (let j = 0; j < buildingTypes.length; j++) {\n\n        await BuildingService.addBuildingToKingdom(newKingdom.id,\n            buildingTypes[j], newKingdom.userId);\n        let building = await BuildingRepository.findOneByKingdomIdWhereType(\n            newKingdom.id, buildingTypes[j]);\n\n        if (buildingTypes[j] === 'townhall') {\n          building.level = level + 1;\n        } else {\n          building.level = level;\n        }\n        await building.save();\n      }\n\n      let unitQuantities = [\n        {'phalanx': 0.25, 'swordsman': 0.25, 'scout': 0.25, 'cavalry': 0.25},\n        {'phalanx': 0.50, 'swordsman': 0.15, 'scout': 0.10, 'cavalry': 0.25},\n        {'phalanx': 0.75, 'swordsman': 0.00, 'scout': 0.25, 'cavalry': 0.00},\n        {'phalanx': 0.50, 'swordsman': 0.00, 'scout': 0.50, 'cavalry': 0.00}\n      ];\n\n      let randomUnitQuantity = Math.floor(\n          Math.random() * unitQuantities.length);\n\n      for (let l = 0; l < troopTypes.length; l++) {\n\n        if (troopTypes[l] !== 'diplomat' && troopTypes[l] !== 'settlers'\n            && troopTypes[l] !== 'catapult') {\n\n          //TODO 100 * level ? 10 * level ?\n          let quantity = (100 * level)\n              * unitQuantities[randomUnitQuantity][troopTypes[l]];\n          await TroopsService.joinTroopArmy(troopTypes[l], quantity,\n              newKingdom.id);\n\n          let unitLevel = await UnitLevelRepository.findUnitLevelByTroopTypeAndByKingdomId(\n              newKingdom.id, troopTypes[l]);\n          unitLevel.upgradeLevel = level;\n          await unitLevel.save();\n        }\n      }\n      newKingdom.gold = 1000 * (level + 1);\n      newKingdom.food = 2000 * (level + 1);\n      await newKingdom.save();\n    }\n    await banditsUtil.createBandits(1)\n  }\n};\n\nconst updateKingdomName = async (kingdomId, kingdomName, userId) => {\n\n  let kingdom = await KingdomRepository.findKingdomById(kingdomId);\n  let owner = await UserService.findById(userId);\n\n  if (!kingdomId) {\n    return {status: 400, error: 'Id must be provided!'};\n\n  } else if (!kingdom) {\n    return {status: 404, error: 'No kingdom with this id found!'};\n\n  } else if (!kingdomName) {\n    return {status: 400, error: \"Kingdom's name must be provided!\"};\n\n  } else if (kingdom.userId !== owner.id) {\n    return {status: 403, error: 'Kingdom belongs to another user!'};\n\n  } else {\n    kingdom.name = kingdomName;\n    await KingdomRepository.save(kingdom);\n    return {status: 200, message: \"ok\"};\n  }\n};\n\nconst getKingdomDetails = async (kingdomId, userId) => {\n  let kingdom = await KingdomRepository.findKingdomById(kingdomId);\n  let owner = await UserService.findById(userId);\n\n  if (!kingdomId) {\n    return {status: 400, error: 'Id must be provided!'};\n\n  } else if (!kingdom) {\n    return {status: 404, error: 'No kingdom with this id found!'};\n\n  } else if (kingdom.userId !== owner.id) {\n    return {status: 403, error: 'Kingdom belongs to another user!'};\n\n  } else {\n    return {\n      status: 200,\n      details: {\n        kingdom: {\n          kingdomId: kingdom.id,\n          kingdomName: kingdom.name,\n          ruler: owner.username,\n          location: {\n            coordinateX: kingdom.coordinateX,\n            coordinateY: kingdom.coordinateY,\n          }\n        },\n        resources: [\n          {\n            type: 'food',\n            amount: kingdom.food,\n            production: kingdom.food.production\n          }, {\n            type: 'gold',\n            amount: kingdom.gold,\n            production: kingdom.gold.production\n          }\n        ],\n        buildings: await KingdomRepository.getKingdomsBuildings(kingdom.id),\n        troops: await KingdomRepository.getKingdomsTroops(kingdom.id),\n      }\n    };\n  }\n};\n\nconst findKingdomsByUserId = async (userId) => KingdomRepository.findKingdomByUserId(\n    userId);\n\nconst getAllKingdoms = async () => KingdomRepository.getAllKingdoms();\n\nconst getAllKingdomsByUserId = async (userId) => KingdomRepository.findKingdomsByUserId(userId);\n\nconst getKingdomsBuildings = async () => KingdomRepository.getKingdomsBuildings();\n\nconst getKingdomsTroops = async () => KingdomRepository.getKingdomsTroops();\n\nconst getWinnerStats = async () => {\n  let top_ruler = await KingdomRepository.getWinnerStats();\n  return {\n    userId: top_ruler[0].get('userId'),\n    count: top_ruler[0].get('count')\n  }\n};\n\nconst getKingdomsCount = async () => KingdomRepository.count();\n\nconst getFirstPlayer = async () => KingdomRepository.getFirstPlayer();\n\nconst getKingdomById = async (kingdomId) => KingdomRepository.findKingdomById(\n    kingdomId);\n\nconst getDTOAllKingdoms = async () => {\n  let kingdoms = await KingdomRepository.getAllKingdoms();\n  let DTOs = [];\n  for (let i = 0; i < kingdoms.length; i++) {\n    let user = await UserService.findById(kingdoms[i].userId);\n    let username = user === null ? null : user.username;\n    let DTO = {\n      id : kingdoms[i].id,\n      name: kingdoms[i].name,\n      ruler: username,\n      coordinateX: kingdoms[i].coordinateX,\n      coordinateY: kingdoms[i].coordinateY\n    }\n    DTOs[i] = DTO;\n  }\n  return DTOs;\n}\n\nexport default {\n  createKingdom,\n  createAiKingdoms,\n  updateKingdomName,\n  getKingdomDetails,\n  getKingdomsTroops,\n  getKingdomsBuildings,\n  findKingdomsByUserId,\n  getAllKingdoms,\n  getWinnerStats,\n  getKingdomsCount,\n  getFirstPlayer,\n  getKingdomById,\n  getAllKingdomsByUserId,\n  getDTOAllKingdoms\n};\n"],"file":"kingdom-service.js"}