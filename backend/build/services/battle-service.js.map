{"version":3,"sources":["../../src/services/battle-service.js"],"names":["initiateBattle","attacker","defender","attackingKingdom","defendingKingdom","troops","getValueFromTroops","slowestSpeed","console","log","timeOfTravel","calculateDistance","possibleBanditsReward","name","startsWith","bandits","getBanditsReward","id","battle","timeOfArrival","Math","floor","Date","now","timeOfComeback","BattleRepository","create","savedBattle","setAttacker","setDefender","setDefendingKingdom","setAttackingKingdom","sendTroopsToBattle","AttackerTroopsRepository","battleId","resolutionTime","startBattle","getAttackingKingdom","getDefendingKingdom","getAttackerTroopsToBattle","troopsToBattle","getTroops","defendersTroops","startedAt","getAttributesForEspionageReport","defendingKingdomInfo","areThereWalkers","doesArmyIncludeWalkers","doesArmyIncludeCatapults","doesArmyIncludesType","length","espionageAttack","totalTroops","takeOverAttack","killTroopsType","isFinished","result","save","buildings","demolitionAttack","plunderAttack","troopsInBattle","getSpiesPowerByPowerType","attackerSpiesPower","defenderSpiesPower","comparePowers","killPercentageOfTroops","espionageAttributes","espionageReportRepository","totalAttackPower","totalDefensePower","gold","food","loyalty","espionageReport","createTroopEspionageReport","createBuildingsEspionageReport","randomizeDeaths","defenderTroops","originalAttackPower","originalDefensePower","randomizers","getRandomizersOfBattle","randomizedAttack","fortunateEventAttacker","weakeningAttackerArmy","unfortunateEventAttacker","randomizedDefense","unfortunateEventDefender","fortunateEventDefender","carryLimit","stolenGold","stolenFood","ratio","round","i","type","j","quantity","pickRandomBuilding","random","level","destroyedBuilding","defenderLostTroopsRepository","destroy","catapultsArray","getUser","setUser","returnTroopsToKingdom","quantityInBattle","getBattleReport","user","getAttacker","getDefender","getAttackerLostTroops","attackerDeadTroops","getDefenderLostTroops","defenderDeadTroopsAndBuildings","getEspionageReport","report","getEspionageTroops","reportTroops","getEspionageBuildings","reportBuilding","troopsInBattleDTO","getTroopsDTO","attackerDeadTroopsDTO","defenderDeadTroopsDTO","currentTime","timeDiff","getAttackerFinishedDTO","getUnfinishedBattleDTO","getDefenderFinishedDTO","showAllBattlesAsAttackingAndDefendingKingdom","kingdomId","findAllAsAttackingKingdom","attackerBattles","findAllAsDefendingKingdom","defenderBattles","attackerDTOs","defenderDTOs","username","getLatestReport","attackingKingdomId","defendingKingdomId","findFinishedByAttackingAndDefendingKingdom","buildingsReport","troopsReport","battleDate","getReportDTO","findById","findAllUnfinished","findAllFinished","defenderDeadTroops","lostTroops","stolenResources","intelLeak","battleDTOWithoutReport","battleDTOWithReport","reportId","getReportDTOTroopBuildings","troopReportDTOs","troop","troopsDTOs","troopDTO","role","targetKingdom","targetRuler","espionageBuilding","EspionageBuildingsRepository","savedBuilding","setEspionageBuildings","getUnitLevel","unitLevel","espionageTroop","upgradeLevel","EspionageTroopsRepository","savedTroop","setEspionageTroops","getBuildings","map","reduce","partialSum","a","getBuildingDefensePower","attackPower","defensePower","kingdom","percentageOfComparison","killTroops","percentageOfDead","deadTroop","subtractTroopsFromTroopsInBattle","AttackerLostTroopsRepository","randomizerOfDeaths","arrayOfOneTroop","typeOfValue","sumOfTroopProperties","count","allTroops","Object","entries","key","value","filteredValues","filter","e","undefined","speed","sort","otherPropertiesValue","buildingDefensePower","buildingLevel","defense","filtered","powerType","spiesPower","scout","spiesAttack","spiesDefense","eventGenerator","choosePercent","fortunateEvent","unfortunateEvent","x1","coordinateX","y1","coordinateY","x2","y2","sqrt","pow"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;;AAEA;;AACA;;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA,IAAMA,cAAc;AAAA,2FAAG,iBAAOC,QAAP,EAAiBC,QAAjB,EAA2BC,gBAA3B,EACnBC,gBADmB,EACDC,MADC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGIC,kBAAkB,CAACH,gBAAD,EAAmBE,MAAnB,EACvC,OADuC,CAHtB;;AAAA;AAGjBE,YAAAA,YAHiB;AAKrBC,YAAAA,OAAO,CAACC,GAAR,CAAYF,YAAZ;AACIG,YAAAA,YANiB,GAMFC,iBAAiB,CAACR,gBAAD,EAAmBC,gBAAnB,CAAjB,GACbG,YAPe;AAQjBK,YAAAA,qBARiB,GAQO,IARP;;AAAA,iBASjBR,gBAAgB,CAACS,IAAjB,CAAsBC,UAAtB,CAAiC,SAAjC,CATiB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUWC,oBAAQC,gBAAR,CAAyBZ,gBAAgB,CAACa,EAA1C,CAVX;;AAAA;AAUnBL,YAAAA,qBAVmB;;AAAA;AAajBM,YAAAA,MAbiB,GAaR;AACXC,cAAAA,aAAa,EAAEC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoBb,YAAY,GAAG,EAAf,GAAoB,EAAnD,CADJ;AAEXc,cAAAA,cAAc,EAAEJ,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAb,GAAoB,KAAKb,YAAY,GAAG,EAAf,GAAoB,EAAzB,CAA/B,CAFL;AAGXE,cAAAA,qBAAqB,EAAEA;AAHZ,aAbQ;AAAA;AAAA,mBAmBGa,6BAAiBC,MAAjB,CAAwBR,MAAxB,CAnBH;;AAAA;AAmBjBS,YAAAA,WAnBiB;AAoBrBA,YAAAA,WAAW,CAACC,WAAZ,CAAwB3B,QAAxB;AACA0B,YAAAA,WAAW,CAACE,WAAZ,CAAwB3B,QAAxB;AACAyB,YAAAA,WAAW,CAACG,mBAAZ,CAAgC1B,gBAAhC;AACAuB,YAAAA,WAAW,CAACI,mBAAZ,CAAgC5B,gBAAhC;AAvBqB;AAAA,mBAwBf6B,kBAAkB,CAAC7B,gBAAD,EAAmBE,MAAnB,CAxBH;;AAAA;AAAA;AAAA,mBAyBf4B,6CAAyBP,MAAzB,CAAgCrB,MAAhC,EAAwCsB,WAAxC,CAzBe;;AAAA;AAAA,6CA2Bd;AACLO,cAAAA,QAAQ,EAAEP,WAAW,CAACV,EADjB;AAELkB,cAAAA,cAAc,EAAER,WAAW,CAACR;AAFvB,aA3Bc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdnB,cAAc;AAAA;AAAA;AAAA,GAApB;;AAiCA,IAAMoC,WAAW;AAAA,4FAAG,kBAAOlB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEWA,MAAM,CAACmB,mBAAP,EAFX;;AAAA;AAEdlC,YAAAA,gBAFc;AAAA;AAAA,mBAGWe,MAAM,CAACoB,mBAAP,EAHX;;AAAA;AAGdlC,YAAAA,gBAHc;AAAA;AAAA,mBAISc,MAAM,CAACqB,yBAAP,EAJT;;AAAA;AAIdC,YAAAA,cAJc;AAAA;AAAA,mBAKUpC,gBAAgB,CAACqC,SAAjB,EALV;;AAAA;AAKdC,YAAAA,eALc;AAMdhC,YAAAA,YANc,GAMC,CAACQ,MAAM,CAACC,aAAP,GAAuBD,MAAM,CAACyB,SAA/B,IAA4C,EAA5C,GAAiD,EANlD;AAAA;AAAA,mBAOeC,+BAA+B,CAC5DxC,gBAD4D,EAC1CsC,eAD0C,CAP9C;;AAAA;AAOdG,YAAAA,oBAPc;AASdC,YAAAA,eATc,GASIC,sBAAsB,CAACP,cAAD,CAT1B;AAUdQ,YAAAA,wBAVc,GAUaC,oBAAoB,CAACT,cAAD,EAC/C,UAD+C,CAVjC,EAalB;;AAbkB,kBAcdA,cAAc,CAACU,MAAf,KAA0B,CAA1B,IAA+BD,oBAAoB,CAACT,cAAD,EACnD,OADmD,CAdrC;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBVW,eAAe,CAACjC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACjBM,YADiB,EACH8B,cADG,EACaE,eADb,CAhBL;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAoBP,CAACI,eAAD,IAAoBG,oBAAoB,CAACT,cAAD,EAC/C,UAD+C,CAAxC,IACQ,CAACQ,wBArBF;AAAA;AAAA;AAAA;;AAAA,kBAuBZH,oBAAoB,CAACO,WAArB,KAAqC,CAvBzB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAwBRC,cAAc,CAACnC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,CAxBN;;AAAA;AAAA,iBA0BV6C,oBAAoB,CAACT,cAAD,EAAiB,OAAjB,CA1BV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2BNW,eAAe,CAACjC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACjBM,YADiB,EACH8B,cADG,EACaE,eADb,CA3BT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAgCRY,cAAc,CAACd,cAAD,EAAiBrC,gBAAjB,EAAmCe,MAAnC,EAChB,UADgB,CAhCN;;AAAA;AAkCdA,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,MAAhB;AAnCc;AAAA,mBAoCRtC,MAAM,CAACuC,IAAP,EApCQ;;AAAA;AAAA,iBAsCVR,oBAAoB,CAACT,cAAD,EAAiB,OAAjB,CAtCV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuCNW,eAAe,CAACjC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACjBM,YADiB,EACH8B,cADG,EACaE,eADb,CAvCT;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA4CP,CAACI,eAAD,IACPG,oBAAoB,CAACT,cAAD,EAAiB,UAAjB,CA7CN;AAAA;AAAA;AAAA;;AAAA,kBA+CZK,oBAAoB,CAACO,WAArB,KAAqC,CA/CzB;AAAA;AAAA;AAAA;;AAAA,kBAiDVP,oBAAoB,CAACa,SAArB,CAA+BR,MAA/B,GAAwC,CAjD9B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAkDNS,gBAAgB,CAACzC,MAAD,EAASf,gBAAT,EAClB0C,oBAAoB,CAACa,SADH,EACclB,cADd,CAlDV;;AAAA;AAAA,iBAsDVS,oBAAoB,CAACT,cAAD,EAAiB,UAAjB,CAtDV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAuDNa,cAAc,CAACnC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,CAvDR;;AAAA;AAAA,iBA0DV6C,oBAAoB,CAACT,cAAD,EAAiB,OAAjB,CA1DV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2DNW,eAAe,CAACjC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACjBM,YADiB,EACH8B,cADG,EACaE,eADb,CA3DT;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiERY,cAAc,CAACd,cAAD,EAAiBrC,gBAAjB,EAAmCe,MAAnC,EAChB,UADgB,CAjEN;;AAAA;AAmEdA,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,MAAhB;AApEc;AAAA,mBAqERtC,MAAM,CAACuC,IAAP,EArEQ;;AAAA;AAAA,iBAuEVR,oBAAoB,CAACT,cAAD,EAAiB,UAAjB,CAvEV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAwENc,cAAc,CAACd,cAAD,EAAiBrC,gBAAjB,EAAmCe,MAAnC,EAChB,UADgB,CAxER;;AAAA;AAAA,iBA4EV+B,oBAAoB,CAACT,cAAD,EAAiB,OAAjB,CA5EV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA6ENW,eAAe,CAACjC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACjBM,YADiB,EACH8B,cADG,EACaE,eADb,CA7ET;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAqFVkB,aAAa,CAAC1C,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACfoC,cADe,EACC9B,YADD,EACegC,eADf,CArFH;;AAAA;AAAA,kBAwFZxB,MAAM,CAACsC,MAAP,KAAkB,KAxFN;AAAA;AAAA;AAAA;;AAAA,kBA0FVR,wBAAwB,IAAIH,oBAAoB,CAACa,SAArB,CAA+BR,MAA/B,GAC1B,CA3FQ;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA4FNS,gBAAgB,CAACzC,MAAD,EAASf,gBAAT,EAClB0C,oBAAoB,CAACa,SADH,EACclB,cADd,CA5FV;;AAAA;AAAA,iBAgGVS,oBAAoB,CAACT,cAAD,EAAiB,UAAjB,CAhGV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiGNa,cAAc,CAACnC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,CAjGR;;AAAA;AAAA,iBAoGV6C,oBAAoB,CAACT,cAAD,EAAiB,OAAjB,CApGV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAqGNW,eAAe,CAACjC,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACjBM,YADiB,EACH8B,cADG,EACaE,eADb,CArGT;;AAAA;AAAA,8CA0GXxB,MA1GW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXkB,WAAW;AAAA;AAAA;AAAA,GAAjB;;AA6GA,IAAMe,eAAe;AAAA,4FAAG,kBAAOjC,MAAP,EAAef,gBAAf,EAAiCC,gBAAjC,EACpBM,YADoB,EACNmD,cADM,EACUnB,eADV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGSoB,wBAAwB,CAAC3D,gBAAD,EAAmB;AACtE0D,YAAAA,cADmD,EACnCnD,YADmC,EACrB,QADqB,CAHjC;;AAAA;AAGlBqD,YAAAA,kBAHkB;AAAA;AAAA,mBAKSD,wBAAwB,CAAC1D,gBAAD,EAAmB;AACtEsC,YAAAA,eADmD,EAClChC,YADkC,EACpB,SADoB,CALjC;;AAAA;AAKlBsD,YAAAA,kBALkB;AAQlBC,YAAAA,aARkB,GAQF/C,MAAM,CAACsC,MAAP,KAAkB,KAAlB,GAA0B,CAA1B,GAA8BO,kBAAkB,GAC9DC,kBATgB;;AAAA,kBAWlBC,aAAa,GAAG,CAXE;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAYdC,sBAAsB,CAACH,kBAAD,EAAqBC,kBAArB,EACxBH,cADwB,EACR3C,MADQ,EACAf,gBADA,EACkB,UADlB,CAZR;;AAAA;AAepBe,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,MAAhB;AAhBoB;AAAA,mBAiBdtC,MAAM,CAACuC,IAAP,EAjBc;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAmBXQ,aAAa,KAAK,CAnBP;AAAA;AAAA;AAAA;;AAmBY;AAEhC/C,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,MAAhB;AAtBoB;AAAA,mBAuBdtC,MAAM,CAACuC,IAAP,EAvBc;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAyBXQ,aAAa,GAAG,CAzBL;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA2BYrB,+BAA+B,CAC3DxC,gBAD2D,EACzCsC,eADyC,CA3B3C;;AAAA;AA2BhByB,YAAAA,mBA3BgB;AAAA;AAAA,mBA8BQC,sCAA0B1C,MAA1B,CACxByC,mBAAmB,CAACf,WADI,EAExBe,mBAAmB,CAACE,gBAFI,EAGxBF,mBAAmB,CAACG,iBAHI,EAIxBH,mBAAmB,CAACI,IAJI,EAKxBJ,mBAAmB,CAACK,IALI,EAMxBL,mBAAmB,CAACM,OANI,EAOxBvD,MAPwB,CA9BR;;AAAA;AA8BhBwD,YAAAA,eA9BgB;AAAA;AAAA,mBAuCdC,0BAA0B,CAACjC,eAAD,EAAkBgC,eAAlB,CAvCZ;;AAAA;AAAA;AAAA,mBAyCdE,8BAA8B,CAACT,mBAAmB,CAACT,SAArB,EAChCgB,eADgC,CAzChB;;AAAA;AAAA,kBA4ChBxD,MAAM,CAACsC,MAAP,KAAkB,KA5CF;AAAA;AAAA;AAAA;;AAAA;AAAA,mBA6CZqB,eAAe,CAAChB,cAAD,EAAiB3C,MAAjB,EAAyB,UAAzB,EACjBf,gBADiB,CA7CH;;AAAA;AAiDpBe,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,KAAhB;AAlDoB;AAAA,mBAmDdtC,MAAM,CAACuC,IAAP,EAnDc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfN,eAAe;AAAA;AAAA;AAAA,GAArB;;AAuDA,IAAMS,aAAa;AAAA,4FAAG,kBAAO1C,MAAP,EAAef,gBAAf,EAClBC,gBADkB,EACAyD,cADA,EACgBnD,YADhB,EAC8BoE,cAD9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAGYxE,kBAAkB,CAACH,gBAAD,EAC9C0D,cAD8C,EAC9B,QAD8B,CAH9B;;AAAA;AAGhBkB,YAAAA,mBAHgB;AAAA;AAAA,mBAKazE,kBAAkB,CAACF,gBAAD,EAC/C0E,cAD+C,EAC/B,SAD+B,CAL/B;;AAAA;AAKhBE,YAAAA,oBALgB;AAOhBC,YAAAA,WAPgB,GAOFC,sBAAsB,CAACxE,YAAD,CAPpB;AAShByE,YAAAA,gBATgB,GASGJ,mBAAmB,GACpCE,WAAW,CAACG,sBADK,GAEjBH,WAAW,CAACI,qBAFK,GAGjBJ,WAAW,CAACK,wBAZE;AAchBC,YAAAA,iBAdgB,GAcIP,oBAAoB,GACtCC,WAAW,CAACO,wBADM,GAElBP,WAAW,CAACQ,sBAhBE;AAkBhBxB,YAAAA,aAlBgB,GAkBAkB,gBAAgB,GAAGI,iBAlBnB;;AAAA,kBAoBhBtB,aAAa,GAAG,CApBA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAsBZC,sBAAsB,CAACiB,gBAAD,EAAmBI,iBAAnB,EACxB1B,cADwB,EACR3C,MADQ,EACAf,gBADA,EACkB,UADlB,CAtBV;;AAAA;AAAA;AAAA,mBAwBZ0E,eAAe,CAACC,cAAD,EAAiB5D,MAAjB,EAAyB,UAAzB,EAAqCd,gBAArC,CAxBH;;AAAA;AA0BlBc,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,MAAhB;AA3BkB;AAAA,mBA4BZtC,MAAM,CAACuC,IAAP,EA5BY;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBA8BTQ,aAAa,KAAK,CA9BT;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgCZY,eAAe,CAAChB,cAAD,EAAiB3C,MAAjB,EAAyB,UAAzB,EAAqCf,gBAArC,CAhCH;;AAAA;AAAA;AAAA,mBAiCZ0E,eAAe,CAACC,cAAD,EAAiB5D,MAAjB,EAAyB,UAAzB,EAAqCd,gBAArC,CAjCH;;AAAA;AAmClBc,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,MAAhB;AApCkB;AAAA,mBAqCZtC,MAAM,CAACuC,IAAP,EArCY;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAuCTQ,aAAa,GAAG,CAvCP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAyCZY,eAAe,CAAChB,cAAD,EAAiB3C,MAAjB,EAAyB,UAAzB,EAAqCf,gBAArC,CAzCH;;AAAA;AAAA;AAAA,mBA0CZ+D,sBAAsB,CAACiB,gBAAD,EAAmBI,iBAAnB,EACxBT,cADwB,EACR5D,MADQ,EACAd,gBADA,EACkB,UADlB,CA1CV;;AAAA;AAAA;AAAA,mBA6CKE,kBAAkB,CAACH,gBAAD,EAAmB0D,cAAnB,EACrC,aADqC,CA7CvB;;AAAA;AA6Cd6B,YAAAA,UA7Cc;AA+CdnB,YAAAA,IA/Cc,GA+CPnE,gBAAgB,CAACmE,IA/CV;AAgDdC,YAAAA,IAhDc,GAgDPpE,gBAAgB,CAACoE,IAhDV;;AAAA,kBAkDdkB,UAAU,IAAKnB,IAAI,GAAGC,IAlDR;AAAA;AAAA;AAAA;;AAoDhBtD,YAAAA,MAAM,CAACyE,UAAP,GAAoBpB,IAApB;AACArD,YAAAA,MAAM,CAAC0E,UAAP,GAAoBpB,IAApB;AACApE,YAAAA,gBAAgB,CAACmE,IAAjB,GAAwB,CAAxB;AACAnE,YAAAA,gBAAgB,CAACoE,IAAjB,GAAwB,CAAxB;AAvDgB;AAAA,mBAwDVpE,gBAAgB,CAACqD,IAAjB,EAxDU;;AAAA;AAAA;AAAA;;AAAA;AA2DZoC,YAAAA,KA3DY,GA2DJrB,IAAI,IAAIA,IAAI,GAAGD,IAAX,CA3DA;AA4DhBrD,YAAAA,MAAM,CAAC0E,UAAP,GAAoBxE,IAAI,CAAC0E,KAAL,CAAWJ,UAAU,GAAGG,KAAxB,CAApB;AACA3E,YAAAA,MAAM,CAACyE,UAAP,GAAoBvE,IAAI,CAAC0E,KAAL,CAAWJ,UAAU,IAAI,IAAIG,KAAR,CAArB,CAApB;AACAzF,YAAAA,gBAAgB,CAACmE,IAAjB,GAAwBnE,gBAAgB,CAACmE,IAAjB,GAAwBrD,MAAM,CAACyE,UAAvD;AACAvF,YAAAA,gBAAgB,CAACoE,IAAjB,GAAwBpE,gBAAgB,CAACoE,IAAjB,GAAwBtD,MAAM,CAAC0E,UAAvD;AA/DgB;AAAA,mBAgEVxF,gBAAgB,CAACqD,IAAjB,EAhEU;;AAAA;AAmElBvC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,KAAhB;AACAtC,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AApEkB;AAAA,mBAqEZrC,MAAM,CAACuC,IAAP,EArEY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbG,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAyEA,IAAMD,gBAAgB;AAAA,4FAAG,kBAAOzC,MAAP,EAAef,gBAAf,EACrBuD,SADqB,EACVlB,cADU;AAAA;AAAA;AAAA;AAAA;AAAA;AAGduD,YAAAA,CAHc,GAGV,CAHU;;AAAA;AAAA,kBAGPA,CAAC,GAAGvD,cAAc,CAACU,MAHZ;AAAA;AAAA;AAAA;;AAAA,kBAIjBV,cAAc,CAACuD,CAAD,CAAd,CAAkBC,IAAlB,KAA2B,UAJV;AAAA;AAAA;AAAA;;AAKVC,YAAAA,CALU,GAKN,CALM;;AAAA;AAAA,kBAKHA,CAAC,GAAGzD,cAAc,CAACuD,CAAD,CAAd,CAAkBG,QALnB;AAAA;AAAA;AAAA;;AAObC,YAAAA,kBAPa,GAOQ/E,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACgF,MAAL,KAAgB1C,SAAS,CAACR,MAArC,CAPR;;AAAA,kBASbQ,SAAS,CAACyC,kBAAD,CAAT,CAA8BE,KAA9B,GAAsC,CATzB;AAAA;AAAA;AAAA;;AAUf3C,YAAAA,SAAS,CAACyC,kBAAD,CAAT,CAA8BE,KAA9B,GAAsC3C,SAAS,CAACyC,kBAAD,CAAT,CAA8BE,KAA9B,GAChC,CADN;;AAVe,kBAaX3C,SAAS,CAACyC,kBAAD,CAAT,CAA8BE,KAA9B,KAAwC,CAb7B;AAAA;AAAA;AAAA;;AAcTC,YAAAA,iBAdS,GAcW;AACtBN,cAAAA,IAAI,EAAEtC,SAAS,CAACyC,kBAAD,CAAT,CAA8BH,IADd;AAEtBE,cAAAA,QAAQ,EAAE,CAFY;AAGtBhE,cAAAA,QAAQ,EAAEhB,MAAM,CAACD;AAHK,aAdX;AAAA;AAAA,mBAmBPsF,yCAA6B7E,MAA7B,CAAoC4E,iBAApC,CAnBO;;AAAA;AAAA;AAAA,mBAoBP5C,SAAS,CAACyC,kBAAD,CAAT,CAA8BK,OAA9B,EApBO;;AAAA;AAK6BP,YAAAA,CAAC,EAL9B;AAAA;AAAA;;AAAA;AAyBfQ,YAAAA,cAzBe,GAyBE,EAzBF;AA0BnBA,YAAAA,cAAc,CAAC,CAAD,CAAd,GAAoBjE,cAAc,CAACuD,CAAD,CAAlC;AA1BmB;AAAA,mBA2BblB,eAAe,CAAC4B,cAAD,EAAiBvF,MAAjB,EAAyB,UAAzB,EACjBf,gBADiB,CA3BF;;AAAA;AAGoB4F,YAAAA,CAAC,EAHrB;AAAA;AAAA;;AAAA;AA+BvB7E,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,KAAhB;AAhCuB;AAAA,mBAiCjBtC,MAAM,CAACuC,IAAP,EAjCiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhBE,gBAAgB;AAAA;AAAA;AAAA,GAAtB;;AAoCA,IAAMN,cAAc;AAAA,4FAAG,kBAAOnC,MAAP,EAAef,gBAAf,EAAiCC,gBAAjC;AAAA;AAAA;AAAA;AAAA;AACrBA,YAAAA,gBAAgB,CAACqE,OAAjB,GAA2BrE,gBAAgB,CAACqE,OAAjB,GAA2B,EAAtD;;AADqB,kBAGjBrE,gBAAgB,CAACqE,OAAjB,IAA4B,CAHX;AAAA;AAAA;AAAA;;AAAA,2BAInBrE,gBAJmB;AAAA;AAAA,mBAIYD,gBAAgB,CAACuG,OAAjB,EAJZ;;AAAA;AAAA;;AAAA,yBAIFC,OAJE;;AAAA;AAAA;AAAA,mBAOfvG,gBAAgB,CAACqD,IAAjB,EAPe;;AAAA;AASrBvC,YAAAA,MAAM,CAACqC,UAAP,GAAoB,IAApB;AACArC,YAAAA,MAAM,CAACsC,MAAP,GAAgB,KAAhB;AAVqB;AAAA,mBAWftC,MAAM,CAACuC,IAAP,EAXe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdJ,cAAc;AAAA;AAAA;AAAA,GAApB;;AAcA,IAAMuD,qBAAqB;AAAA,4FAAG,kBAAO1F,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACCA,MAAM,CAACmB,mBAAP,EADD;;AAAA;AACxBlC,YAAAA,gBADwB;AAAA;AAAA,mBAEDe,MAAM,CAACqB,yBAAP,EAFC;;AAAA;AAExBC,YAAAA,cAFwB;AAAA;AAAA,mBAGTrC,gBAAgB,CAACsC,SAAjB,EAHS;;AAAA;AAGxBpC,YAAAA,MAHwB;AAKnB0F,YAAAA,CALmB,GAKf,CALe;;AAAA;AAAA,kBAKZA,CAAC,GAAG1F,MAAM,CAAC6C,MALC;AAAA;AAAA;AAAA;;AAMjB+C,YAAAA,CANiB,GAMb,CANa;;AAAA;AAAA,kBAMVA,CAAC,GAAGzD,cAAc,CAACU,MANT;AAAA;AAAA;AAAA;;AAAA,kBAOpB7C,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IAAV,KAAmBxD,cAAc,CAACyD,CAAD,CAAd,CAAkBD,IAPjB;AAAA;AAAA;AAAA;;AAQtB3F,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUc,gBAAV,GAA6BxG,MAAM,CAAC0F,CAAD,CAAN,CAAUc,gBAAV,CAA2B;AAA3B,cACvBrE,cAAc,CAACyD,CAAD,CAAd,CAAkBC,QADxB;AAEA7F,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB7F,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB1D,cAAc,CAACyD,CAAD,CAAd,CAAkBC,QAA5D,CAVsB,CAUgD;;AAVhD;AAAA,mBAWhB7F,MAAM,CAAC0F,CAAD,CAAN,CAAUtC,IAAV,EAXgB;;AAAA;AAAA;AAAA,mBAYhBjB,cAAc,CAACyD,CAAD,CAAd,CAAkBO,OAAlB,EAZgB;;AAAA;AAMiBP,YAAAA,CAAC,EANlB;AAAA;AAAA;;AAAA;AAKOF,YAAAA,CAAC,EALR;AAAA;AAAA;;AAAA;AAAA,kBAiBxB7E,MAAM,CAACN,qBAAP,KAAiC,IAAjC,IAAyCM,MAAM,CAACsC,MAAP,KAAkB,KAjBnC;AAAA;AAAA;AAAA;;AAkB1BrD,YAAAA,gBAAgB,CAACoE,IAAjB,GAAwBpE,gBAAgB,CAACoE,IAAjB,GAAwBrD,MAAM,CAACN,qBAAvD;AAlB0B;AAAA,mBAmBpBT,gBAAgB,CAACsD,IAAjB,EAnBoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBmD,qBAAqB;AAAA;AAAA;AAAA,GAA3B;;AAuBA,IAAME,eAAe;AAAA,4FAAG,kBAAO5F,MAAP,EAAe6F,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAED7F,MAAM,CAAC8F,WAAP,EAFC;;AAAA;AAElB/G,YAAAA,QAFkB;AAAA;AAAA,mBAGDiB,MAAM,CAAC+F,WAAP,EAHC;;AAAA;AAGlB/G,YAAAA,QAHkB;AAAA;AAAA,mBAIOgB,MAAM,CAACmB,mBAAP,EAJP;;AAAA;AAIlBlC,YAAAA,gBAJkB;AAAA;AAAA,mBAKOe,MAAM,CAACoB,mBAAP,EALP;;AAAA;AAKlBlC,YAAAA,gBALkB;AAAA;AAAA,mBAOSc,MAAM,CAACgG,qBAAP,EAPT;;AAAA;AAOlBC,YAAAA,kBAPkB;AAAA;AAAA,mBAQqBjG,MAAM,CAACkG,qBAAP,EARrB;;AAAA;AAQlBC,YAAAA,8BARkB;AAAA;AAAA,mBASKnG,MAAM,CAACqB,yBAAP,EATL;;AAAA;AASlBsB,YAAAA,cATkB;AAAA;AAAA,mBAWH3C,MAAM,CAACoG,kBAAP,EAXG;;AAAA;AAWlBC,YAAAA,MAXkB;;AAAA,kBAelBA,MAAM,KAAK,IAfO;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAgBCA,MAAM,CAACC,kBAAP,EAhBD;;AAAA;AAgBpBC,YAAAA,YAhBoB;AAAA;AAAA,mBAiBGF,MAAM,CAACG,qBAAP,EAjBH;;AAAA;AAiBpBC,YAAAA,cAjBoB;;AAAA;AAoBlBC,YAAAA,iBApBkB,GAoBEC,YAAY,CAAChE,cAAD,CApBd;AAqBlBiE,YAAAA,qBArBkB,GAqBMD,YAAY,CAACV,kBAAD,CArBlB;AAsBlBY,YAAAA,qBAtBkB,GAsBMF,YAAY,CAACR,8BAAD,CAtBlB;;AAAA,kBAwBlBN,IAAI,CAAC9F,EAAL,KAAYhB,QAAQ,CAACgB,EAxBH;AAAA;AAAA;AAAA;;AAyBhB+G,YAAAA,WAzBgB,GAyBF1G,IAAI,CAACC,GAAL,KAAa,IAzBX;AA0BhB0G,YAAAA,QA1BgB,GA0BLD,WAAW,GAAG9G,MAAM,CAACM,cA1BhB;;AAAA,kBA4BhBN,MAAM,CAACqC,UAAP,IAAqB0E,QAAQ,GAAG,CA5BhB;AAAA;AAAA;AAAA;;AAAA,8CA6BXC,sBAAsB,CAAChH,MAAD,EAASd,gBAAT,EAA2BF,QAA3B,EACzB0H,iBADyB,EACNE,qBADM,EACiBC,qBADjB,EAEzBR,MAFyB,EAEjBI,cAFiB,EAEDF,YAFC,CA7BX;;AAAA;AAAA,8CAkCXU,sBAAsB,CAACjH,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACzBF,QADyB,EACfD,QADe,EACL2H,iBADK,EACc,UADd,CAlCX;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAsCXb,IAAI,CAAC9F,EAAL,KAAYf,QAAQ,CAACe,EAtCV;AAAA;AAAA;AAAA;;AAAA,iBAwChBC,MAAM,CAACqC,UAxCS;AAAA;AAAA;AAAA;;AAAA,8CAyCX6E,sBAAsB,CAAClH,MAAD,EAASf,gBAAT,EAA2BF,QAA3B,EACzB6H,qBADyB,EACFC,qBADE,EACqBR,MADrB,CAzCX;;AAAA;AAAA,8CA6CXY,sBAAsB,CAACjH,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EACzBF,QADyB,EACfD,QADe,EACL2H,iBADK,EACc,UADd,CA7CX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfd,eAAe;AAAA;AAAA;AAAA,GAArB;;AAmDA,IAAMuB,4CAA4C;AAAA,4FAAG,kBAAOC,SAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACvB7G,6BAAiB8G,yBAAjB,CACxBD,SADwB,CADuB;;AAAA;AAC/CE,YAAAA,eAD+C;AAAA;AAAA,mBAGvB/G,6BAAiBgH,yBAAjB,CACxBH,SADwB,CAHuB;;AAAA;AAG/CI,YAAAA,eAH+C;AAK/CC,YAAAA,YAL+C,GAKhC,EALgC;AAM/CC,YAAAA,YAN+C,GAMhC,EANgC;AAQ1C7C,YAAAA,CAR0C,GAQtC,CARsC;;AAAA;AAAA,kBAQnCA,CAAC,GAAGyC,eAAe,CAACtF,MARe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAS5BsF,eAAe,CAACzC,CAAD,CAAf,CAAmBkB,WAAnB,EAT4B;;AAAA;AAS7C/G,YAAAA,QAT6C;AAAA;AAAA,mBAUpBsI,eAAe,CAACzC,CAAD,CAAf,CAAmBzD,mBAAnB,EAVoB;;AAAA;AAU7ClC,YAAAA,gBAV6C;AAY7Cc,YAAAA,MAZ6C,GAYpC;AACXgB,cAAAA,QAAQ,EAAEsG,eAAe,CAACzC,CAAD,CAAf,CAAmB9E,EADlB;AAEXE,cAAAA,aAAa,EAAEqH,eAAe,CAACzC,CAAD,CAAf,CAAmB5E,aAFvB;AAGXK,cAAAA,cAAc,EAAEgH,eAAe,CAACzC,CAAD,CAAf,CAAmBvE,cAHxB;AAIX+B,cAAAA,UAAU,EAAEiF,eAAe,CAACzC,CAAD,CAAf,CAAmBxC,UAJpB;AAKXrD,cAAAA,QAAQ,EAAEA,QAAQ,CAAC2I,QALR;AAMXzI,cAAAA,gBAAgB,EAAEA,gBAAgB,CAACS;AANxB,aAZoC;AAoBjD8H,YAAAA,YAAY,CAAC5C,CAAD,CAAZ,GAAkB7E,MAAlB;;AApBiD;AAQP6E,YAAAA,CAAC,EARM;AAAA;AAAA;;AAAA;AAuB1CA,YAAAA,EAvB0C,GAuBtC,CAvBsC;;AAAA;AAAA,kBAuBnCA,EAAC,GAAG2C,eAAe,CAACxF,MAvBe;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAwB5BwF,eAAe,CAAC3C,EAAD,CAAf,CAAmBiB,WAAnB,EAxB4B;;AAAA;AAwB7C/G,YAAAA,QAxB6C;AAAA;AAAA,mBAyBpByI,eAAe,CAAC3C,EAAD,CAAf,CAAmBiB,WAAnB,EAzBoB;;AAAA;AAyB7C7G,YAAAA,gBAzB6C;AA0B7Ce,YAAAA,OA1B6C,GA0BpC;AACXgB,cAAAA,QAAQ,EAAEwG,eAAe,CAAC3C,EAAD,CAAf,CAAmB9E,EADlB;AAEXE,cAAAA,aAAa,EAAEuH,eAAe,CAAC3C,EAAD,CAAf,CAAmB5E,aAFvB;AAGXoC,cAAAA,UAAU,EAAEmF,eAAe,CAAC3C,EAAD,CAAf,CAAmBxC,UAHpB;AAIXrD,cAAAA,QAAQ,EAAED,QAAQ,CAAC4I,QAJR;AAKXzI,cAAAA,gBAAgB,EAAED,gBAAgB,CAACU;AALxB,aA1BoC;AAiCjD+H,YAAAA,YAAY,CAAC7C,EAAD,CAAZ,GAAkB7E,OAAlB;;AAjCiD;AAuBP6E,YAAAA,EAAC,EAvBM;AAAA;AAAA;;AAAA;AAAA,8CAmC5C;AACL9F,cAAAA,QAAQ,EAAE0I,YADL;AAELzI,cAAAA,QAAQ,EAAE0I;AAFL,aAnC4C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA5CP,4CAA4C;AAAA;AAAA;AAAA,GAAlD;;AAyCA,IAAMS,eAAe;AAAA,6FAAG,mBAAOC,kBAAP,EAA2BC,kBAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACHvH,6BAAiBwH,0CAAjB,CACfF,kBADe,EACKC,kBADL,CADG;;AAAA;AAClB9H,YAAAA,MADkB;;AAAA,iBAMlBA,MANkB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOLA,MAAM,CAACoG,kBAAP,EAPK;;AAAA;AAOpBC,YAAAA,MAPoB;;AAAA,iBAQhBA,MARgB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASMA,MAAM,CAACG,qBAAP,EATN;;AAAA;AASlBwB,YAAAA,eATkB;AAAA;AAAA,mBAUG3B,MAAM,CAACC,kBAAP,EAVH;;AAAA;AAUlB2B,YAAAA,YAVkB;AAAA,+CAWX;AACLC,cAAAA,UAAU,EAAElI,MAAM,CAACyB,SADd;AAEL4E,cAAAA,MAAM,EAAE8B,YAAY,CAAC9B,MAAD,EAAS2B,eAAT,EAA0BC,YAA1B;AAFf,aAXW;;AAAA;AAAA,+CAiBf,IAjBe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfL,eAAe;AAAA;AAAA;AAAA,GAArB;;AAoBA,IAAMQ,QAAQ;AAAA,6FAAG,mBAAOrI,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACFQ,6BAAiB6H,QAAjB,CAA0BrI,EAA1B,CADE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARqI,QAAQ;AAAA;AAAA;AAAA,GAAd;;AAIA,IAAMC,iBAAiB;AAAA,6FAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACX9H,6BAAiB8H,iBAAjB,EADW;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBA,iBAAiB;AAAA;AAAA;AAAA,GAAvB;;AAIA,IAAMC,eAAe;AAAA,6FAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACT/H,6BAAiB+H,eAAjB,EADS;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfA,eAAe;AAAA;AAAA;AAAA,GAArB,C,CAIA;;;AAEA,IAAMpB,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAClH,MAAD,EAASf,gBAAT,EAA2BF,QAA3B,EAC3BkH,kBAD2B,EACPsC,kBADO,EACalC,MADb,EACwB;AACrD,SAAO;AACLrF,IAAAA,QAAQ,EAAEhB,MAAM,CAACD,EADZ;AAELkB,IAAAA,cAAc,EAAEjB,MAAM,CAACC,aAFlB;AAGLqC,IAAAA,MAAM,EAAEtC,MAAM,CAACsC,MAAP,KAAkB,KAAlB,GAA0B,MAA1B,GAAmC,KAHtC;AAILvD,IAAAA,QAAQ,EAAE;AACRA,MAAAA,QAAQ,EAAEA,QAAQ,CAAC4I,QADX;AAER1I,MAAAA,gBAAgB,EAAEA,gBAAgB,CAACU,IAF3B;AAGR6I,MAAAA,UAAU,EAAEvC;AAHJ,KAJL;AASLjH,IAAAA,QAAQ,EAAE;AACRyJ,MAAAA,eAAe,EAAE;AACfpF,QAAAA,IAAI,EAAErD,MAAM,CAACyE,UADE;AAEfnB,QAAAA,IAAI,EAAEtD,MAAM,CAAC0E;AAFE,OADT;AAKR8D,MAAAA,UAAU,EAAED,kBALJ;AAMRG,MAAAA,SAAS,EAAErC,MAAM,KAAK,IAAX,GAAkB,MAAlB,GAA2B;AAN9B;AATL,GAAP;AAkBD,CApBD;;AAsBA,IAAMW,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAChH,MAAD,EAASd,gBAAT,EAA2BF,QAA3B,EAC3BsC,cAD2B,EACX2E,kBADW,EACSsC,kBADT,EAC6BlC,MAD7B,EAE3BI,cAF2B,EAEXF,YAFW,EAEM;AAEnC,MAAIoC,sBAAsB,GAAG;AAC3B3H,IAAAA,QAAQ,EAAEhB,MAAM,CAACD,EADU;AAE3BkB,IAAAA,cAAc,EAAEjB,MAAM,CAACC,aAFI;AAG3BqC,IAAAA,MAAM,EAAEtC,MAAM,CAACsC,MAHY;AAI3BvD,IAAAA,QAAQ,EAAE;AACR0J,MAAAA,eAAe,EAAE;AACfpF,QAAAA,IAAI,EAAErD,MAAM,CAACyE,UADE;AAEfnB,QAAAA,IAAI,EAAEtD,MAAM,CAAC0E;AAFE,OADT;AAKR8D,MAAAA,UAAU,EAAEvC;AALJ,KAJiB;AAW3BjH,IAAAA,QAAQ,EAAE;AACRwJ,MAAAA,UAAU,EAAED;AADJ;AAXiB,GAA7B;AAgBA,MAAIK,mBAAJ;;AACA,MAAIvC,MAAM,KAAK,IAAf,EAAqB;AACnBuC,IAAAA,mBAAmB,GAAG;AACpB5H,MAAAA,QAAQ,EAAEhB,MAAM,CAACD,EADG;AAEpBkB,MAAAA,cAAc,EAAEjB,MAAM,CAACC,aAFH;AAGpBqC,MAAAA,MAAM,EAAEtC,MAAM,CAACsC,MAHK;AAIpBvD,MAAAA,QAAQ,EAAE;AACR0J,QAAAA,eAAe,EAAE;AACfpF,UAAAA,IAAI,EAAErD,MAAM,CAACyE,UADE;AAEfnB,UAAAA,IAAI,EAAEtD,MAAM,CAAC0E;AAFE,SADT;AAKR8D,QAAAA,UAAU,EAAEvC;AALJ,OAJU;AAWpBjH,MAAAA,QAAQ,EAAE;AACRA,QAAAA,QAAQ,EAAEA,QAAQ,CAAC2I,QADX;AAERzI,QAAAA,gBAAgB,EAAEA,gBAAgB,CAACS,IAF3B;AAGR6I,QAAAA,UAAU,EAAED;AAHJ,OAXU;AAgBpBlC,MAAAA,MAAM,EAAE8B,YAAY,CAAC9B,MAAD,EAASI,cAAT,EAAyBF,YAAzB;AAhBA,KAAtB;AAkBD;;AACD,SAAOF,MAAM,KAAK,IAAX,GAAkBsC,sBAAlB,GAA2CC,mBAAlD;AACD,CA1CD;;AA4CA,IAAMT,YAAY,GAAG,SAAfA,YAAe,CAAC9B,MAAD,EAAS2B,eAAT,EAA0BC,YAA1B,EAA2C;AAC9D,SAAO;AACLY,IAAAA,QAAQ,EAAExC,MAAM,CAACtG,EADZ;AAELmC,IAAAA,WAAW,EAAEmE,MAAM,CAACnE,WAFf;AAGLiB,IAAAA,gBAAgB,EAAEkD,MAAM,CAAClD,gBAHpB;AAILC,IAAAA,iBAAiB,EAAEiD,MAAM,CAACjD,iBAJrB;AAKLC,IAAAA,IAAI,EAAEgD,MAAM,CAAChD,IALR;AAMLC,IAAAA,IAAI,EAAE+C,MAAM,CAAC/C,IANR;AAOLC,IAAAA,OAAO,EAAE8C,MAAM,CAAC9C,OAPX;AAQLpE,IAAAA,MAAM,EAAE2J,0BAA0B,CAACb,YAAD,CAR7B;AASLzF,IAAAA,SAAS,EAAEsG,0BAA0B,CAACd,eAAD;AAThC,GAAP;AAWD,CAZD;;AAcA,IAAMc,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACzC,MAAD,EAAY;AAC7C,MAAI0C,eAAe,GAAG,EAAtB;;AACA,OAAK,IAAIlE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,MAAM,CAACrE,MAA3B,EAAmC6C,CAAC,EAApC,EAAwC;AACtC,QAAImE,KAAK,GAAG;AACVlE,MAAAA,IAAI,EAAEuB,MAAM,CAACxB,CAAD,CAAN,CAAUC,IADN;AAEVK,MAAAA,KAAK,EAAEkB,MAAM,CAACxB,CAAD,CAAN,CAAUM;AAFP,KAAZ;AAIA4D,IAAAA,eAAe,CAAClE,CAAD,CAAf,GAAqBmE,KAArB;AACD;;AACD,SAAOD,eAAP;AACD,CAVD;;AAYA,IAAMpC,YAAY,GAAG,SAAfA,YAAe,CAACxH,MAAD,EAAY;AAC/B,MAAI8J,UAAU,GAAG,EAAjB;;AACA,OAAK,IAAIpE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1F,MAAM,CAAC6C,MAA3B,EAAmC6C,CAAC,EAApC,EAAwC;AACtC,QAAIqE,QAAQ,GAAG;AACbpE,MAAAA,IAAI,EAAE3F,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IADH;AAEbE,MAAAA,QAAQ,EAAE7F,MAAM,CAAC0F,CAAD,CAAN,CAAUG;AAFP,KAAf;AAIAiE,IAAAA,UAAU,CAACpE,CAAD,CAAV,GAAgBqE,QAAhB;AACD;;AACD,SAAOD,UAAP;AACD,CAVD;;AAYA,IAAMhC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACjH,MAAD,EAASf,gBAAT,EAA2BC,gBAA3B,EAC3BF,QAD2B,EACjBD,QADiB,EACPuC,cADO,EACS6H,IADT,EACkB;AAE/C,SAAOA,IAAI,KAAK,UAAT,GAAsB;AAC3BnI,IAAAA,QAAQ,EAAEhB,MAAM,CAACD,EADU;AAE3BkB,IAAAA,cAAc,EAAEjB,MAAM,CAACC,aAFI;AAG3BK,IAAAA,cAAc,EAAEN,MAAM,CAACM,cAHI;AAI3B8I,IAAAA,aAAa,EAAElK,gBAAgB,CAACS,IAJL;AAK3B0J,IAAAA,WAAW,EAAErK,QAAQ,CAAC2I,QALK;AAM3BxI,IAAAA,MAAM,EAAEmC;AANmB,GAAtB,GAOH;AACFN,IAAAA,QAAQ,EAAEhB,MAAM,CAACD,EADf;AAEFkB,IAAAA,cAAc,EAAEjB,MAAM,CAACC,aAFrB;AAGFlB,IAAAA,QAAQ,EAAEA,QAAQ,CAAC4I,QAHjB;AAIF1I,IAAAA,gBAAgB,EAAEA,gBAAgB,CAACU;AAJjC,GAPJ;AAaD,CAhBD;;AAkBA,IAAM+D,8BAA8B;AAAA,6FAAG,mBAAOlB,SAAP,EAAkBgB,eAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5BqB,YAAAA,CAD4B,GACxB,CADwB;;AAAA;AAAA,kBACrBA,CAAC,GAAGrC,SAAS,CAACR,MADO;AAAA;AAAA;AAAA;;AAE/BsH,YAAAA,iBAF+B,GAEX;AACtBxE,cAAAA,IAAI,EAAEtC,SAAS,CAACqC,CAAD,CAAT,CAAaC,IADG;AAEtBK,cAAAA,KAAK,EAAE3C,SAAS,CAACqC,CAAD,CAAT,CAAaM;AAFE,aAFW;AAAA;AAAA,mBAMToE,yCAA6B/I,MAA7B,CACtB8I,iBADsB,CANS;;AAAA;AAM/BE,YAAAA,aAN+B;AAQnCA,YAAAA,aAAa,CAACC,qBAAd,CAAoCjG,eAApC;;AARmC;AACCqB,YAAAA,CAAC,EADF;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA9BnB,8BAA8B;AAAA;AAAA;AAAA,GAApC;;AAYA,IAAMD,0BAA0B;AAAA,6FAAG,mBAAOjC,eAAP,EAC/BgC,eAD+B;AAAA;AAAA;AAAA;AAAA;AAAA;AAExBqB,YAAAA,CAFwB,GAEpB,CAFoB;;AAAA;AAAA,kBAEjBA,CAAC,GAAGrD,eAAe,CAACQ,MAFH;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGTR,eAAe,CAACqD,CAAD,CAAf,CAAmB6E,YAAnB,EAHS;;AAAA;AAG3BC,YAAAA,SAH2B;AAI3BC,YAAAA,cAJ2B,GAIV;AACnB9E,cAAAA,IAAI,EAAEtD,eAAe,CAACqD,CAAD,CAAf,CAAmBC,IADN;AAEnBK,cAAAA,KAAK,EAAEwE,SAAS,CAACE;AAFE,aAJU;AAAA;AAAA,mBAQRC,sCAA0BtJ,MAA1B,CAAiCoJ,cAAjC,CARQ;;AAAA;AAQ3BG,YAAAA,UAR2B;AAS/BA,YAAAA,UAAU,CAACC,kBAAX,CAA8BxG,eAA9B;;AAT+B;AAEWqB,YAAAA,CAAC,EAFZ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA1BpB,0BAA0B;AAAA;AAAA;AAAA,GAAhC;;AAaA,IAAM/B,+BAA+B;AAAA,6FAAG,mBAAOxC,gBAAP,EACpCsC,eADoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEhBtC,gBAAgB,CAAC+K,YAAjB,EAFgB;;AAAA;AAElCzH,YAAAA,SAFkC;AAGlCa,YAAAA,IAHkC,GAG3BnE,gBAAgB,CAACmE,IAHU;AAIlCC,YAAAA,IAJkC,GAI3BpE,gBAAgB,CAACoE,IAJU;AAKlCpB,YAAAA,WALkC,GAKpBV,eAAe,CAAC0I,GAAhB,CAAoB,UAAAlB,KAAK;AAAA,qBAAIA,KAAK,CAAChE,QAAV;AAAA,aAAzB,EAA6CmF,MAA7C,CACd,UAACC,UAAD,EAAaC,CAAb;AAAA,qBAAmBD,UAAU,GAAGC,CAAhC;AAAA,aADc,EACqB,CADrB,CALoB;AAAA,4BAOTjL,kBAPS;AAAA,4BAOUF,gBAPV;AAAA;AAAA,mBAQ5BA,gBAAgB,CAACqC,SAAjB,EAR4B;;AAAA;AAAA;AAAA;AAAA,oEAQE,QARF;;AAAA;AAOlC4B,YAAAA,gBAPkC;AAAA,4BASR/D,kBATQ;AAAA,4BASWF,gBATX;AAAA;AAAA,mBAUxBA,gBAAgB,CAACqC,SAAjB,EAVwB;;AAAA;AAAA;AAAA;AAAA,oEAUM,SAVN;;AAAA;AAAA;AAAA;AAAA,mBAW1B+I,uBAAuB,CAC3BpL,gBAD2B,CAXG;;AAAA;AAAA;AASlCkE,YAAAA,iBATkC;AAalCG,YAAAA,OAbkC,GAaxBrE,gBAAgB,CAACqE,OAbO;AAAA,+CAe/B;AACLf,cAAAA,SAAS,EAATA,SADK;AAELa,cAAAA,IAAI,EAAJA,IAFK;AAGLC,cAAAA,IAAI,EAAJA,IAHK;AAILpB,cAAAA,WAAW,EAAXA,WAJK;AAKLiB,cAAAA,gBAAgB,EAAhBA,gBALK;AAMLC,cAAAA,iBAAiB,EAAjBA,iBANK;AAOLG,cAAAA,OAAO,EAAPA;AAPK,aAf+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA/B7B,+BAA+B;AAAA;AAAA;AAAA,GAArC;;AA0BA,IAAMsB,sBAAsB;AAAA,6FAAG,mBAAOuH,WAAP,EAAoBC,YAApB,EAC3BrL,MAD2B,EACnBa,MADmB,EACXyK,OADW,EACFtB,IADE;AAAA;AAAA;AAAA;AAAA;AAAA;AAGzBuB,YAAAA,sBAHyB,GAGAF,YAAY,GAAGD,WAHf;;AAAA,kBAIzBG,sBAAsB,GAAG,GAJA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKrBC,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CALW;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAOlBuB,sBAAsB,GAAG,GAPP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQrBC,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CARW;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAUlBuB,sBAAsB,GAAG,IAVP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWrBC,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CAXW;;AAAA;AAAA;AAAA;;AAAA;AAAA,kBAalBuB,sBAAsB,GAAG,GAbP;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAcrBC,UAAU,CAAC,GAAD,EAAMxL,MAAN,EAAcsL,OAAd,EAAuBzK,MAAvB,EAA+BmJ,IAA/B,CAdW;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAiBrBwB,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CAjBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBnG,sBAAsB;AAAA;AAAA;AAAA,GAA5B;;AAqBA,IAAM2H,UAAU;AAAA,6FAAG,mBAAOC,gBAAP,EAAyBzL,MAAzB,EAAiCsL,OAAjC,EAA0CzK,MAA1C,EAAkDmJ,IAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AACRtE,YAAAA,CADQ,GACJ,CADI;;AAAA;AAAA,kBACDA,CAAC,GAAG1F,MAAM,CAAC6C,MADV;AAAA;AAAA;AAAA;;AAEX6I,YAAAA,SAFW,GAEC;AACd/F,cAAAA,IAAI,EAAE3F,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IADF;AAEdE,cAAAA,QAAQ,EAAE9E,IAAI,CAAC0E,KAAL,CAAWzF,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB4F,gBAAhC,CAFI;AAGd5J,cAAAA,QAAQ,EAAEhB,MAAM,CAACD;AAHH,aAFD;;AAAA,kBAOX8K,SAAS,CAAC7F,QAAV,GAAqB,CAPV;AAAA;AAAA;AAAA;;AAAA,kBASTmE,IAAI,KAAK,UATA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAUL2B,gCAAgC,CAACL,OAAD,EAAUI,SAAV,CAV3B;;AAAA;AAAA;AAAA,mBAWLE,yCAA6BvK,MAA7B,CAAoCqK,SAApC,CAXK;;AAAA;AAYX1L,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB7F,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GACf6F,SAAS,CAAC7F,QADhB;;AAZW;AAAA,kBAgBTmE,IAAI,KAAK,UAhBA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiBL9D,yCAA6B7E,MAA7B,CAAoCqK,SAApC,CAjBK;;AAAA;AAkBX1L,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB7F,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GACf6F,SAAS,CAAC7F,QADhB;;AAlBW;AAsBb,gBAAI7F,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,KAAuB,CAA3B,EAA8B;AAC5B7F,cAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUS,OAAV;AACD;;AAxBY;AAAA,mBAyBPnG,MAAM,CAAC0F,CAAD,CAAN,CAAUtC,IAAV,EAzBO;;AAAA;AACkBsC,YAAAA,CAAC,EADnB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAV8F,UAAU;AAAA;AAAA;AAAA,GAAhB;;AA8BA,IAAMhH,eAAe;AAAA,6FAAG,mBAAOxE,MAAP,EAAea,MAAf,EAAuBmJ,IAAvB,EAA6BsB,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBO,YAAAA,kBADkB,GACG9K,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACgF,MAAL,KAAgB,EAA3B,CADH;AAAA,4BAGd8F,kBAHc;AAAA,gDAIf,CAJe,yBAOf,CAPe,yBAUf,CAVe;AAAA;;AAAA;AAAA;AAAA,mBAKZL,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CALE;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQZwB,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CARE;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAWZwB,UAAU,CAAC,IAAD,EAAOxL,MAAP,EAAesL,OAAf,EAAwBzK,MAAxB,EAAgCmJ,IAAhC,CAXE;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfxF,eAAe;AAAA;AAAA;AAAA,GAArB;;AAgBA,IAAMvB,cAAc;AAAA,6FAAG,mBAAOO,cAAP,EAAuB1D,gBAAvB,EACnBe,MADmB,EACX8E,IADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZD,YAAAA,CAFY,GAER,CAFQ;;AAAA;AAAA,kBAELA,CAAC,GAAGlC,cAAc,CAACX,MAFd;AAAA;AAAA;AAAA;;AAAA,kBAGfW,cAAc,CAACkC,CAAD,CAAd,CAAkBC,IAAlB,KAA2BA,IAHZ;AAAA;AAAA;AAAA;;AAIbmG,YAAAA,eAJa,GAIK,EAJL;AAKjBA,YAAAA,eAAe,CAAC,CAAD,CAAf,GAAqBtI,cAAc,CAACkC,CAAD,CAAnC,CALiB,CAKuB;;AALvB;AAAA,mBAMX8F,UAAU,CAAC,CAAD,EAAIM,eAAJ,EAAqBhM,gBAArB,EACZe,MADY,EACJ,UADI,CANC;;AAAA;AAEsB6E,YAAAA,CAAC,EAFvB;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdzC,cAAc;AAAA;AAAA;AAAA,GAApB;;AAYA,IAAMhD,kBAAkB;AAAA,6FAAG,mBAAOqL,OAAP,EAAgBtL,MAAhB,EAAwB+L,WAAxB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACrBC,YAAAA,oBADqB,GACE,EADF;AAErBC,YAAAA,KAFqB,GAEb,CAFa;AAAA;AAAA,mBAGHX,OAAO,CAAClJ,SAAR,EAHG;;AAAA;AAGrB8J,YAAAA,SAHqB;AAIhBxG,YAAAA,CAJgB,GAIZ,CAJY;;AAAA;AAAA,kBAITA,CAAC,GAAG1F,MAAM,CAAC6C,MAJF;AAAA;AAAA;AAAA;;AAKd+C,YAAAA,CALc,GAKV,CALU;;AAAA;AAAA,kBAKPA,CAAC,GAAGsG,SAAS,CAACrJ,MALP;AAAA;AAAA;AAAA;;AAAA,kBAMjB7C,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IAAV,KAAmBuG,SAAS,CAACtG,CAAD,CAAT,CAAaD,IANf;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOGuG,SAAS,CAACtG,CAAD,CAAT,CAAa2E,YAAb,EAPH;;AAAA;AAOfC,YAAAA,SAPe;;AASnB,4CACI2B,MAAM,CAACC,OAAP,CAAe,6BAAW5B,SAAS,CAACE,YAArB,CAAf,CADJ,uCACwD;AAAA,6FAD5C2B,GAC4C,0BADvCC,KACuC;;AACtD,kBAAItM,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IAAV,KAAmB2G,KAAK,CAAC9L,IAA7B,EAAmC;AACjCwL,gBAAAA,oBAAoB,CAACC,KAAK,EAAN,CAApB,GAAgCF,WAAW,KAAK,OAAhB,GAA0BO,KAAK,CAACP,WAAD,CAA/B,GAA+CO,KAAK,CAACP,WAAD,CAAL,GAAqB/L,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAA9G;AACD;AACF;;AAdkB;AAKeD,YAAAA,CAAC,EALhB;AAAA;AAAA;;AAAA;AAIUF,YAAAA,CAAC,EAJX;AAAA;AAAA;;AAAA;AAkBrB6G,YAAAA,cAlBqB,GAkBJP,oBAAoB,CAACQ,MAArB,CAA4B,UAAAC,CAAC;AAAA,qBAAIA,CAAC,KAAKC,SAAV;AAAA,aAA7B,CAlBI;AAmBrBC,YAAAA,KAnBqB,GAmBb3M,MAAM,CAAC6C,MAAP,KAAkB,CAAlB,GAAsB,CAAtB,GAA0B0J,cAAc,CAACK,IAAf,GAAsB,CAAtB,CAnBb;AAoBrBC,YAAAA,oBApBqB,GAoBE7M,MAAM,CAAC6C,MAAP,KAAkB,CAAlB,GAAsB,CAAtB,GACrB0J,cAAc,CAACvB,MAAf,CAAsB,UAACC,UAAD,EAAaC,CAAb;AAAA,qBAAmBD,UAAU,GAAGC,CAAhC;AAAA,aAAtB,EAAyD,CAAzD,CArBmB;AAAA,+CAsBlBa,WAAW,KAAK,OAAhB,GAA0BY,KAA1B,GAAkCE,oBAtBhB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlB5M,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;AAyBA,IAAMyC,sBAAsB,GAAG,gCAACP,cAAD,EAAoB;AACjD,MAAIO,sBAAsB,GAAG,KAA7B;;AACA,MAAIE,oBAAoB,CAACT,cAAD,EAAiB,SAAjB,CAApB,IACAS,oBAAoB,CAACT,cAAD,EAAiB,SAAjB,CADpB,IAEAS,oBAAoB,CAACT,cAAD,EAAiB,WAAjB,CAFxB,EAEuD;AACrDO,IAAAA,sBAAsB,GAAG,IAAzB;AACD;;AACD,SAAOA,sBAAP;AACD,CARD;;AAUA,IAAME,oBAAoB,GAAG,8BAACT,cAAD,EAAiBwD,IAAjB,EAA0B;AACrD,MAAI/C,oBAAoB,GAAG,KAA3B;;AACA,OAAK,IAAI8C,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvD,cAAc,CAACU,MAAnC,EAA2C6C,CAAC,EAA5C,EAAgD;AAC9C,QAAIvD,cAAc,CAACuD,CAAD,CAAd,CAAkBC,IAAlB,KAA2BA,IAA/B,EAAqC;AACnC/C,MAAAA,oBAAoB,GAAG,IAAvB;AACA,aAAOA,oBAAP;AACD;AACF;;AACD,SAAOA,oBAAP;AACD,CATD;;AAWA,IAAMuI,uBAAuB;AAAA,6FAAG,mBAAOG,OAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAC1BwB,YAAAA,oBAD0B,GACH,EADG;AAE1Bb,YAAAA,KAF0B,GAElB,CAFkB;AAAA;AAAA,mBAGRX,OAAO,CAACR,YAAR,EAHQ;;AAAA;AAG1BzH,YAAAA,SAH0B;;AAK9B,iBAASqC,CAAT,GAAa,CAAb,EAAgBA,CAAC,GAAGrC,SAAS,CAACR,MAA9B,EAAsC6C,CAAC,EAAvC,EAA2C;AACrCqH,cAAAA,aADqC,GACrB1J,SAAS,CAACqC,CAAD,CAAT,CAAaM,KADQ;;AAEzC,+CACImG,MAAM,CAACC,OAAP,CAAe,kCAAcW,aAAd,CAAf,CADJ,wCACkD;AAAA,iGADtCV,GACsC,2BADjCC,KACiC;;AAChD,oBAAIjJ,SAAS,CAACqC,CAAD,CAAT,CAAaC,IAAb,KAAsB2G,KAAK,CAAC9L,IAAhC,EAAsC;AACpCsM,kBAAAA,oBAAoB,CAACb,KAAK,EAAN,CAApB,GAAgCK,KAAK,CAACU,OAAtC;AACD;AACF;AACF;;AACGC,YAAAA,QAd0B,GAcfH,oBAAoB,CAACN,MAArB,CAA4B,UAAAC,CAAC;AAAA,qBAAIA,CAAC,KAAKC,SAAV;AAAA,aAA7B,CAde;AAAA,+CAevBrJ,SAAS,CAACR,MAAV,KAAqB,CAArB,GAAyB,CAAzB,GAA6BoK,QAAQ,CAACjC,MAAT,CAChC,UAACC,UAAD,EAAaC,CAAb;AAAA,qBAAmBD,UAAU,GAAGC,CAAhC;AAAA,aADgC,EACG,CADH,IACQ,CAhBd;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBC,uBAAuB;AAAA;AAAA;AAAA,GAA7B;;AAmBA,IAAM1H,wBAAwB;AAAA,6FAAG,mBAAO6H,OAAP,EAAgBtL,MAAhB,EAAwBK,YAAxB,EAC7B6M,SAD6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAG3BtI,YAAAA,WAH2B,GAGbC,sBAAsB,CAACxE,YAAD,CAHT;AAAA;AAAA,mBAITiL,OAAO,CAAClJ,SAAR,EAJS;;AAAA;AAI3B8J,YAAAA,SAJ2B;AAMtBxG,YAAAA,CANsB,GAMlB,CANkB;;AAAA;AAAA,kBAMfA,CAAC,GAAG1F,MAAM,CAAC6C,MANI;AAAA;AAAA;AAAA;;AAOpB+C,YAAAA,CAPoB,GAOhB,CAPgB;;AAAA;AAAA,kBAObA,CAAC,GAAGsG,SAAS,CAACrJ,MAPD;AAAA;AAAA;AAAA;;AAAA,kBAQvB7C,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IAAV,KAAmB,OAAnB,IAA8BuG,SAAS,CAACtG,CAAD,CAAT,CAAaD,IAAb,KAAsB,OAR7B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBASHuG,SAAS,CAACtG,CAAD,CAAT,CAAa2E,YAAb,EATG;;AAAA;AASrBC,YAAAA,SATqB;AAUzB2C,YAAAA,UAAU,GAAG,6BAAW3C,SAAS,CAACE,YAArB,EAAmC0C,KAAnC,CAAyCF,SAAzC,IACPlN,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QADhB;;AAVyB;AAOSD,YAAAA,CAAC,EAPV;AAAA;AAAA;;AAAA;AAMIF,YAAAA,CAAC,EANL;AAAA;AAAA;;AAAA;AAe3B2H,YAAAA,WAf2B,GAebrN,MAAM,CAAC6C,MAAP,KAAkB,CAAlB,GAAsB,CAAtB,GAA0BsK,UAAU,GAChDvI,WAAW,CAACI,qBAD0B,GAEtCJ,WAAW,CAACG,sBAF0B,GAGtCH,WAAW,CAACK,wBAlBa;AAoB3BqI,YAAAA,YApB2B,GAoBZtN,MAAM,CAAC6C,MAAP,KAAkB,CAAlB,GAAsB,CAAtB,GAA0BsK,UAAU,GACjDvI,WAAW,CAACO,wBAD2B,GAEvCP,WAAW,CAACQ,sBAtBa;AAAA,+CAwBxB8H,SAAS,KAAK,QAAd,GAAyBG,WAAzB,GAAuCC,YAxBf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAxB7J,wBAAwB;AAAA;AAAA;AAAA,GAA9B;;AA2BA,IAAM9B,kBAAkB;AAAA,6FAAG,mBAAO7B,gBAAP,EAAyBqC,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACNrC,gBAAgB,CAACsC,SAAjB,EADM;;AAAA;AACrBpC,YAAAA,MADqB;AAEhB0F,YAAAA,CAFgB,GAEZ,CAFY;;AAAA;AAAA,kBAETA,CAAC,GAAG1F,MAAM,CAAC6C,MAFF;AAAA;AAAA;AAAA;;AAGd+C,YAAAA,CAHc,GAGV,CAHU;;AAAA;AAAA,kBAGPA,CAAC,GAAGzD,cAAc,CAACU,MAHZ;AAAA;AAAA;AAAA;;AAAA,kBAIjB7C,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IAAV,KAAmBxD,cAAc,CAACyD,CAAD,CAAd,CAAkBD,IAJpB;AAAA;AAAA;AAAA;;AAKnB3F,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUc,gBAAV,GAA6BxG,MAAM,CAAC0F,CAAD,CAAN,CAAUc,gBAAV,GACvBrE,cAAc,CAACyD,CAAD,CAAd,CAAkBC,QADxB;AAEA7F,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB7F,MAAM,CAAC0F,CAAD,CAAN,CAAUG,QAAV,GAAqB1D,cAAc,CAACyD,CAAD,CAAd,CAAkBC,QAA5D;AAPmB;AAAA,mBAQb7F,MAAM,CAAC0F,CAAD,CAAN,CAAUtC,IAAV,EARa;;AAAA;AAGoBwC,YAAAA,CAAC,EAHrB;AAAA;AAAA;;AAAA;AAEUF,YAAAA,CAAC,EAFX;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlB/D,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;AAcA,IAAMgK,gCAAgC;AAAA,6FAAG,mBAAOL,OAAP,EAAgBI,SAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACpBJ,OAAO,CAAClJ,SAAR,EADoB;;AAAA;AACnCpC,YAAAA,MADmC;AAE9B0F,YAAAA,CAF8B,GAE1B,CAF0B;;AAAA;AAAA,kBAEvBA,CAAC,GAAG1F,MAAM,CAAC6C,MAFY;AAAA;AAAA;AAAA;;AAAA,kBAGjC7C,MAAM,CAAC0F,CAAD,CAAN,CAAUC,IAAV,KAAmB+F,SAAS,CAAC/F,IAHI;AAAA;AAAA;AAAA;;AAInC3F,YAAAA,MAAM,CAAC0F,CAAD,CAAN,CAAUc,gBAAV,GAA6BxG,MAAM,CAAC0F,CAAD,CAAN,CAAUc,gBAAV,GACvBkF,SAAS,CAAC7F,QADhB;AAJmC;AAAA,mBAM7B7F,MAAM,CAAC0F,CAAD,CAAN,CAAUtC,IAAV,EAN6B;;AAAA;AAEJsC,YAAAA,CAAC,EAFG;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAhCiG,gCAAgC;AAAA;AAAA;AAAA,GAAtC;;AAWA,IAAM4B,cAAc,GAAG,SAAjBA,cAAiB,CAAC5H,IAAD,EAAU;AAC/B,MAAII,MAAM,GAAGhF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACgF,MAAL,KAAgB,EAA3B,CAAb;AACA,MAAIyH,aAAa,GAAGzM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACgF,MAAL,KAAgB,EAA3B,CAApB;AACA,MAAI0H,cAAc,GAAG1H,MAAM,KAAK,CAAX,IAAgBA,MAAM,KAAK,CAA3B,GAA+B,IAAIyH,aAAa,GAAG,GAAnD,GACf,CADN;AAEA,MAAIE,gBAAgB,GAAG3H,MAAM,KAAK,CAAX,IAAgBA,MAAM,KAAK,CAA3B,GAA+B,IAAIyH,aAAa,GAAG,GAAnD,GACjB,CADN;AAEA,SAAO7H,IAAI,KAAK,WAAT,GAAuB8H,cAAvB,GAAwCC,gBAA/C;AACD,CARD;;AAUA,IAAM7I,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACxE,YAAD,EAAkB;AAC/C,MAAI2E,qBAAqB,GAAG3E,YAAY,GAAG,CAAf,IAAoB,CAApB,GAAwB,CAAxB,GAA4B,KAAKA,YAAY,GAAG,IACtE,IADkD,CAAxD,CAD+C,CAElC;;AACb,MAAI0E,sBAAsB,GAAGwI,cAAc,CAAC,WAAD,CAA3C;AACA,MAAInI,sBAAsB,GAAGmI,cAAc,CAAC,WAAD,CAA3C;AACA,MAAItI,wBAAwB,GAAGsI,cAAc,CAAC,aAAD,CAA7C;AACA,MAAIpI,wBAAwB,GAAGoI,cAAc,CAAC,aAAD,CAA7C;AAEA,SAAO;AACLvI,IAAAA,qBAAqB,EAArBA,qBADK;AAELI,IAAAA,sBAAsB,EAAtBA,sBAFK;AAGLL,IAAAA,sBAAsB,EAAtBA,sBAHK;AAILI,IAAAA,wBAAwB,EAAxBA,wBAJK;AAKLF,IAAAA,wBAAwB,EAAxBA;AALK,GAAP;AAOD,CAfD;;AAiBA,IAAM3E,iBAAiB,GAAG,SAApBA,iBAAoB,CAACR,gBAAD,EAAmBC,gBAAnB,EAAwC;AAChE,MAAI4N,EAAE,GAAG7N,gBAAgB,CAAC8N,WAA1B;AACA,MAAIC,EAAE,GAAG/N,gBAAgB,CAACgO,WAA1B;AACA,MAAIC,EAAE,GAAGhO,gBAAgB,CAAC6N,WAA1B;AACA,MAAII,EAAE,GAAGjO,gBAAgB,CAAC+N,WAA1B;AACA,SAAO/M,IAAI,CAAC0E,KAAL,CAAW1E,IAAI,CAACkN,IAAL,CAAUlN,IAAI,CAACmN,GAAL,CAASH,EAAE,GAAGJ,EAAd,EAAkB,CAAlB,IAAuB5M,IAAI,CAACmN,GAAL,CAASF,EAAE,GAAGH,EAAd,EAAkB,CAAlB,CAAjC,CAAX,CAAP;AACD,CAND;;eAQe;AACblO,EAAAA,cAAc,EAAdA,cADa;AAEbsJ,EAAAA,QAAQ,EAARA,QAFa;AAGb1C,EAAAA,qBAAqB,EAArBA,qBAHa;AAIbxE,EAAAA,WAAW,EAAXA,WAJa;AAKb0E,EAAAA,eAAe,EAAfA,eALa;AAMbyC,EAAAA,iBAAiB,EAAjBA,iBANa;AAObC,EAAAA,eAAe,EAAfA,eAPa;AAQbnB,EAAAA,4CAA4C,EAA5CA,4CARa;AASbS,EAAAA,eAAe,EAAfA;AATa,C","sourcesContent":["import AttackerTroopsRepository\n  from \"../repositories/battle-repositories/attacker-troops-to-battle-repository\";\nimport BattleRepository\n  from \"../repositories/battle-repositories/battle-repository\";\nimport AttackerLostTroopsRepository\n  from \"../repositories/battle-repositories/attacker-lost-troops-repository\";\nimport {troopRules} from \"../rules/troops-rules\";\nimport {buildingRules} from \"../rules/building-rules\";\nimport espionageReportRepository\n  from \"../repositories/battle-repositories/espionage-report-repository\";\nimport EspionageTroopsRepository\n  from \"../repositories/battle-repositories/espionage-troops-repository\";\nimport EspionageBuildingsRepository\n  from \"../repositories/battle-repositories/espionage-buildings-repository\";\nimport defenderLostTroopsRepository\n  from \"../repositories/battle-repositories/defender-lost-troops-repository\";\nimport bandits from \"../utilities/bandits\";\n\nconst initiateBattle = async (attacker, defender, attackingKingdom,\n    defendingKingdom, troops) => {\n\n  let slowestSpeed = await getValueFromTroops(attackingKingdom, troops,\n      'speed');\n  console.log(slowestSpeed);\n  let timeOfTravel = calculateDistance(attackingKingdom, defendingKingdom)\n      / slowestSpeed;\n  let possibleBanditsReward = null;\n  if (defendingKingdom.name.startsWith('Bandits')) {\n    possibleBanditsReward = await bandits.getBanditsReward(defendingKingdom.id);\n  }\n\n  let battle = {\n    timeOfArrival: Math.floor(Date.now() / 1000 + timeOfTravel * 60 * 60),\n    timeOfComeback: Math.floor(Date.now() / 1000 + 2 * (timeOfTravel * 60 * 60)),\n    possibleBanditsReward: possibleBanditsReward\n  };\n\n  let savedBattle = await BattleRepository.create(battle);\n  savedBattle.setAttacker(attacker);\n  savedBattle.setDefender(defender);\n  savedBattle.setDefendingKingdom(defendingKingdom);\n  savedBattle.setAttackingKingdom(attackingKingdom);\n  await sendTroopsToBattle(attackingKingdom, troops);\n  await AttackerTroopsRepository.create(troops, savedBattle);\n\n  return {\n    battleId: savedBattle.id,\n    resolutionTime: savedBattle.timeOfArrival\n  };\n};\n\nconst startBattle = async (battle) => {\n\n  let attackingKingdom = await battle.getAttackingKingdom();\n  let defendingKingdom = await battle.getDefendingKingdom();\n  let troopsToBattle = await battle.getAttackerTroopsToBattle();\n  let defendersTroops = await defendingKingdom.getTroops();\n  let timeOfTravel = (battle.timeOfArrival - battle.startedAt) / 60 / 60;\n  let defendingKingdomInfo = await getAttributesForEspionageReport(\n      defendingKingdom, defendersTroops);\n  let areThereWalkers = doesArmyIncludeWalkers(troopsToBattle);\n  let doesArmyIncludeCatapults = doesArmyIncludesType(troopsToBattle,\n      'catapult');\n\n  // --------------------- ONLY ESPIONAGE -------------------------------\n  if (troopsToBattle.length === 1 && doesArmyIncludesType(troopsToBattle,\n      'scout')) {\n    await espionageAttack(battle, attackingKingdom, defendingKingdom,\n        timeOfTravel, troopsToBattle, defendersTroops);\n\n    // ------------- NO FIGHTERS, NO CATAPULTS, ONLY DIPLOMAT ---------------\n  } else if (!areThereWalkers && doesArmyIncludesType(troopsToBattle,\n      'diplomat') && !doesArmyIncludeCatapults) {\n\n    if (defendingKingdomInfo.totalTroops === 0) {\n      await takeOverAttack(battle, attackingKingdom, defendingKingdom);\n\n      if (doesArmyIncludesType(troopsToBattle, 'scout')) {\n        await espionageAttack(battle, attackingKingdom, defendingKingdom,\n            timeOfTravel, troopsToBattle, defendersTroops);\n      }\n\n    } else {\n      await killTroopsType(troopsToBattle, attackingKingdom, battle,\n          'diplomat');\n      battle.isFinished = true;\n      battle.result = 'loss';\n      await battle.save();\n\n      if (doesArmyIncludesType(troopsToBattle, 'scout')) {\n        await espionageAttack(battle, attackingKingdom, defendingKingdom,\n            timeOfTravel, troopsToBattle, defendersTroops);\n      }\n    }\n    // ------------- NO FIGHTER, CATAPULTS INCLUDED -----------------------\n  } else if (!areThereWalkers &&\n      doesArmyIncludesType(troopsToBattle, 'catapult')) {\n\n    if (defendingKingdomInfo.totalTroops === 0) {\n      // ------------ RUN DESTROY ATTACK IF THERE'S BUILDINGS ---------\n      if (defendingKingdomInfo.buildings.length > 0) {\n        await demolitionAttack(battle, attackingKingdom,\n            defendingKingdomInfo.buildings, troopsToBattle);\n      }\n      // ------------ RUN DIPLOMATIC MISSION -----------------\n      if (doesArmyIncludesType(troopsToBattle, 'diplomat')) {\n        await takeOverAttack(battle, attackingKingdom, defendingKingdom);\n      }\n      // -------------- RUN ESPIONAGE ------------------------\n      if (doesArmyIncludesType(troopsToBattle, 'scout')) {\n        await espionageAttack(battle, attackingKingdom, defendingKingdom,\n            timeOfTravel, troopsToBattle, defendersTroops);\n      }\n\n    } else {\n      // ---------------- KILL CATAPULTS ----------------\n      await killTroopsType(troopsToBattle, attackingKingdom, battle,\n          'catapult');\n      battle.isFinished = true;\n      battle.result = 'loss';\n      await battle.save();\n      // ------------------ KILL DIPLOMAT --------------------\n      if (doesArmyIncludesType(troopsToBattle, 'diplomat')) {\n        await killTroopsType(troopsToBattle, attackingKingdom, battle,\n            'diplomat');\n      }\n      // ----------------- RUN ESPIONAGE ------------------\n      if (doesArmyIncludesType(troopsToBattle, 'scout')) {\n        await espionageAttack(battle, attackingKingdom, defendingKingdom,\n            timeOfTravel, troopsToBattle, defendersTroops);\n      }\n    }\n    // ---------------- TOTAL BATTLE ----------------\n  } else {\n\n    // ------------------ PLUNDER -----------------\n    await plunderAttack(battle, attackingKingdom, defendingKingdom,\n        troopsToBattle, timeOfTravel, defendersTroops);\n\n    if (battle.result === 'win') {\n      // ------------------- RUN DESTROY ATTACK -------------\n      if (doesArmyIncludeCatapults && defendingKingdomInfo.buildings.length\n          > 0) {\n        await demolitionAttack(battle, attackingKingdom,\n            defendingKingdomInfo.buildings, troopsToBattle);\n      }\n      // ----------------- RUN DIPLOMATIC MISSION ----------\n      if (doesArmyIncludesType(troopsToBattle, 'diplomat')) {\n        await takeOverAttack(battle, attackingKingdom, defendingKingdom);\n      }\n      // ----------------- RUN SPIES -----------------------\n      if (doesArmyIncludesType(troopsToBattle, 'scout')) {\n        await espionageAttack(battle, attackingKingdom, defendingKingdom,\n            timeOfTravel, troopsToBattle, defendersTroops);\n      }\n    }\n  }\n  return battle;\n};\n\nconst espionageAttack = async (battle, attackingKingdom, defendingKingdom,\n    timeOfTravel, troopsInBattle, defendersTroops) => {\n\n  let attackerSpiesPower = await getSpiesPowerByPowerType(attackingKingdom, // get attacker power of only spies and count in the weakening\n      troopsInBattle, timeOfTravel, 'attack');\n  let defenderSpiesPower = await getSpiesPowerByPowerType(defendingKingdom, // get defender power of only spies\n      defendersTroops, timeOfTravel, 'defence');\n\n  let comparePowers = battle.result === 'win' ? 1 : attackerSpiesPower\n      - defenderSpiesPower;\n\n  if (comparePowers < 0) { // attacker lost; the losses of spies will be counted in comparison to percentage difference between the powers\n    await killPercentageOfTroops(attackerSpiesPower, defenderSpiesPower,\n        troopsInBattle, battle, attackingKingdom, 'attacker');\n\n    battle.isFinished = true;\n    battle.result = 'loss';\n    await battle.save();\n\n  } else if (comparePowers === 0) { // when draw no one dies, no intel, nothing really happens\n\n    battle.isFinished = true;\n    battle.result = 'draw';\n    await battle.save();\n\n  } else if (comparePowers > 0) {\n\n    let espionageAttributes = await getAttributesForEspionageReport(\n        defendingKingdom, defendersTroops);\n\n    let espionageReport = await espionageReportRepository.create(\n        espionageAttributes.totalTroops,\n        espionageAttributes.totalAttackPower,\n        espionageAttributes.totalDefensePower,\n        espionageAttributes.gold,\n        espionageAttributes.food,\n        espionageAttributes.loyalty,\n        battle);\n\n    await createTroopEspionageReport(defendersTroops, espionageReport);\n\n    await createBuildingsEspionageReport(espionageAttributes.buildings,\n        espionageReport);\n\n    if (battle.result !== 'win') {\n      await randomizeDeaths(troopsInBattle, battle, 'attacker',\n          attackingKingdom);\n    }\n\n    battle.isFinished = true;\n    battle.result = 'win';\n    await battle.save();\n  }\n};\n\nconst plunderAttack = async (battle, attackingKingdom,\n    defendingKingdom, troopsInBattle, timeOfTravel, defenderTroops) => {\n\n  let originalAttackPower = await getValueFromTroops(attackingKingdom,\n      troopsInBattle, 'attack');\n  let originalDefensePower = await getValueFromTroops(defendingKingdom,\n      defenderTroops, 'defence');\n  let randomizers = getRandomizersOfBattle(timeOfTravel)\n\n  let randomizedAttack = originalAttackPower\n      * randomizers.fortunateEventAttacker\n      * randomizers.weakeningAttackerArmy\n      * randomizers.unfortunateEventAttacker;\n\n  let randomizedDefense = originalDefensePower\n      * randomizers.unfortunateEventDefender\n      * randomizers.fortunateEventDefender;\n\n  let comparePowers = randomizedAttack - randomizedDefense;\n\n  if (comparePowers < 0) { // attacker lost; the losses of spies will be counted in comparison to percentage difference between the powers\n\n    await killPercentageOfTroops(randomizedAttack, randomizedDefense,\n        troopsInBattle, battle, attackingKingdom, 'attacker');\n    await randomizeDeaths(defenderTroops, battle, 'defender', defendingKingdom);\n\n    battle.isFinished = true;\n    battle.result = 'loss';\n    await battle.save();\n\n  } else if (comparePowers === 0) { // when draw no one dies, no intel, nothing really happens\n\n    await randomizeDeaths(troopsInBattle, battle, 'attacker', attackingKingdom);\n    await randomizeDeaths(defenderTroops, battle, 'defender', defendingKingdom);\n\n    battle.isFinished = true;\n    battle.result = 'draw';\n    await battle.save();\n\n  } else if (comparePowers > 0) {\n\n    await randomizeDeaths(troopsInBattle, battle, 'attacker', attackingKingdom);\n    await killPercentageOfTroops(randomizedAttack, randomizedDefense,\n        defenderTroops, battle, defendingKingdom, 'defender');\n\n    let carryLimit = await getValueFromTroops(attackingKingdom, troopsInBattle,\n        'carry_limit');\n    let gold = defendingKingdom.gold;\n    let food = defendingKingdom.food;\n\n    if (carryLimit >= (gold + food)) {\n\n      battle.stolenGold = gold;\n      battle.stolenFood = food;\n      defendingKingdom.gold = 0;\n      defendingKingdom.food = 0;\n      await defendingKingdom.save();\n\n    } else {\n      let ratio = food / (food + gold);\n      battle.stolenFood = Math.round(carryLimit * ratio);\n      battle.stolenGold = Math.round(carryLimit * (1 - ratio));\n      defendingKingdom.gold = defendingKingdom.gold - battle.stolenGold;\n      defendingKingdom.food = defendingKingdom.food - battle.stolenFood;\n      await defendingKingdom.save();\n    }\n\n    battle.result = 'win';\n    battle.isFinished = true;\n    await battle.save();\n  }\n};\n\nconst demolitionAttack = async (battle, attackingKingdom,\n    buildings, troopsToBattle) => {\n\n  for (let i = 0; i < troopsToBattle.length; i++) {\n    if (troopsToBattle[i].type === 'catapult') {\n      for (let j = 0; j < troopsToBattle[i].quantity; j++) {\n\n        let pickRandomBuilding = Math.floor(Math.random() * buildings.length);\n\n        if (buildings[pickRandomBuilding].level > 0) {\n          buildings[pickRandomBuilding].level = buildings[pickRandomBuilding].level\n              - 1;\n\n          if (buildings[pickRandomBuilding].level === 0) {\n            let destroyedBuilding = {\n              type: buildings[pickRandomBuilding].type,\n              quantity: 1,\n              battleId: battle.id\n            }\n            await defenderLostTroopsRepository.create(destroyedBuilding);\n            await buildings[pickRandomBuilding].destroy();\n          }\n        }\n      }\n\n      let catapultsArray = [];\n      catapultsArray[0] = troopsToBattle[i];\n      await randomizeDeaths(catapultsArray, battle, 'attacker',\n          attackingKingdom);\n    }\n  }\n  battle.isFinished = true;\n  battle.result = 'win';\n  await battle.save();\n};\n\nconst takeOverAttack = async (battle, attackingKingdom, defendingKingdom) => {\n  defendingKingdom.loyalty = defendingKingdom.loyalty - 25;\n\n  if (defendingKingdom.loyalty <= 0) {\n    defendingKingdom.setUser(await attackingKingdom.getUser());\n  }\n\n  await defendingKingdom.save();\n\n  battle.isFinished = true;\n  battle.result = 'win';\n  await battle.save();\n};\n\nconst returnTroopsToKingdom = async (battle) => {\n  let attackingKingdom = await battle.getAttackingKingdom();\n  let troopsToBattle = await battle.getAttackerTroopsToBattle();\n  let troops = await attackingKingdom.getTroops();\n\n  for (let i = 0; i < troops.length; i++) {\n    for (let j = 0; j < troopsToBattle.length; j++) {\n      if (troops[i].type === troopsToBattle[j].type) {\n        troops[i].quantityInBattle = troops[i].quantityInBattle // remove from in battle\n            - troopsToBattle[j].quantity;\n        troops[i].quantity = troops[i].quantity + troopsToBattle[j].quantity; // add to troops\n        await troops[i].save();\n        await troopsToBattle[j].destroy(); // destroy in troops to battle - we care only about dead troops in report\n      }\n    }\n  }\n\n  if (battle.possibleBanditsReward !== null && battle.result === 'win') {\n    attackingKingdom.gold = attackingKingdom.gold + battle.possibleBanditsReward;\n    await attackingKingdom.save();\n  }\n};\n\nconst getBattleReport = async (battle, user) => {\n\n  let attacker = await battle.getAttacker();\n  let defender = await battle.getDefender();\n  let attackingKingdom = await battle.getAttackingKingdom();\n  let defendingKingdom = await battle.getDefendingKingdom();\n\n  let attackerDeadTroops = await battle.getAttackerLostTroops();\n  let defenderDeadTroopsAndBuildings = await battle.getDefenderLostTroops();\n  let troopsInBattle = await battle.getAttackerTroopsToBattle();\n\n  let report = await battle.getEspionageReport();\n  let reportBuilding;\n  let reportTroops;\n\n  if (report !== null) {\n    reportTroops = await report.getEspionageTroops();\n    reportBuilding = await report.getEspionageBuildings();\n  }\n\n  let troopsInBattleDTO = getTroopsDTO(troopsInBattle);\n  let attackerDeadTroopsDTO = getTroopsDTO(attackerDeadTroops);\n  let defenderDeadTroopsDTO = getTroopsDTO(defenderDeadTroopsAndBuildings);\n\n  if (user.id === attacker.id) {\n    let currentTime = Date.now() / 1000;\n    let timeDiff = currentTime - battle.timeOfComeback;\n\n    if (battle.isFinished && timeDiff > 0) {\n      return getAttackerFinishedDTO(battle, defendingKingdom, defender,\n          troopsInBattleDTO, attackerDeadTroopsDTO, defenderDeadTroopsDTO,\n          report, reportBuilding, reportTroops);\n\n    } else {\n      return getUnfinishedBattleDTO(battle, attackingKingdom, defendingKingdom,\n          defender, attacker, troopsInBattleDTO, 'attacker');\n    }\n\n  } else if (user.id === defender.id) {\n\n    if (battle.isFinished) {\n      return getDefenderFinishedDTO(battle, attackingKingdom, attacker,\n          attackerDeadTroopsDTO, defenderDeadTroopsDTO, report);\n\n    } else {\n      return getUnfinishedBattleDTO(battle, attackingKingdom, defendingKingdom,\n          defender, attacker, troopsInBattleDTO, 'defender');\n    }\n  }\n};\n\nconst showAllBattlesAsAttackingAndDefendingKingdom = async (kingdomId) => {\n  let attackerBattles = await BattleRepository.findAllAsAttackingKingdom(\n      kingdomId);\n  let defenderBattles = await BattleRepository.findAllAsDefendingKingdom(\n      kingdomId);\n  let attackerDTOs = [];\n  let defenderDTOs = [];\n\n  for (let i = 0; i < attackerBattles.length; i++) {\n    let defender = await attackerBattles[i].getDefender();\n    let defendingKingdom = await attackerBattles[i].getDefendingKingdom();\n\n    let battle = {\n      battleId: attackerBattles[i].id,\n      timeOfArrival: attackerBattles[i].timeOfArrival,\n      timeOfComeback: attackerBattles[i].timeOfComeback,\n      isFinished: attackerBattles[i].isFinished,\n      defender: defender.username,\n      defendingKingdom: defendingKingdom.name\n    };\n    attackerDTOs[i] = battle;\n  }\n\n  for (let i = 0; i < defenderBattles.length; i++) {\n    let attacker = await defenderBattles[i].getAttacker();\n    let attackingKingdom = await defenderBattles[i].getAttacker();\n    let battle = {\n      battleId: defenderBattles[i].id,\n      timeOfArrival: defenderBattles[i].timeOfArrival,\n      isFinished: defenderBattles[i].isFinished,\n      defender: attacker.username,\n      defendingKingdom: attackingKingdom.name\n    };\n    defenderDTOs[i] = battle;\n  }\n  return {\n    attacker: attackerDTOs,\n    defender: defenderDTOs,\n  };\n};\n\nconst getLatestReport = async (attackingKingdomId, defendingKingdomId) => {\n  let battle = await BattleRepository.findFinishedByAttackingAndDefendingKingdom(\n      attackingKingdomId, defendingKingdomId);\n  let report;\n  let buildingsReport;\n  let troopsReport;\n  if (battle) {\n    report = await battle.getEspionageReport();\n    if (report) {\n      buildingsReport = await report.getEspionageBuildings();\n      troopsReport = await report.getEspionageTroops();\n      return {\n        battleDate: battle.startedAt,\n        report: getReportDTO(report, buildingsReport, troopsReport)\n      };\n    }\n  }\n  return null;\n};\n\nconst findById = async (id) => {\n  return await BattleRepository.findById(id);\n};\n\nconst findAllUnfinished = async () => {\n  return await BattleRepository.findAllUnfinished();\n};\n\nconst findAllFinished = async () => {\n  return await BattleRepository.findAllFinished();\n};\n\n// ----------------- HELPER FUNCTIONS ---------------------\n\nconst getDefenderFinishedDTO = (battle, attackingKingdom, attacker,\n    attackerDeadTroops, defenderDeadTroops, report) => {\n  return {\n    battleId: battle.id,\n    resolutionTime: battle.timeOfArrival,\n    result: battle.result === 'win' ? 'loss' : 'win',\n    attacker: {\n      attacker: attacker.username,\n      attackingKingdom: attackingKingdom.name,\n      lostTroops: attackerDeadTroops\n    },\n    defender: {\n      stolenResources: {\n        gold: battle.stolenGold,\n        food: battle.stolenFood\n      },\n      lostTroops: defenderDeadTroops,\n      intelLeak: report === null ? 'none' : 'full'\n    }\n  };\n};\n\nconst getAttackerFinishedDTO = (battle, defendingKingdom, defender,\n    troopsToBattle, attackerDeadTroops, defenderDeadTroops, report,\n    reportBuilding, reportTroops) => {\n\n  let battleDTOWithoutReport = {\n    battleId: battle.id,\n    resolutionTime: battle.timeOfArrival,\n    result: battle.result,\n    attacker: {\n      stolenResources: {\n        gold: battle.stolenGold,\n        food: battle.stolenFood\n      },\n      lostTroops: attackerDeadTroops\n    },\n    defender: {\n      lostTroops: defenderDeadTroops\n    }\n  };\n\n  let battleDTOWithReport;\n  if (report !== null) {\n    battleDTOWithReport = {\n      battleId: battle.id,\n      resolutionTime: battle.timeOfArrival,\n      result: battle.result,\n      attacker: {\n        stolenResources: {\n          gold: battle.stolenGold,\n          food: battle.stolenFood\n        },\n        lostTroops: attackerDeadTroops\n      },\n      defender: {\n        defender: defender.username,\n        defendingKingdom: defendingKingdom.name,\n        lostTroops: defenderDeadTroops\n      },\n      report: getReportDTO(report, reportBuilding, reportTroops),\n    };\n  }\n  return report === null ? battleDTOWithoutReport : battleDTOWithReport;\n};\n\nconst getReportDTO = (report, buildingsReport, troopsReport) => {\n  return {\n    reportId: report.id,\n    totalTroops: report.totalTroops,\n    totalAttackPower: report.totalAttackPower,\n    totalDefensePower: report.totalDefensePower,\n    gold: report.gold,\n    food: report.food,\n    loyalty: report.loyalty,\n    troops: getReportDTOTroopBuildings(troopsReport),\n    buildings: getReportDTOTroopBuildings(buildingsReport)\n  };\n};\n\nconst getReportDTOTroopBuildings = (report) => {\n  let troopReportDTOs = [];\n  for (let i = 0; i < report.length; i++) {\n    let troop = {\n      type: report[i].type,\n      level: report[i].level\n    };\n    troopReportDTOs[i] = troop;\n  }\n  return troopReportDTOs;\n};\n\nconst getTroopsDTO = (troops) => {\n  let troopsDTOs = [];\n  for (let i = 0; i < troops.length; i++) {\n    let troopDTO = {\n      type: troops[i].type,\n      quantity: troops[i].quantity,\n    }\n    troopsDTOs[i] = troopDTO;\n  }\n  return troopsDTOs;\n};\n\nconst getUnfinishedBattleDTO = (battle, attackingKingdom, defendingKingdom,\n    defender, attacker, troopsToBattle, role) => {\n\n  return role === 'attacker' ? {\n    battleId: battle.id,\n    resolutionTime: battle.timeOfArrival,\n    timeOfComeback: battle.timeOfComeback,\n    targetKingdom: defendingKingdom.name,\n    targetRuler: defender.username,\n    troops: troopsToBattle\n  } : {\n    battleId: battle.id,\n    resolutionTime: battle.timeOfArrival,\n    attacker: attacker.username,\n    attackingKingdom: attackingKingdom.name,\n  }\n};\n\nconst createBuildingsEspionageReport = async (buildings, espionageReport) => {\n  for (let i = 0; i < buildings.length; i++) {\n    let espionageBuilding = {\n      type: buildings[i].type,\n      level: buildings[i].level\n    }\n    let savedBuilding = await EspionageBuildingsRepository.create(\n        espionageBuilding);\n    savedBuilding.setEspionageBuildings(espionageReport);\n  }\n};\n\nconst createTroopEspionageReport = async (defendersTroops,\n    espionageReport) => {\n  for (let i = 0; i < defendersTroops.length; i++) {\n    let unitLevel = await defendersTroops[i].getUnitLevel()\n    let espionageTroop = {\n      type: defendersTroops[i].type,\n      level: unitLevel.upgradeLevel\n    }\n    let savedTroop = await EspionageTroopsRepository.create(espionageTroop);\n    savedTroop.setEspionageTroops(espionageReport);\n  }\n};\n\nconst getAttributesForEspionageReport = async (defendingKingdom,\n    defendersTroops) => {\n  let buildings = await defendingKingdom.getBuildings();\n  let gold = defendingKingdom.gold;\n  let food = defendingKingdom.food;\n  let totalTroops = defendersTroops.map(troop => troop.quantity).reduce(\n      (partialSum, a) => partialSum + a, 0);\n  let totalAttackPower = await getValueFromTroops(defendingKingdom,\n      await defendingKingdom.getTroops(), 'attack');\n  let totalDefensePower = await getValueFromTroops(defendingKingdom,\n          await defendingKingdom.getTroops(), 'defence')\n      * await getBuildingDefensePower(\n          defendingKingdom);\n  let loyalty = defendingKingdom.loyalty;\n\n  return {\n    buildings,\n    gold,\n    food,\n    totalTroops,\n    totalAttackPower,\n    totalDefensePower,\n    loyalty\n  };\n};\n\nconst killPercentageOfTroops = async (attackPower, defensePower,\n    troops, battle, kingdom, role) => {\n\n  let percentageOfComparison = defensePower / attackPower;\n  if (percentageOfComparison < 0.5) {\n    await killTroops(0.73, troops, kingdom, battle, role);\n\n  } else if (percentageOfComparison < 0.6) {\n    await killTroops(0.56, troops, kingdom, battle, role);\n\n  } else if (percentageOfComparison < 0.75) {\n    await killTroops(0.34, troops, kingdom, battle, role);\n\n  } else if (percentageOfComparison < 0.9) {\n    await killTroops(0.1, troops, kingdom, battle, role);\n\n  } else {\n    await killTroops(0.03, troops, kingdom, battle, role);\n  }\n};\n\nconst killTroops = async (percentageOfDead, troops, kingdom, battle, role) => {\n  for (let i = 0; i < troops.length; i++) {\n    let deadTroop = {\n      type: troops[i].type,\n      quantity: Math.round(troops[i].quantity * percentageOfDead),\n      battleId: battle.id\n    };\n    if (deadTroop.quantity > 0) {\n\n      if (role === 'attacker') {\n        await subtractTroopsFromTroopsInBattle(kingdom, deadTroop);\n        await AttackerLostTroopsRepository.create(deadTroop);\n        troops[i].quantity = troops[i].quantity\n            - deadTroop.quantity;\n      }\n\n      if (role === 'defender') {\n        await defenderLostTroopsRepository.create(deadTroop);\n        troops[i].quantity = troops[i].quantity\n            - deadTroop.quantity;\n      }\n\n      if (troops[i].quantity === 0) {\n        troops[i].destroy();\n      }\n      await troops[i].save();\n    }\n  }\n};\n\nconst randomizeDeaths = async (troops, battle, role, kingdom) => {\n  let randomizerOfDeaths = Math.floor(Math.random() * 11);\n\n  switch (randomizerOfDeaths) {\n    case 3:\n      await killTroops(0.03, troops, kingdom, battle, role);\n      break;\n    case 7:\n      await killTroops(0.07, troops, kingdom, battle, role);\n      break;\n    case 9:\n      await killTroops(0.09, troops, kingdom, battle, role);\n      break;\n  }\n};\n\nconst killTroopsType = async (troopsInBattle, attackingKingdom,\n    battle, type) => {\n  for (let i = 0; i < troopsInBattle.length; i++) {\n    if (troopsInBattle[i].type === type) {\n      let arrayOfOneTroop = [];\n      arrayOfOneTroop[0] = troopsInBattle[i]; // the kill method needs array\n      await killTroops(1, arrayOfOneTroop, attackingKingdom,\n          battle, 'attacker');\n    }\n  }\n};\n\nconst getValueFromTroops = async (kingdom, troops, typeOfValue) => {\n  let sumOfTroopProperties = [];\n  let count = 0;\n  let allTroops = await kingdom.getTroops();\n  for (let i = 0; i < troops.length; i++) {\n    for (let j = 0; j < allTroops.length; j++) {\n      if (troops[i].type === allTroops[j].type) {\n        let unitLevel = await allTroops[j].getUnitLevel();\n\n        for (const [key, value] of\n            Object.entries(troopRules(unitLevel.upgradeLevel))) {\n          if (troops[i].type === value.name) {\n            sumOfTroopProperties[count++] = typeOfValue === 'speed' ? value[typeOfValue] : value[typeOfValue] * troops[i].quantity;\n          }\n        }\n      }\n    }\n  }\n  let filteredValues = sumOfTroopProperties.filter(e => e !== undefined);\n  let speed = troops.length === 0 ? 0 : filteredValues.sort()[0];\n  let otherPropertiesValue = troops.length === 0 ? 0\n      : filteredValues.reduce((partialSum, a) => partialSum + a, 0);\n  return typeOfValue === 'speed' ? speed : otherPropertiesValue;\n};\n\nconst doesArmyIncludeWalkers = (troopsToBattle) => {\n  let doesArmyIncludeWalkers = false;\n  if (doesArmyIncludesType(troopsToBattle, 'phalanx') ||\n      doesArmyIncludesType(troopsToBattle, 'cavalry') ||\n      doesArmyIncludesType(troopsToBattle, 'swordsman')) {\n    doesArmyIncludeWalkers = true;\n  }\n  return doesArmyIncludeWalkers;\n};\n\nconst doesArmyIncludesType = (troopsToBattle, type) => {\n  let doesArmyIncludesType = false;\n  for (let i = 0; i < troopsToBattle.length; i++) {\n    if (troopsToBattle[i].type === type) {\n      doesArmyIncludesType = true;\n      return doesArmyIncludesType;\n    }\n  }\n  return doesArmyIncludesType;\n};\n\nconst getBuildingDefensePower = async (kingdom) => {\n  let buildingDefensePower = [];\n  let count = 0;\n  let buildings = await kingdom.getBuildings();\n\n  for (let i = 0; i < buildings.length; i++) {\n    let buildingLevel = buildings[i].level\n    for (const [key, value] of\n        Object.entries(buildingRules(buildingLevel))) {\n      if (buildings[i].type === value.name) {\n        buildingDefensePower[count++] = value.defense;\n      }\n    }\n  }\n  let filtered = buildingDefensePower.filter(e => e !== undefined);\n  return buildings.length === 0 ? 1 : filtered.reduce(\n      (partialSum, a) => partialSum + a, 0) + 1;\n};\n\nconst getSpiesPowerByPowerType = async (kingdom, troops, timeOfTravel,\n    powerType) => {\n  let spiesPower;\n  let randomizers = getRandomizersOfBattle(timeOfTravel);\n  let allTroops = await kingdom.getTroops();\n\n  for (let i = 0; i < troops.length; i++) {\n    for (let j = 0; j < allTroops.length; j++) {\n      if (troops[i].type === 'scout' && allTroops[j].type === 'scout') {\n        let unitLevel = await allTroops[j].getUnitLevel();\n        spiesPower = troopRules(unitLevel.upgradeLevel).scout[powerType]\n            * troops[i].quantity;\n      }\n    }\n  }\n  let spiesAttack = troops.length === 0 ? 0 : spiesPower\n      * randomizers.weakeningAttackerArmy\n      * randomizers.fortunateEventAttacker\n      * randomizers.unfortunateEventAttacker;\n\n  let spiesDefense = troops.length === 0 ? 0 : spiesPower\n      * randomizers.unfortunateEventDefender\n      * randomizers.fortunateEventDefender;\n\n  return powerType === 'attack' ? spiesAttack : spiesDefense;\n};\n\nconst sendTroopsToBattle = async (attackingKingdom, troopsToBattle) => {\n  let troops = await attackingKingdom.getTroops();\n  for (let i = 0; i < troops.length; i++) {\n    for (let j = 0; j < troopsToBattle.length; j++) {\n      if (troops[i].type === troopsToBattle[j].type) {\n        troops[i].quantityInBattle = troops[i].quantityInBattle\n            + troopsToBattle[j].quantity;\n        troops[i].quantity = troops[i].quantity - troopsToBattle[j].quantity;\n        await troops[i].save();\n      }\n    }\n  }\n};\n\nconst subtractTroopsFromTroopsInBattle = async (kingdom, deadTroop) => {\n  let troops = await kingdom.getTroops();\n  for (let i = 0; i < troops.length; i++) {\n    if (troops[i].type === deadTroop.type) {\n      troops[i].quantityInBattle = troops[i].quantityInBattle\n          - deadTroop.quantity;\n      await troops[i].save();\n    }\n  }\n};\n\nconst eventGenerator = (type) => {\n  let random = Math.floor(Math.random() * 11);\n  let choosePercent = Math.floor(Math.random() * 26);\n  let fortunateEvent = random === 3 || random === 9 ? 1 + choosePercent / 100\n      : 1;\n  let unfortunateEvent = random === 5 || random === 8 ? 1 - choosePercent / 100\n      : 1;\n  return type === 'fortunate' ? fortunateEvent : unfortunateEvent;\n};\n\nconst getRandomizersOfBattle = (timeOfTravel) => {\n  let weakeningAttackerArmy = timeOfTravel - 4 <= 0 ? 1 : 1 - (timeOfTravel - 4\n      * 0.03); // if travels more than 4 hours, each hour takes 3% of attack power down\n  let fortunateEventAttacker = eventGenerator('fortunate');\n  let fortunateEventDefender = eventGenerator('fortunate');\n  let unfortunateEventAttacker = eventGenerator('unfortunate');\n  let unfortunateEventDefender = eventGenerator('unfortunate');\n\n  return {\n    weakeningAttackerArmy,\n    fortunateEventDefender,\n    fortunateEventAttacker,\n    unfortunateEventDefender,\n    unfortunateEventAttacker\n  };\n};\n\nconst calculateDistance = (attackingKingdom, defendingKingdom) => {\n  let x1 = attackingKingdom.coordinateX;\n  let y1 = attackingKingdom.coordinateY;\n  let x2 = defendingKingdom.coordinateX;\n  let y2 = defendingKingdom.coordinateY;\n  return Math.round(Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)));\n};\n\nexport default {\n  initiateBattle,\n  findById,\n  returnTroopsToKingdom,\n  startBattle,\n  getBattleReport,\n  findAllUnfinished,\n  findAllFinished,\n  showAllBattlesAsAttackingAndDefendingKingdom,\n  getLatestReport\n};\n"],"file":"battle-service.js"}