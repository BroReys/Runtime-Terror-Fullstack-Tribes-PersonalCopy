{"version":3,"sources":["../../src/models/user.js"],"names":["User","sequelize","define","id","type","Sequelize","INTEGER","autoIncrement","allowNull","primaryKey","unique","username","STRING","email","password","active","BOOLEAN","defaultValue","hadKingdomAlready","registrationToken","validate","is","generateConfirmationToken","registrationTokenExpiresAt","DOUBLE","expiresIn","forgottenPasswordToken","forgottenPasswordTokenExpiresAt","registeredAt","timestamps","hooks","beforeCreate","record","Math","floor","Date","now"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;;;;;;AAEA,IAAMA,IAAI,GAAGC,qBAAUC,MAAV,CAAiB,MAAjB,EAAyB;AAChCC,EAAAA,EAAE,EAAE;AACFC,IAAAA,IAAI,EAAEC,sBAAUC,OADd;AAEFC,IAAAA,aAAa,EAAE,IAFb;AAGFC,IAAAA,SAAS,EAAE,KAHT;AAIFC,IAAAA,UAAU,EAAE,IAJV;AAKFC,IAAAA,MAAM,EAAE;AALN,GAD4B;AAQhCC,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,sBAAUO,MADR;AAERF,IAAAA,MAAM,EAAE,IAFA;AAGRF,IAAAA,SAAS,EAAE;AAHH,GARsB;AAahCK,EAAAA,KAAK,EAAE;AACLT,IAAAA,IAAI,EAAEC,sBAAUO,MADX;AAELF,IAAAA,MAAM,EAAE,IAFH;AAGLF,IAAAA,SAAS,EAAE;AAHN,GAbyB;AAkBhCM,EAAAA,QAAQ,EAAE;AACRV,IAAAA,IAAI,EAAEC,sBAAUO,MADR;AAERJ,IAAAA,SAAS,EAAE;AAFH,GAlBsB;AAsBhCO,EAAAA,MAAM,EAAE;AACNX,IAAAA,IAAI,EAAEC,sBAAUW,OADV;AAENR,IAAAA,SAAS,EAAE,KAFL;AAGNS,IAAAA,YAAY,EAAE;AAHR,GAtBwB;AA2BhCC,EAAAA,iBAAiB,EAAE;AACjBd,IAAAA,IAAI,EAAEC,sBAAUW,OADC;AAEjBC,IAAAA,YAAY,EAAE;AAFG,GA3Ba;AA+BhCE,EAAAA,iBAAiB,EAAE;AACjBf,IAAAA,IAAI,EAAEC,sBAAUO,MAAV,CAAiB,EAAjB,CADW;AAEjBQ,IAAAA,QAAQ,EAAE;AACRC,MAAAA,EAAE,EAAE;AADI,KAFO;AAKjBX,IAAAA,MAAM,EAAE,IALS;AAMjBO,IAAAA,YAAY,EAAEK;AANG,GA/Ba;AAuChCC,EAAAA,0BAA0B,EAAE;AAC1BnB,IAAAA,IAAI,EAAEC,sBAAUmB,MADU;AAE1BP,IAAAA,YAAY,EAAEQ,uCAFY;AAG1BjB,IAAAA,SAAS,EAAE;AAHe,GAvCI;AA4ChCkB,EAAAA,sBAAsB,EAAE;AACtBtB,IAAAA,IAAI,EAAEC,sBAAUO,MADM;AAEtBF,IAAAA,MAAM,EAAE,IAFc;AAGtBF,IAAAA,SAAS,EAAE,IAHW;AAItBS,IAAAA,YAAY,EAAE;AAJQ,GA5CQ;AAkDhCU,EAAAA,+BAA+B,EAAE;AAC/BvB,IAAAA,IAAI,EAAEC,sBAAUmB,MADe;AAE/BhB,IAAAA,SAAS,EAAE,IAFoB;AAG/BS,IAAAA,YAAY,EAAE;AAHiB,GAlDD;AAuDhCW,EAAAA,YAAY,EAAE;AACZxB,IAAAA,IAAI,EAAEC,sBAAUmB;AADJ;AAvDkB,CAAzB,EA0DN;AACDK,EAAAA,UAAU,EAAE,KADX;AAEDC,EAAAA,KAAK,EAAE;AACLC,IAAAA,YAAY,EAAE,sBAACC,MAAD,EAAY;AACxBA,MAAAA,MAAM,CAACJ,YAAP,GAAsBK,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAAtB;AACD;AAHI;AAFN,CA1DM,CAAb;;eAoEepC,I","sourcesContent":["import Sequelize, {DataTypes, DATE} from \"sequelize\";\nimport sequelize from \"../config/database\";\nimport generateConfirmationToken\n  from \"../utilities/generate-confirmation-token\";\nimport expiresIn from '../utilities/generate-day-expiration-number'\n\nconst User = sequelize.define('user', {\n      id: {\n        type: Sequelize.INTEGER,\n        autoIncrement: true,\n        allowNull: false,\n        primaryKey: true,\n        unique: true\n      },\n      username: {\n        type: Sequelize.STRING,\n        unique: true,\n        allowNull: false\n      },\n      email: {\n        type: Sequelize.STRING,\n        unique: true,\n        allowNull: false\n      },\n      password: {\n        type: Sequelize.STRING,\n        allowNull: false,\n      },\n      active: {\n        type: Sequelize.BOOLEAN,\n        allowNull: false,\n        defaultValue: false\n      },\n      hadKingdomAlready: {\n        type: Sequelize.BOOLEAN,\n        defaultValue: false,\n      },\n      registrationToken: {\n        type: Sequelize.STRING(24),\n        validate: {\n          is: /^[a-z A-Z0-9]+$/i\n        },\n        unique: true,\n        defaultValue: generateConfirmationToken\n      },\n      registrationTokenExpiresAt: {\n        type: Sequelize.DOUBLE,\n        defaultValue: expiresIn,\n        allowNull: false\n      },\n      forgottenPasswordToken: {\n        type: Sequelize.STRING,\n        unique: true,\n        allowNull: true,\n        defaultValue: null\n      },\n      forgottenPasswordTokenExpiresAt: {\n        type: Sequelize.DOUBLE,\n        allowNull: true,\n        defaultValue: null\n      },\n      registeredAt: {\n        type: Sequelize.DOUBLE\n      }\n    }, {\n      timestamps: false,\n      hooks: {\n        beforeCreate: (record) => {\n          record.registeredAt = Math.floor(Date.now() / 1000);\n        }\n      }\n    }\n)\n\nexport default User;\n"],"file":"user.js"}