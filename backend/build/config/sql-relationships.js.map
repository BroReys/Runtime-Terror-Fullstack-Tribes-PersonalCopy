{"version":3,"sources":["../../src/config/sql-relationships.js"],"names":["createRelationships","EspionageTroops","belongsTo","EspionageReport","as","foreignKey","setEspionageTroops","espionageReport","setDataValue","hasMany","getEspionageTroops","getDataValue","EspionageBuildings","setEspionageBuildings","getEspionageBuildings","Battle","hasOne","getEspionageReport","User","getAttacker","setAttacker","attacker","getAttackerBattles","getDefender","setDefender","defender","getDefenderBattles","Kingdom","getAttackingKingdom","setAttackingKingdom","attackingKingdom","getDefendingKingdom","setDefendingKingdom","defendingKingdom","AttackerTroopsToBattle","getAttackerTroopsToBattle","AttackerLostTroops","getAttackerLostTroops","DefenderLostTroopsAndBuildings","getDefenderLostTroops","getKingdoms","getUser","setUser","user","Building","getBuildings","Troops","getTroops","Troops_in_barracks","Unit_level","getUnitLevel","Chat","getOwner","Message","getAuthor","getMessages","belongsToMany","through","ChatMembers","getUsers","getChats","sequelize","sync","then","res","console","log","KingdomService","createAiKingdoms"],"mappings":"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","sourcesContent":["import sequelize from \"./database\";\nimport Message from \"../models/chat-models/message\";\nimport Chat from \"../models/chat-models/chat\";\nimport ChatMembers from \"../models/chat-models/chat-members\";\nimport User from \"../models/user\";\nimport Kingdom from \"../models/kingdom\";\nimport Building from \"../models/building\";\nimport Troops from \"../models/troops-models/troops\";\nimport Unit_level from \"../models/unit-level\";\nimport Troops_in_barracks from \"../models/troops-models/troops-in-barracks\";\nimport Battle from \"../models/battle/battle\";\nimport AttackerLostTroops\n  from \"../models/battle/attacker-lost-troops-in-battle\";\nimport DefenderLostTroopsAndBuildings\n  from \"../models/battle/defender-lost-troops-in-battle\";\nimport AttackerTroopsToBattle\n  from \"../models/battle/attacker-troops-to-battle\";\nimport EspionageBuildings from \"../models/espionage/espionage-buildings\";\nimport EspionageReport from \"../models/espionage/espionage-report\";\nimport EspionageTroops from \"../models/espionage/espionage-troops\";\nimport espionageReport from \"../models/espionage/espionage-report\";\nimport KingdomService from \"../services/kingdom-service\";\nimport kingdom from \"../models/kingdom\";\n\nconst createRelationships = () => {\n\n  EspionageTroops.belongsTo(EspionageReport, {\n    as: 'espionageTroops',\n    foreignKey: 'espionageReportId',\n    setEspionageTroops(espionageReport) {\n      this.setDataValue('espionageReport', espionageReport);\n    }\n  });\n\n  EspionageReport.hasMany(EspionageTroops, {\n    as: 'espionageTroops',\n    foreignKey: 'espionageReportId',\n    getEspionageTroops() {\n      return this.getDataValue('espionageTroops');\n    }\n  });\n\n  EspionageBuildings.belongsTo(EspionageReport, {\n    as: 'espionageBuildings',\n    foreignKey: 'espionageReportId',\n    setEspionageBuildings(espionageReport) {\n      this.setDataValue('espionageReport', espionageReport)\n    }\n  });\n\n  EspionageReport.hasMany(EspionageBuildings, {\n    as: 'espionageBuildings',\n    foreignKey: 'espionageReportId',\n    getEspionageBuildings() {\n      return this.getDataValue('espionageBuildings');\n    }\n  });\n\n  EspionageReport.belongsTo(Battle, {\n    as: 'espionageReport',\n    foreignKey: 'battleId'\n  });\n\n  Battle.hasOne(EspionageReport, {\n    as: 'espionageReport',\n    foreignKey: 'battleId',\n    getEspionageReport() {\n      return this.getDataValue('espionageReport');\n    }\n  });\n\n  Battle.belongsTo(User, {\n    as: 'Attacker',\n    foreignKey: 'attacker_id',\n    getAttacker() {\n      return this.getDataValue;\n    },\n    setAttacker(attacker) {\n      this.setDataValue('Attacker', attacker);\n    }\n  });\n\n  User.hasMany(Battle, {\n    as: 'Attacker',\n    foreignKey: 'attacker_id',\n    getAttackerBattles() {\n      return this.getDataValue;\n    }\n  });\n\n  Battle.belongsTo(User, {\n    as: 'Defender',\n    foreignKey: 'defender_id',\n    getDefender() {\n      return this.getDataValue;\n    },\n    setDefender(defender) {\n      this.setDataValue('Defender', defender);\n    }\n  });\n\n  User.hasMany(Battle, {\n    as: 'Defender',\n    foreignKey: 'defender_id',\n    getDefenderBattles() {\n      return this.getDataValue;\n    }\n  });\n\n  Battle.belongsTo(Kingdom, {\n    as: 'AttackingKingdom',\n    foreignKey: 'attacking_kingdom_id',\n    getAttackingKingdom() {\n      return this.getDataValue;\n    },\n    setAttackingKingdom(attackingKingdom) {\n      this.setDataValue('AttackingKingdom', attackingKingdom);\n    }\n  });\n\n  Kingdom.hasMany(Battle, {\n    as: 'AttackingKingdom',\n    foreignKey: 'attacking_kingdom_id'\n  });\n\n  Battle.belongsTo(Kingdom, {\n    as: 'DefendingKingdom',\n    foreignKey: 'defending_kingdom_id',\n    getDefendingKingdom() {\n      return this.getDataValue;\n    },\n    setDefendingKingdom(defendingKingdom) {\n      this.setDefendingKingdom('DefendingKingdom', defendingKingdom);\n    }\n  });\n\n  Kingdom.hasMany(Battle, {\n    as: 'DefendingKingdom',\n    foreignKey: 'defending_kingdom_id'\n  });\n\n  AttackerTroopsToBattle.belongsTo(Battle, {\n    as: 'attackerTroopsToBattle',\n    foreignKey: 'battleId'\n  });\n  // in order to getter to work the 'as' option must be set\n  Battle.hasMany(AttackerTroopsToBattle, {\n    as: 'attackerTroopsToBattle',\n    foreignKey: 'battleId',\n    getAttackerTroopsToBattle() {\n      return this.getDataValue('attackerTroopsToBattle');\n    }\n  })\n\n  AttackerLostTroops.belongsTo(Battle, {\n    as: 'attackerLostTroops',\n    foreignKey: 'battleId'\n  });\n\n  Battle.hasMany(AttackerLostTroops, {\n    as: 'attackerLostTroops',\n    foreignKey: 'battleId',\n    getAttackerLostTroops() {\n      return this.getDataValue;\n    }\n  });\n\n  DefenderLostTroopsAndBuildings.belongsTo(Battle, {\n    as: 'DefenderLostTroops',\n    foreignKey: 'battleId'\n  });\n\n  Battle.hasMany(DefenderLostTroopsAndBuildings, {\n    as: 'defenderLostTroops',\n    foreignKey: 'battleId',\n    getDefenderLostTroops() {\n      return this.getDataValue;\n    }\n  });\n\n  User.hasMany(Kingdom, {\n    getKingdoms() {\n      return this.getDataValue;\n    }\n  });\n\n  Kingdom.belongsTo(User, {\n    getUser() {\n      return this.getDataValue;\n    },\n    setUser(user) {\n      this.setDataValue('user', user);\n    }\n  });\n\n  Building.belongsTo(Kingdom, {\n    as: 'buildings',\n    foreignKey: 'kingdomId'\n  });\n\n  Kingdom.hasMany(Building, {\n    as: 'buildings',\n    foreignKey: 'kingdomId',\n    getBuildings() {\n      return this.getDataValue('buildings');\n    }\n  });\n\n  Troops.belongsTo(Kingdom,\n      //     {\n      //   foreignKey: 'kingdomId',\n      //   onDelete: 'cascade',\n      //   hooks: true\n      // }\n  );\n\n  Kingdom.hasMany(Troops, {\n    getTroops() {\n      return this.getDataValue;\n    }\n  });\n\n  Troops_in_barracks.belongsTo(Kingdom);\n\n  Kingdom.hasMany(Troops_in_barracks);\n\n  Troops.belongsTo(Unit_level, {\n    as: 'unitLevel',\n    foreignKey: 'unitLevelId',\n    getUnitLevel() {\n      return this.getDataValue('unitLevel');\n    }\n  });\n\n  Unit_level.hasMany(Troops, {\n    as: 'unitLevel',\n    foreignKey: 'unitLevelId'\n  });\n\n  Unit_level.belongsTo(Kingdom,\n      //     {\n      //   foreignKey: 'kingdomId',\n      //   onDelete: 'cascade',\n      //   hooks: true\n      // }\n  );\n\n  Kingdom.hasMany(Unit_level);\n\n  Chat.belongsTo(User, {\n    as: 'Owner',\n    foreignKey: 'owner_id',\n    getOwner() {\n      return this.getDataValue;\n    }\n  });\n\n  User.hasMany(Chat, {\n    as: 'Owner',\n    foreignKey: 'owner_id'\n  });\n\n  Message.belongsTo(Chat);\n\n  Message.belongsTo(User, {\n    as: 'Author',\n    foreignKey: 'author_id',\n    getAuthor() {\n      return this.getDataValue;\n    }\n  });\n\n  Chat.hasMany(Message, {\n    getMessages() {\n      return this.getDataValue;\n    }\n  });\n\n  Chat.belongsToMany(User, {\n    through: ChatMembers,\n    getUsers() {\n      return this.getDataValue;\n    }\n  });\n\n  User.belongsToMany(Chat, {\n    through: ChatMembers,\n    getChats() {\n      return this.getDataValue;\n    }\n  });\n\n  sequelize.sync()\n  .then(res => {\n    console.log(res);\n    KingdomService.createAiKingdoms();\n  });\n};\n\nexport default createRelationships;\n"],"file":"sql-relationships.js"}