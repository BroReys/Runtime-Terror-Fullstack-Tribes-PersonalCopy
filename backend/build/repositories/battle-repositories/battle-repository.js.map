{"version":3,"sources":["../../../src/repositories/battle-repositories/battle-repository.js"],"names":["create","battleToSave","Battle","savedBattle","findAll","findById","id","findOne","where","findAllUnfinished","isFinished","findAllFinished","findAllAsAttackingKingdom","kingdomId","attacking_kingdom_id","order","findAllAsDefendingKingdom","defending_kingdom_id","findFinishedByAttackingAndDefendingKingdom","attackingKingdomId","defendingKingdomId","sequelize","literal"],"mappings":"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","sourcesContent":["import Battle from \"../../models/battle/battle\";\nimport sequelize from \"../../config/database\";\n\nconst create = async (battleToSave) => {\n  let savedBattle = await Battle.create(battleToSave);\n  return savedBattle;\n};\n\nconst findAll = async () => {\n  return await Battle.findAll();\n};\n\nconst findById = async (id) => {\n  return await Battle.findOne({\n    where: {\n      id: id\n    }\n  });\n};\n\nconst findAllUnfinished = async () => {\n  return await Battle.findAll({\n    where: {\n      isFinished: false\n    }\n  })\n};\n\nconst findAllFinished = async () => {\n  return await Battle.findAll({\n    where: {\n      isFinished: true\n    }\n  })\n};\n\nconst findAllAsAttackingKingdom = async (kingdomId) => {\n  return await Battle.findAll({\n    where: {\n      attacking_kingdom_id: kingdomId\n    },\n    order: [\n      ['isFinished'],\n      ['timeOfComeback']\n    ]\n  });\n};\n\nconst findAllAsDefendingKingdom = async (kingdomId) => {\n  return await Battle.findAll({\n    where: {\n      defending_kingdom_id: kingdomId\n    },\n    order: [\n      ['isFinished'],\n      ['timeOfArrival']\n    ]\n  });\n};\n\nconst findFinishedByAttackingAndDefendingKingdom = async (attackingKingdomId,\n    defendingKingdomId) => {\n  return await Battle.findOne({\n    where: {\n      defending_kingdom_id: defendingKingdomId,\n      attacking_kingdom_id: attackingKingdomId,\n      isFinished: true\n    },\n    order: sequelize.literal('startedAt DESC')\n  });\n};\n\nexport default {\n  create,\n  findById,\n  findAllUnfinished,\n  findAllFinished,\n  findAllAsAttackingKingdom,\n  findAllAsDefendingKingdom,\n  findFinishedByAttackingAndDefendingKingdom\n};\n\n"],"file":"battle-repository.js"}