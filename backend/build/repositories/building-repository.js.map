{"version":3,"sources":["../../src/repositories/building-repository.js"],"names":["findAll","Building","findAllByKingdomIdAndStatusTrue","kingdomId","attributes","where","status","raw","nest","findAllByKingdomIdAndStatusFalse","findTownhallByKingdomId","findOne","type","findAllByKingdomIdWhereType","findOneByKingdomIdWhereType","createBuilding","building","create","saveBuilding","save","destroyBuilding","destroy","findBuildingByPk","buildingId","findByPk","findAllBuiltAndActiveByKingdomId","endTime","Op","lte","Date","now","findAllInProgressUntil","currentTick","countDestroyableBuildingsExcept","buildingType","count","and","ne","getRandomBuildingExcept","order","sequelize","random","findAcademyByKingdomId"],"mappings":"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","sourcesContent":["import Building from \"../models/building\";\nimport {Op} from \"sequelize\";\nimport sequelize from \"../config/database\";\n\nconst findAll = async () => {\n  return Building.findAll();\n}\n\nconst findAllByKingdomIdAndStatusTrue = async (kingdomId) => {\n  return Building.findAll({\n    attributes: [\"position\", \"id\", \"type\", \"level\", \"status\", \"startTime\", \"endTime\", \"destroyTime\"],\n    where: {\n      kingdomId: kingdomId,\n      status: true\n    },\n    raw: true,\n    nest: true\n  })\n}\n\nconst findAllByKingdomIdAndStatusFalse = async (kingdomId) => {\n  return Building.findAll({\n    attributes: [\"position\", \"id\", \"type\", \"level\", \"status\", \"startTime\", \"endTime\", \"destroyTime\"],\n    where: {\n      kingdomId: kingdomId,\n      status: false\n    },\n  })\n}\n\nconst findTownhallByKingdomId = async (kingdomId) => {\n  return Building.findOne({\n    attributes: [\"position\", \"id\", \"type\", \"level\", \"status\", \"startTime\", \"endTime\", \"destroyTime\"],\n    where: {\n      kingdomId: kingdomId,\n      type: \"townhall\"\n    },\n  })\n}\n\nconst findAllByKingdomIdWhereType = async (kingdomId, type) => {\n  return Building.findAll({\n    where: {\n      kingdomId: kingdomId,\n      type: type\n    }\n  })\n}\n\nconst findOneByKingdomIdWhereType = async (kingdomId, type) => {\n  return Building.findOne({\n    where: {\n      kingdomId: kingdomId,\n      type: type\n    }\n  })\n}\n\nconst createBuilding = async (building) => {\n  return Building.create(building);\n}\n\nconst saveBuilding = async (building) => {\n  return building.save();\n}\n\nconst destroyBuilding = async (building) => {\n  return building.destroy();\n}\n\nconst findBuildingByPk = async (buildingId) => {\n  return Building.findByPk(buildingId);\n}\n\nconst findAllBuiltAndActiveByKingdomId = async (kingdomId) => {\n  return Building.findAll({\n    where: {\n      kingdomId: kingdomId,\n      status: true,\n      endTime: {[Op.lte]: Date.now() / 1000}\n    }\n  })\n}\n\nconst findAllInProgressUntil = async (kingdomId, currentTick) => {\n  return Building.findAll({\n    where: {\n      kingdomId: kingdomId,\n      status: false,\n      endTime: {[Op.lte]: currentTick}\n    }\n  })\n}\n\nconst countDestroyableBuildingsExcept = async (kingdomId, buildingType) => {\n  return Building.count({\n    where: {\n      kingdomId: kingdomId,\n      status: true,\n      [Op.and] : [\n        {type: {[Op.ne] : buildingType}},\n        {type: {[Op.ne] : \"townhall\"}}\n      ]\n    }\n  });\n}\n\nconst getRandomBuildingExcept = async (kingdomId, buildingType) => {\n  return Building.findOne({\n    where: {\n      kingdomId: kingdomId,\n      status: true,\n      [Op.and] : [\n        {type: {[Op.ne] : buildingType}},\n        {type: {[Op.ne] : \"townhall\"}}\n      ]\n    },\n    order: sequelize.random()\n  })\n}\n\nconst findAcademyByKingdomId = async (kingdomId) => {\n  return Building.findOne({\n    attributes: [\"position\", \"id\", \"type\", \"level\", \"status\", \"startTime\", \"endTime\", \"destroyTime\"],\n    where: {\n      kingdomId: kingdomId,\n      type: \"academy\"\n    },\n   })\n}\n\nexport default {\n  findAll,\n  findAllByKingdomIdAndStatusTrue,\n  findAllByKingdomIdAndStatusFalse,\n  createBuilding,\n  saveBuilding,\n  destroyBuilding,\n  findBuildingByPk,\n  findAllByKingdomIdWhereType,\n  findOneByKingdomIdWhereType,\n  findTownhallByKingdomId,\n  findAllBuiltAndActiveByKingdomId,\n  findAcademyByKingdomId,\n  countDestroyableBuildingsExcept,\n  getRandomBuildingExcept,\n  findAllInProgressUntil\n}\n"],"file":"building-repository.js"}