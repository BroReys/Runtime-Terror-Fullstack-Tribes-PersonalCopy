{"version":3,"sources":["../../src/middlewares/login-middleware.js"],"names":["loginMiddleware","req","res","next","tokenInHeader","headers","token","status","send","split","decoded","jwt","verify","process","env","ACCESS_TOKEN_SECRET","user","ex"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAmB;AAEzC;AACA,MAAMC,aAAa,GAAGH,GAAG,CAACI,OAAJ,CAAY,eAAZ,CAAtB;AAEA,MAAIC,KAAJ,CALyC,CAOzC;;AACA,MAAI,CAACF,aAAL,EAAoB;AAClB,WAAOF,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAAP;AACD,GAFD,MAEM;AACJF,IAAAA,KAAK,GAAGF,aAAa,CAACK,KAAd,CAAoB,GAApB,EAAyB,CAAzB,CAAR;AACD;;AAED,MAAI;AACF;AACA,QAAMC,OAAO,GAAGC,yBAAIC,MAAJ,CAAWN,KAAX,EAAkBO,OAAO,CAACC,GAAR,CAAYC,mBAA9B,CAAhB;;AACAd,IAAAA,GAAG,CAACe,IAAJ,GAAWN,OAAX;AACAP,IAAAA,IAAI;AAEL,GAND,CAME,OAAOc,EAAP,EAAW;AACX;AACAf,IAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gBAArB;AACD;AACF,CAxBD;;eA0BeR,e","sourcesContent":["import jwt from 'jsonwebtoken';\nimport 'dotenv/config';\n\nconst loginMiddleware = (req, res, next) =>{\n\n  //get the token from the header if present\n  const tokenInHeader = req.headers[\"authorization\"];\n\n  let token;\n\n  //if no token found, return response (without going to the next middelware)\n  if (!tokenInHeader) {\n    return res.status(401).send(\"Access denied. No token provided.\");\n  } else{\n    token = tokenInHeader.split(' ')[1];\n  }\n\n  try {\n    //if can verify the token, set req.user and pass to next middleware\n    const decoded = jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\n    req.user = decoded;\n    next();\n\n  } catch (ex) {\n    //if invalid token\n    res.status(400).send(\"Invalid token.\");\n  }\n}\n\nexport default loginMiddleware;"],"file":"login-middleware.js"}