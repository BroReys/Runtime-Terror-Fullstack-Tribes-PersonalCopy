{"version":3,"sources":["../../src/middlewares/authentication-middleware.js"],"names":["authentication","user","username","undefined","password","privateKey","process","env","ACCESS_TOKEN_SECRET","jwt","sign","id","expiresIn","authorization","authToken","token","split","verify","getUserFromPayload","tokenPayloadInfo","JSON","parse","atob","UserRepository","findById","console","error"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA;AACA,IAAMA,cAAc;AAAA,2FAAG,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEjBA,IAAI,CAACC,QAAL,KAAkBC,SAAlB,IAA+BF,IAAI,CAACG,QAAL,KAAkBD,SAFhC;AAAA;AAAA;AAAA;;AAAA,6CAGZ,IAHY;;AAAA;AAKjBE,YAAAA,UALiB,GAKJC,OAAO,CAACC,GAAR,CAAYC,mBALR;AAAA;AAAA,mBAMRC,yBAAIC,IAAJ,CAAS;AACpBC,cAAAA,EAAE,EAAEV,IAAI,CAACU,EADW;AAEpBT,cAAAA,QAAQ,EAAED,IAAI,CAACC;AAFK,aAAT,EAGVG,UAHU,EAGE;AAACO,cAAAA,SAAS,EAAE;AAAZ,aAHF,CANQ;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdZ,cAAc;AAAA;AAAA;AAAA,GAApB,C,CAYA;;;AACA,IAAMa,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAe;AACnC,MAAIA,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAKX,SAAxC,EAAmD;AACjD,WAAO,GAAP;AACD;;AACD,MAAMY,KAAK,GAAGD,SAAS,CAACE,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAd;;AACA,MAAI;AACFP,6BAAIQ,MAAJ,CAAWF,KAAX,EAAkBT,OAAO,CAACC,GAAR,CAAYC,mBAA9B;;AACA,WAAO,GAAP;AACD,GAHD,CAGE,gBAAM;AACN,WAAO,GAAP;AACD;AACF,CAXD;;AAaA,IAAMU,kBAAkB;AAAA,4FAAG,kBAAOH,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEnBI,YAAAA,gBAFmB,GAEAJ,KAAK,CAACC,KAAN,CAAY,GAAZ,CAFA;AAGnBf,YAAAA,IAHmB,GAGZmB,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACH,gBAAgB,CAAC,CAAD,CAAjB,CAAf,CAHY;AAAA;AAAA,mBAIVI,2BAAeC,QAAf,CAAwBvB,IAAI,CAACU,EAA7B,CAJU;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMvBc,YAAAA,OAAO,CAACC,KAAR,CAAc,oEAAd;AANuB,8CAOhB,IAPgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAlBR,kBAAkB;AAAA;AAAA;AAAA,GAAxB;;eAWe;AACblB,EAAAA,cAAc,EAAdA,cADa;AAEba,EAAAA,aAAa,EAAbA,aAFa;AAGbK,EAAAA,kBAAkB,EAAlBA;AAHa,C","sourcesContent":["import jwt from 'jsonwebtoken';\nimport 'dotenv/config';\nimport UserRepository from \"../repositories/user-repository\";\n\n// if login passes then authenticate -> returns token\nconst authentication = async (user) => {\n\n  if (user.username === undefined || user.password === undefined) {\n    return null;\n  }\n  let privateKey = process.env.ACCESS_TOKEN_SECRET;\n  return await jwt.sign({\n    id: user.id,\n    username: user.username\n  }, privateKey, {expiresIn: \"2h\"});\n}\n\n//verifies the token\nconst authorization = (authToken) => {\n  if (authToken === null || authToken === undefined) {\n    return 403;\n  }\n  const token = authToken.split(' ')[1];\n  try {\n    jwt.verify(token, process.env.ACCESS_TOKEN_SECRET);\n    return 200;\n  } catch {\n    return 403;\n  }\n};\n\nconst getUserFromPayload = async (token) => {\n  try {\n    let tokenPayloadInfo = token.split(\".\");\n    let user = JSON.parse(atob(tokenPayloadInfo[1]));\n    return await UserRepository.findById(user.id);\n  } catch {\n    console.error(\"Token parameter in method getUserFromPayload was udefined or null!\")\n    return null\n  }\n}\n\nexport default {\n  authentication,\n  authorization,\n  getUserFromPayload\n}\n"],"file":"authentication-middleware.js"}