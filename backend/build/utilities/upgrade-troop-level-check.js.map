{"version":3,"sources":["../../src/utilities/upgrade-troop-level-check.js"],"names":["canAffordUnitUpgrade","kingdomId","type","KingdomRepository","findKingdomById","kingdom","kingdomGold","gold","UnitLevelRepository","findUnitLevelByTroopTypeAndByKingdomId","kingdomUnitLevel","currentUpgradeLevel","upgradeLevel","val","troopUpgradeCost","upgrade_cost","save"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,oBAAoB;AAAA,2FAAG,iBAAQC,SAAR,EAAmBC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACPC,8BAAkBC,eAAlB,CAAkCH,SAAlC,CADO;;AAAA;AACvBI,YAAAA,OADuB;AAEvBC,YAAAA,WAFuB,GAETD,OAAO,CAACE,IAFC;AAAA;AAAA,mBAGEC,gCAC5BC,sCAD4B,CACWR,SADX,EACqBC,IADrB,CAHF;;AAAA;AAGvBQ,YAAAA,gBAHuB;AAKvBC,YAAAA,mBALuB,GAKDD,gBAAgB,CAACE,YALhB,EAM7B;;AAN6B,uDAOX,6BAAWD,mBAAX,CAPW;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAOlBE,YAAAA,GAPkB;;AAAA,kBASrBA,GAAG,KAAKX,IATa;AAAA;AAAA;AAAA;;AAUnBY,YAAAA,gBAVmB,GAUA,6BAAWH,mBAAX,EAAgCE,GAAhC,EAAqCE,YAVrC;;AAAA,kBAWnBD,gBAAgB,IAAIR,WAXD;AAAA;AAAA;AAAA;;AAYrBD,YAAAA,OAAO,CAACE,IAAR,IAAgBO,gBAAhB;AAZqB;AAAA,mBAafT,OAAO,CAACW,IAAR,EAbe;;AAAA;AAAA,6CAcd,IAdc;;AAAA;AAAA,6CAgBd,KAhBc;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBhB,oBAAoB;AAAA;AAAA;AAAA,GAA1B","sourcesContent":["import {troopRules} from \"../rules/troops-rules\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport UnitLevelRepository from \"../repositories/unit-level-repository\";\n\nconst canAffordUnitUpgrade = async  (kingdomId, type) => {\n  let kingdom = await KingdomRepository.findKingdomById(kingdomId);\n  let kingdomGold = kingdom.gold;\n  let kingdomUnitLevel = await UnitLevelRepository\n  .findUnitLevelByTroopTypeAndByKingdomId(kingdomId,type);\n  let currentUpgradeLevel = kingdomUnitLevel.upgradeLevel\n// --->looping through troopsRules object tree, finding corresponding value<---\n  for (let val in troopRules(currentUpgradeLevel)) {\n    //--->if matches values matches type, fetch object and calculate<---\n    if (val === type) {\n      let troopUpgradeCost = troopRules(currentUpgradeLevel)[val].upgrade_cost;\n      if (troopUpgradeCost <= kingdomGold) {\n        kingdom.gold -= troopUpgradeCost;\n        await kingdom.save();\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n}\n\n\nexport {canAffordUnitUpgrade};"],"file":"upgrade-troop-level-check.js"}