{"version":3,"sources":["../../src/utilities/bandits.js"],"names":["createBandits","days","numberOfBandits","getRandomBetweenTwoIntegers","Map","get","map","troopTypes","type","i","coordinates","getRandomCoordinatesThatAreNotInMap","push","kingdom","name","coordinateX","coordinateY","Kingdom","create","savedKingdom","UserService","findById","setUser","save","createRandomTroops","id","destroyBandits","banditsKingdomId","KingdomRepository","findKingdomById","bandits","getTroops","troops","length","getUnitLevel","unitLevel","destroy","getBanditsReward","TroopsRepository","findAllKingdomTroops","totalGoldCost","troop","troopType","plain","quantity","val","gold_cost","kingdomId","console","log","UnitLevelRepository","generateUnitLevel","upgradeLevel","TroopsService","joinTroopArmy","number_of_troops","findUnitLevelByTroopTypeAndByKingdomId","min","max","Math","ceil","floor","random","max_position","found","filter"],"mappings":"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","sourcesContent":["import {aiRules} from \"../rules/ai-rules\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport convertToRoman from \"./romanize\";\nimport Map from \"../models/map\";\nimport {rules} from \"../rules/rules\";\nimport {troopRules} from \"../rules/troops-rules\";\nimport TroopsService from \"../services/troops-services/troops-service\";\nimport UnitLevelRepository from \"../repositories/unit-level-repository\";\nimport Kingdom from \"../models/kingdom\";\nimport UserService from \"../services/user-service\";\nimport TroopsRepository from \"../repositories/troops-repositories/troops-repository\";\n\nconst createBandits = async (days) => {\n    const numberOfBandits = getRandomBetweenTwoIntegers(1, 5);\n    const map = await Map.get();\n    const troopTypes = troopRules(1).type;\n\n    for (let i = 0; i < numberOfBandits; i++) {\n        let coordinates = getRandomCoordinatesThatAreNotInMap(map);\n        map.push(coordinates);\n\n        let kingdom = {\n            name: \"Bandits camp \" + convertToRoman(i + 1),\n            coordinateX: coordinates.coordinateX,\n            coordinateY: coordinates.coordinateY\n        }\n\n        const savedKingdom = await Kingdom.create(kingdom);\n        await savedKingdom.setUser(await UserService.findById(1));\n        await savedKingdom.save();\n\n        await createRandomTroops(troopTypes, days, savedKingdom.id);\n    }\n}\n\nconst destroyBandits = async (banditsKingdomId) => {\n    let bandits = await KingdomRepository.findKingdomById(banditsKingdomId);\n    let troops = await bandits.getTroops();\n    for (let i = 0; i < troops.length; i++) {\n        let unitLevel = await troops[i].getUnitLevel();\n        await troops[i].destroy();\n        await unitLevel.destroy();\n    }\n};\n\nconst getBanditsReward = async (banditsKingdomId) => {\n    let troops = await TroopsRepository.findAllKingdomTroops(banditsKingdomId);\n    let totalGoldCost = 0;\n    for (const troop of troops) {\n        let troopType = troop.get({ plain : true }).type;\n        let quantity = troop.get({ plain : true }).quantity;\n        for (let val in troopRules()) {\n            if (val === troopType) {\n                totalGoldCost += troopRules()[val].gold_cost * quantity;\n            }\n        }\n    }\n\n    return totalGoldCost * getRandomBetweenTwoIntegers(0.5, 5);\n};\n\nconst createRandomTroops = async (troopTypes, days, kingdomId) => {\n    for (let i = 0; i < troopTypes.length; i++) {\n        if (troopTypes[i] !== \"diplomat\" && troopTypes[i] !== \"catapult\" && troopTypes[i] !== \"settlers\") {\n            console.log(troopTypes[i]);\n\n            await UnitLevelRepository.generateUnitLevel({\n                type: troopTypes[i],\n                kingdomId: kingdomId,\n                upgradeLevel: days\n            });\n\n            await TroopsService.joinTroopArmy(troopTypes[i], aiRules(days).number_of_troops, kingdomId);\n\n            let unitLevel = await UnitLevelRepository.findUnitLevelByTroopTypeAndByKingdomId(kingdomId, troopTypes[i]);\n            unitLevel.upgradeLevel = days;\n            await unitLevel.save();\n        }\n    }\n}\n\n\nconst getRandomBetweenTwoIntegers = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst getRandomCoordinatesThatAreNotInMap = (map) => {\n    let coordinateX = getRandomBetweenTwoIntegers(0, rules(0).max_position - 1);\n    let coordinateY = getRandomBetweenTwoIntegers(0, rules(0).max_position - 1);\n    let found = map.filter(kingdom => kingdom.coordinateX === coordinateX && kingdom.coordinateY === coordinateY);\n    if (found.length > 0) {\n        return getRandomCoordinatesThatAreNotInMap(map);\n    }\n\n    return {coordinateX, coordinateY};\n}\n\nexport default {\n    createBandits,\n    destroyBandits,\n    getBanditsReward\n}\n"],"file":"bandits.js"}