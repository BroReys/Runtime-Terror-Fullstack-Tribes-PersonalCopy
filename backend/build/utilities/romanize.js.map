{"version":3,"sources":["../../src/utilities/romanize.js"],"names":["convertToRoman","num","isNaN","NaN","digits","String","split","key","roman","i","pop","Array","join"],"mappings":";;;;;;;AAAA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAS;AAC5B,MAAIC,KAAK,CAACD,GAAD,CAAT,EACI,OAAOE,GAAP;AACJ,MAAIC,MAAM,GAAGC,MAAM,CAAC,CAACJ,GAAF,CAAN,CAAaK,KAAb,CAAmB,EAAnB,CAAb;AAAA,MACIC,GAAG,GAAG,CAAC,EAAD,EAAI,GAAJ,EAAQ,IAAR,EAAa,KAAb,EAAmB,IAAnB,EAAwB,GAAxB,EAA4B,IAA5B,EAAiC,KAAjC,EAAuC,MAAvC,EAA8C,IAA9C,EACF,EADE,EACC,GADD,EACK,IADL,EACU,KADV,EACgB,IADhB,EACqB,GADrB,EACyB,IADzB,EAC8B,KAD9B,EACoC,MADpC,EAC2C,IAD3C,EAEF,EAFE,EAEC,GAFD,EAEK,IAFL,EAEU,KAFV,EAEgB,IAFhB,EAEqB,GAFrB,EAEyB,IAFzB,EAE8B,KAF9B,EAEoC,MAFpC,EAE2C,IAF3C,CADV;AAAA,MAIIC,KAAK,GAAG,EAJZ;AAAA,MAKIC,CAAC,GAAG,CALR;;AAMA,SAAOA,CAAC,EAAR;AACID,IAAAA,KAAK,GAAG,CAACD,GAAG,CAAC,CAACH,MAAM,CAACM,GAAP,EAAD,GAAiBD,CAAC,GAAG,EAAtB,CAAH,IAAiC,EAAlC,IAAwCD,KAAhD;AADJ;;AAEA,SAAOG,KAAK,CAAC,CAACP,MAAM,CAACQ,IAAP,CAAY,EAAZ,CAAD,GAAmB,CAApB,CAAL,CAA4BA,IAA5B,CAAiC,GAAjC,IAAwCJ,KAA/C;AACH,CAZD;;eAceR,c","sourcesContent":["const convertToRoman = (num) => {\n    if (isNaN(num))\n        return NaN;\n    let digits = String(+num).split(\"\"),\n        key = [\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\",\n            \"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\",\n            \"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"],\n        roman = \"\",\n        i = 3;\n    while (i--)\n        roman = (key[+digits.pop() + (i * 10)] || \"\") + roman;\n    return Array(+digits.join(\"\") + 1).join(\"M\") + roman;\n}\n\nexport default convertToRoman;"],"file":"romanize.js"}