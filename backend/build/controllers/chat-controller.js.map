{"version":3,"sources":["../../src/controllers/chat-controller.js"],"names":["storeChat","req","res","members","body","subject","textOfMessage","text","UserService","findById","user","id","owner","status","json","undefined","ChatService","createChat","membersResult","showChats","showChat","query","chat","getSpecificChatDTO","chatDTO"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,SAAS;AAAA,2FAAG,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACZC,YAAAA,OADY,GACFF,GAAG,CAACG,IAAJ,CAASD,OADP;AAEZE,YAAAA,OAFY,GAEFJ,GAAG,CAACG,IAAJ,CAASC,OAFP;AAGZC,YAAAA,aAHY,GAGIL,GAAG,CAACG,IAAJ,CAASG,IAHb;AAAA;AAAA,mBAIEC,wBAAYC,QAAZ,CAAqBR,GAAG,CAACS,IAAJ,CAASC,EAA9B,CAJF;;AAAA;AAIZC,YAAAA,KAJY;;AAAA,kBAMZA,KAAK,KAAK,IANE;AAAA;AAAA;AAAA;;AAOdV,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,iBAArB,CAArB;AAPc;AAAA;;AAAA;AAAA,kBASLX,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKY,SAT3B;AAAA;AAAA;AAAA;;AAUdb,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CACI,8BAAqB,gDAArB,CADJ;AAVc;AAAA;;AAAA;AAAA,kBAaLT,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKU,SAb3B;AAAA;AAAA;AAAA;;AAcdb,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,0BAArB,CAArB;AAdc;AAAA;;AAAA;AAAA,kBAgBLR,aAAa,KAAK,IAAlB,IAA0BA,aAAa,KAAKS,SAhBvC;AAAA;AAAA;AAAA;;AAiBdb,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,uBAArB,CAArB;AAjBc;AAAA;;AAAA;AAAA;AAAA,mBAoBYE,wBAAYC,UAAZ,CAAuBZ,OAAvB,EAAgCO,KAAhC,EAAuCT,OAAvC,EACtBG,aADsB,CApBZ;;AAAA;AAoBVY,YAAAA,aApBU;AAsBdhB,YAAAA,GAAG,CAACY,IAAJ,CAASI,aAAT;;AAtBc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATlB,SAAS;AAAA;AAAA;AAAA,GAAf;;AA0BA,IAAMmB,SAAS;AAAA,4FAAG,kBAAOlB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAECM,wBAAYC,QAAZ,CAAqBR,GAAG,CAACS,IAAJ,CAASC,EAA9B,CAFD;;AAAA;AAEZD,YAAAA,IAFY;;AAAA,kBAIZA,IAAI,KAAK,IAJG;AAAA;AAAA;AAAA;;AAKdR,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,iBAArB,CAArB;AALc;AAAA;;AAAA;AAAA,2BAQdZ,GARc;AAAA;AAAA,mBAQCc,wBAAYP,QAAZ,CAAqBC,IAAI,CAACC,EAA1B,CARD;;AAAA;AAAA;;AAAA,yBAQVG,IARU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATK,SAAS;AAAA;AAAA;AAAA,GAAf;;AAYA,IAAMC,QAAQ;AAAA,4FAAG,kBAAOnB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEEM,wBAAYC,QAAZ,CAAqBR,GAAG,CAACS,IAAJ,CAASC,EAA9B,CAFF;;AAAA;AAEXD,YAAAA,IAFW;AAAA;AAAA,mBAGEM,wBAAYP,QAAZ,CAAqBR,GAAG,CAACoB,KAAJ,CAAUV,EAA/B,CAHF;;AAAA;AAGXW,YAAAA,IAHW;;AAAA,kBAKXZ,IAAI,KAAK,IALE;AAAA;AAAA;AAAA;;AAMbR,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,iBAArB,CAArB;AANa;AAAA;;AAAA;AAAA,gBAQHQ,IARG;AAAA;AAAA;AAAA;;AASbpB,YAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,iBAArB,CAArB;AATa;AAAA;;AAAA;AAAA;AAAA,mBAYSE,wBAAYO,kBAAZ,CAA+BD,IAAI,CAACX,EAApC,EAAwCD,IAAI,CAACC,EAA7C,CAZT;;AAAA;AAYPa,YAAAA,OAZO;;AAcb,gBAAIA,OAAJ,EAAa;AACXtB,cAAAA,GAAG,CAACY,IAAJ,CAASU,OAAT;AACD,aAFD,MAEO;AACLtB,cAAAA,GAAG,CAACW,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,8BAAqB,iBAArB,CAArB;AACD;;AAlBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAARM,QAAQ;AAAA;AAAA;AAAA,GAAd;;eAuBe;AACbpB,EAAAA,SAAS,EAATA,SADa;AAEbmB,EAAAA,SAAS,EAATA,SAFa;AAGbC,EAAAA,QAAQ,EAARA;AAHa,C","sourcesContent":["import ChatService from \"../services/chat-services/chat-service\";\nimport generateErrorMessage from \"../utilities/error-message\";\nimport UserService from \"../services/user-service\";\n\nconst storeChat = async (req, res) => {\n  let members = req.body.members;\n  let subject = req.body.subject;\n  let textOfMessage = req.body.text;\n  let owner = await UserService.findById(req.user.id);\n\n  if (owner === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (members === null || members === undefined) {\n    res.status(400).json(\n        generateErrorMessage('At least one member must be added to the chat!'));\n\n  } else if (subject === null || subject === undefined) {\n    res.status(400).json(generateErrorMessage('Subject cannot be empty!'));\n\n  } else if (textOfMessage === null || textOfMessage === undefined) {\n    res.status(400).json(generateErrorMessage('Text cannot be empty!'));\n\n  } else {\n    let membersResult = await ChatService.createChat(subject, owner, members,\n        textOfMessage);\n    res.json(membersResult);\n  }\n};\n\nconst showChats = async (req, res) => {\n\n  let user = await UserService.findById(req.user.id);\n\n  if (user === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else {\n    res.json(await ChatService.findById(user.id));\n  }\n}\n\nconst showChat = async (req, res) => {\n\n  let user = await UserService.findById(req.user.id);\n  let chat = await ChatService.findById(req.query.id)\n\n  if (user === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (!chat) {\n    res.status(404).json(generateErrorMessage('Chat not found!'));\n\n  } else {\n    const chatDTO = await ChatService.getSpecificChatDTO(chat.id, user.id);\n\n    if (chatDTO) {\n      res.json(chatDTO);\n    } else {\n      res.status(403).json(generateErrorMessage('Chat not found!'));\n    }\n  }\n\n}\n\nexport default {\n  storeChat,\n  showChats,\n  showChat\n};\n"],"file":"chat-controller.js"}