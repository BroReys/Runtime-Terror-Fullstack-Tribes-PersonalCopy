{"version":3,"sources":["../../src/controllers/settle-controller.js"],"names":["startSettlersPilgrimage","req","res","token","user","UserService","findById","id","settlerRuler","settlerKingdomId","params","kingdomId","KingdomRepository","findKingdomById","settlerKingdom","coordinateX","body","coordinateY","MapService","identifyKingdom","tileStatus","troops","undefined","status","json","doTroopsHaveTypeSettlers","isTroopQuantitySpecified","doesRulerHaveEnoughSettlers","SettleService","initiatePilgrimageToSettleKingdom","settlersOnPilgrimage","i","length","type","quantity","isNaN","troopsToSettle","getTroops","filter","troop","settler"],"mappings":"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","sourcesContent":["import authenticationMiddleware from \"../middlewares/authentication-middleware\";\nimport MapService from \"../services/map-service\";\nimport UserService from \"../services/user-service\";\nimport generateErrorMessage from \"../utilities/error-message\";\nimport {troopRules} from \"../rules/troops-rules\";\nimport KingdomRepository from \"../repositories/kingdom-repository\";\nimport SettleService from \"../services/settle-service\"\n\nconst startSettlersPilgrimage = async (req, res) => {\n\n  let token = req.user;\n  let settlerRuler = await UserService.findById(req.user.id);\n  let settlerKingdomId = req.params.kingdomId;\n  let settlerKingdom = await KingdomRepository.findKingdomById(\n      settlerKingdomId);\n  let coordinateX = req.body.coordinateX;\n  let coordinateY = req.body.coordinateY;\n  let tileStatus = await MapService.identifyKingdom(coordinateX, coordinateY);\n  let troops = req.body.troops;\n\n  if (token === null || token === undefined) {\n    res.status(401).json(generateErrorMessage('Token is missing!'));\n\n  } else if (!settlerRuler) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (!settlerKingdom) {\n    res.status(404).json(generateErrorMessage('Kingdom not found!'));\n\n  } else if ((tileStatus).status !== 'free') {\n    res.status(403).json(\n        generateErrorMessage('Target tile not valid or is not free!'));\n\n  } else if (!troops) {\n    res.status(400).json(generateErrorMessage('Settlers must be defined!'));\n\n  } else if (!doTroopsHaveTypeSettlers(troops)) {\n    res.status(400).json(generateErrorMessage(\n        'Only settlers can be part of pilgrimage to settle new Kingdom!'));\n\n  } else if (!isTroopQuantitySpecified(troops)) {\n    res.status(400).json(\n        generateErrorMessage('Valid quantity of troops must be specified!'));\n\n  } else if (!(await doesRulerHaveEnoughSettlers(settlerKingdom, troops))) {\n    res.status(400).json(\n        generateErrorMessage('Not enough settlers in kingdom!'));\n\n  } else {\n    let settlersOnPilgrimage = await SettleService.initiatePilgrimageToSettleKingdom(\n        settlerRuler, settlerKingdom, coordinateX, coordinateY, troops);\n    res.json(settlersOnPilgrimage);\n  }\n}\n\nconst doTroopsHaveTypeSettlers = (troops) => {\n  let doTroopsHaveTypeSettlers = true;\n  for (let i = 0; i < troops.length; i++) {\n    if (!troops[i].type && troops[i].type !== 'settlers') {\n      let doTroopsHaveTypeSettlers = false;\n      return doTroopsHaveTypeSettlers;\n    }\n  }\n  return doTroopsHaveTypeSettlers;\n}\n\nconst isTroopQuantitySpecified = (troops) => {\n  let isTroopQuantitySpecified = true;\n  for (let i = 0; i < troops.length; i++) {\n    if (!troops[i].quantity || troops[i].quantity < 0 || isNaN(\n        troops[i].quantity)) {\n      isTroopQuantitySpecified = false;\n      return isTroopQuantitySpecified;\n    }\n  }\n  return isTroopQuantitySpecified;\n};\n\nasync function doesRulerHaveEnoughSettlers(settlerKingdom, troopsToSettle) {\n  let troops = await settlerKingdom.getTroops();\n  let settler = await troops.filter(troop => troop.type === 'settlers');\n  let doesRulerHaveEnoughSettlers = true;\n  if (troopsToSettle[0].quantity > settler[0].quantity) {\n    doesRulerHaveEnoughSettlers = false;\n    return doesRulerHaveEnoughSettlers;\n  }\n\n  return doesRulerHaveEnoughSettlers;\n}\n\nexport default {\n  startSettlersPilgrimage,\n}"],"file":"settle-controller.js"}