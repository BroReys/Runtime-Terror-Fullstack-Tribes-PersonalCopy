{"version":3,"sources":["../../src/controllers/user-controller.js"],"names":["create","req","res","user","body","UserService","createUser","statusOfRegistration","status","json","error","message","confirm","token","query","activation","setUserToActive","success","identify","headers","console","log","identifyUser","sendStatus","AuthenticationMiddleware","getUserFromPayload","payloadUser","KingdomService","findKingdomsByUserId","id","userKingdom","username","kingdom","login","loginUser","findByUsername","userInDatabase","authentication","header","forgotPassword","email","resetPassword","firstPsw","secondPsw"],"mappings":"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","sourcesContent":["import UserService from '../services/user-service';\nimport AuthenticationMiddleware from \"../middlewares/authentication-middleware\";\nimport KingdomService from \"../services/kingdom-service\";\n\nconst create = async (req, res) => {\n  const user = req.body;\n  const statusOfRegistration = await UserService.createUser(user);\n\n  switch (statusOfRegistration) {\n    case 409:\n      res.status(409).json({error: \"Username or email already exists!\"});\n      break;\n    case 422:\n      res.status(422).json({error: \"Password does not match requirements\"});\n      break;\n    case 400:\n      res.status(400).json({error: \"One of the required fields is missing\"});\n      break;\n    case 201:\n      res.json({message: \"successfully added user\"});\n  }\n}\n\nconst confirm = async (req, res) => {\n  let token = req.query.activation;\n  const status = await UserService.setUserToActive(token);\n\n  switch (status) {\n    case \"activated\":\n      res.status(200).json({success: 'User activated!'})\n      break;\n    case \"activation_expired\":\n      res.status(400).json({message: 'You activation link has expired, check your email for a new one.'})\n      break;\n    case \"not_found\":\n      res.status(404).json({error: 'User not found'})\n  }\n}\n\nconst identify = async (req, res) => {\n  const token = req.headers['authorization'];\n  console.log(token);\n  const status = UserService.identifyUser(token);\n\n  switch (status) {\n    case 403:\n      res.sendStatus(403);\n      break;\n    case 200:\n      let payloadUser = await AuthenticationMiddleware.getUserFromPayload(token);\n      let userKingdom = await KingdomService.findKingdomsByUserId(payloadUser.id);\n      res.json({username: payloadUser.username, kingdom: userKingdom})\n      break;\n  }\n}\n\nconst login = async (req, res) => {\n  let status = await UserService.loginUser(req.body);\n  switch (status) {\n    case 200:\n      let userInDatabase = await UserService.findByUsername(req.body.username)\n      const token = await AuthenticationMiddleware.authentication(\n          userInDatabase);\n      res\n      .header('access_token', token)\n      .json({\n        token: token,\n        message: \"user logged in successfully\"\n      });\n      break;\n    case 400:\n      res.status(400).json({error: \"One of the required fields is missing\"})\n      break;\n    case 403:\n      res.status(403).json({error: \"User did not finish registration!\"});\n      break;\n    case 409:\n      res.status(409).json({error: \"Password doesn't match\"});\n      break;\n    case 404:\n      res.status(404).json({error: \"Wrong username\"});\n      break;\n    case 412:\n      res.status(412).json({error: \"No kingdom registered, please register the kingdom first.\"});\n      break;\n  }\n}\n\nconst forgotPassword = async (req,res) => {\n  let status = await UserService.forgotPassword(req.body.email);\n  switch (status) {\n    case \"no_records\":\n      res.status(400).json({error: \"No records found!\"});\n      break;\n    case \"ok_token_generated\":\n      res.status(200).json({success: \"Please check your email address\"});\n      break;\n  }\n};\n\nconst resetPassword = async (req,res) => {\n  let firstPsw = req.body.firstPsw;\n  let secondPsw = req.body.secondPsw;\n  let status = await UserService.resetPassword(req.query.token,firstPsw,secondPsw);\n\n  switch (status) {\n    case \"no_user\":\n      res.status(400).json({error: \"No user\"});\n      break;\n    case \"expired\":\n      res.status(400).json({error: \"Reset link has expired please generate the new one\"});\n      break;\n    case \"no_match\":\n      res.status(400).json({error: \"Passwords do not match\"});\n      break;\n    case \"no_psw_provided\":\n      res.status(400).json({error: \"No passwords provided!\"});\n      break;\n    case \"old_psw_entered\":\n      res.status(400).json({error: \"You have entered your old password!\"});\n      break;\n    case \"no_regex_match\":\n      res.status(400).json({error: \"Password does not meet the requirements!\"});\n      break;\n    case \"ok\":\n      res.status(200).json({success: \"Password changed!\"})\n  }\n}\n\nexport default {\n  create,\n  confirm,\n  login,\n  identify,\n  forgotPassword,\n  resetPassword\n}\n"],"file":"user-controller.js"}