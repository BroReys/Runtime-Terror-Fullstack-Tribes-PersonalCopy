{"version":3,"sources":["../../src/controllers/battle-controller.js"],"names":["storeBattle","req","res","UserService","findById","user","id","attacker","attackingKingdomId","params","kingdomId","KingdomRepository","findKingdomById","attackingKingdom","defendingKingdomId","body","target","defendingKingdom","ruler","findByUsername","defender","troops","status","json","userId","undefined","doTroopsHaveType","doesTroopTypeMatchRules","isTroopQuantitySpecified","isTroopQuantityGreaterThanZero","doesAttackerHaveEnoughTroops","BattleService","initiateBattle","battle","showBattleReport","kingdom","battleId","isUserPatOfBattle","getBattleReport","showAllBattles","showAllBattlesAsAttackingAndDefendingKingdom","getLatestReport","getAttacker","getDefender","troopsToBattle","getTroops","i","length","j","type","quantity","troopsTypes","countMatches"],"mappings":"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","sourcesContent":["import KingdomRepository from \"../repositories/kingdom-repository\";\nimport UserService from \"../services/user-service\";\nimport BattleService from \"../services/battle-service\";\nimport generateErrorMessage from \"../utilities/error-message\";\nimport {troopRules} from \"../rules/troops-rules\";\n\nconst storeBattle = async (req, res) => {\n\n  let attacker = await UserService.findById(req.user.id);\n  let attackingKingdomId = req.params.kingdomId;\n  let attackingKingdom = await KingdomRepository.findKingdomById(\n      attackingKingdomId);\n  let defendingKingdomId = req.body.target ? req.body.target.kingdomId : null;\n  let defendingKingdom = await KingdomRepository.findKingdomById(\n      defendingKingdomId);\n  let ruler = req.body.target ? req.body.target.ruler : null;\n  let defender = await UserService.findByUsername(ruler);\n  let troops = req.body.troops;\n\n  if (attacker === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (attackingKingdom === null) {\n    res.status(404).json(\n        generateErrorMessage('Kingdom not found!'));\n\n  } else if (attacker.id !== attackingKingdom.userId) {\n    res.status(403).json(\n        generateErrorMessage('Attacker must be ruler of the kingdom!'));\n\n  } else if (defendingKingdomId === null || defendingKingdomId === undefined) {\n    res.status(400).json(generateErrorMessage('Target ID must be defined!'));\n\n  } else if (defendingKingdom === null) {\n    res.status(404).json(generateErrorMessage('Target not found!'));\n\n  } else if (attackingKingdomId == defendingKingdomId) {\n    res.status(403).json(\n        generateErrorMessage('Attacking own kingdom is forbidden!'));\n\n  } else if (ruler === null || ruler == undefined) {\n    res.status(400).json(generateErrorMessage('Ruler must be defined!'));\n\n  } else if (defender === null) {\n    res.status(404).json(generateErrorMessage('Ruler not found!'));\n\n  } else if (troops === null || troops === undefined) {\n    res.status(400).json(generateErrorMessage('Troops must be defined!'));\n\n  } else if (!doTroopsHaveType(troops)) {\n    res.status(400).json(generateErrorMessage('Troops type must be defined!'));\n\n  } else if (!doesTroopTypeMatchRules(troops)) {\n    res.status(403).json(generateErrorMessage(\n        'Type of troops must match one of the allowed types!'));\n\n  } else if (!isTroopQuantitySpecified(troops)) {\n    res.status(400).json(\n        generateErrorMessage('Quantity of troops must be specified!'));\n\n  } else if (!isTroopQuantityGreaterThanZero(troops)) {\n    res.status(403).json(\n        generateErrorMessage('Quantity of troops must be greater than zero!'));\n\n  } else if (!(await doesAttackerHaveEnoughTroops(attackingKingdom, troops))) {\n    res.status(400).json(generateErrorMessage('Not enough troops in kingdom!'));\n\n  } else {\n    let battle = await BattleService.initiateBattle(attacker, defender,\n        attackingKingdom, defendingKingdom, troops);\n    res.json(battle);\n  }\n};\n\nconst showBattleReport = async (req, res) => {\n\n  let user = await UserService.findById(req.user.id);\n  let kingdomId = req.params.kingdomId;\n  let kingdom = await KingdomRepository.findKingdomById(\n      kingdomId);\n  let battleId = req.params.battleId;\n  let battle = await BattleService.findById(battleId);\n\n  if (user === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (kingdom === null) {\n    res.status(403).json(\n        generateErrorMessage('Kingdom not found!'));\n\n  } else if (user.id !== kingdom.userId) {\n    res.status(403).json(\n        generateErrorMessage('User must be ruler of the kingdom!'));\n\n  } else if (battleId === undefined || battleId === null) {\n    res.status(400).json(generateErrorMessage('Battle ID must be specified!'));\n\n  } else if (battle === null) {\n    res.status(404).json(generateErrorMessage('Battle not found!'));\n\n  } else if (!(await isUserPatOfBattle(battle, user))) {\n    res.status(403).json(generateErrorMessage('User not part of the battle!'));\n\n  } else {\n    res.json(await BattleService.getBattleReport(battle, user));\n  }\n};\n\nconst showAllBattles = async (req, res) => {\n\n  let user = await UserService.findById(req.user.id);\n  let kingdomId = req.params.kingdomId;\n  let kingdom = await KingdomRepository.findKingdomById(kingdomId);\n\n  if (user === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (kingdom === null) {\n    res.status(403).json(\n        generateErrorMessage('Kingdom not found'));\n\n  } else {\n    res.json(await BattleService.showAllBattlesAsAttackingAndDefendingKingdom(\n        kingdomId));\n  }\n};\n\nconst getLatestReport = async (req, res) => {\n  let attackingKingdomId = req.params.kingdomId;\n  let defendingKingdomId = req.body.defendingKingdom\n  let attackingKingdom = await KingdomRepository.findKingdomById(\n      attackingKingdomId);\n  let defendingKingdom = await KingdomRepository.findKingdomById(\n      defendingKingdomId);\n\n  let user = await UserService.findById(req.user.id);\n\n  if (user === null) {\n    res.status(404).json(generateErrorMessage('User not found!'));\n\n  } else if (!attackingKingdomId) {\n    res.status(400).json(\n        generateErrorMessage('Attacking kingdom must be defined!'))\n\n  } else if (!attackingKingdom) {\n    res.status(404).json(generateErrorMessage('Kingdom not found!'));\n\n  } else if (!defendingKingdomId) {\n    res.status(400).json(\n        generateErrorMessage('Defending kingdom must be defined!'));\n\n  } else if (!defendingKingdom) {\n    res.status(404).json(generateErrorMessage('Kingdom not found!'));\n\n  } else {\n    res.json(await BattleService.getLatestReport(attackingKingdomId,\n        defendingKingdomId));\n  }\n};\n\n// -------  HELPER FUNCTIONS ----------\n\nconst isUserPatOfBattle = async (battle, user) => {\n  let attacker = await battle.getAttacker();\n  let defender = await battle.getDefender();\n  return attacker.id !== user.id || defender.id !== user.id;\n}\n\nconst doesAttackerHaveEnoughTroops = async (attackingKingdom,\n    troopsToBattle) => {\n  let troops = await attackingKingdom.getTroops();\n  let doesAttackerHaveEnoughTroops = true;\n  for (let i = 0; i < troopsToBattle.length; i++) {\n    for (let j = 0; j < troops.length; j++) {\n      if (troopsToBattle[i].type === troops[j].type) {\n        if (troopsToBattle[i].quantity > troops[j].quantity) {\n          doesAttackerHaveEnoughTroops = false;\n          return doesAttackerHaveEnoughTroops;\n        }\n      }\n    }\n  }\n  return doesAttackerHaveEnoughTroops;\n};\n\nconst doTroopsHaveType = (troops) => {\n  let doTroopsHaveType = true;\n  for (let i = 0; i < troops.length; i++) {\n    if (troops[i].type === null || troops[i].type === undefined) {\n      doTroopsHaveType = false;\n      return doTroopsHaveType;\n    }\n  }\n  return doTroopsHaveType;\n};\n\nconst doesTroopTypeMatchRules = (troops) => {\n  let troopsTypes = troopRules(null).type;\n  let countMatches = 0;\n  for (let i = 0; i < troops.length; i++) {\n    for (let j = 0; j < troopsTypes.length; j++) {\n      if (troops[i].type === troopsTypes[j]) {\n        countMatches++;\n      }\n    }\n  }\n  return countMatches === troops.length;\n};\n\nconst isTroopQuantitySpecified = (troops) => {\n  let isTroopQuantitySpecified = true;\n  for (let i = 0; i < troops.length; i++) {\n    if (troops[i].quantity === null || troops[i].quantity === undefined) {\n      isTroopQuantitySpecified = false;\n      return isTroopQuantitySpecified;\n    }\n  }\n  return isTroopQuantitySpecified;\n};\n\nconst isTroopQuantityGreaterThanZero = (troops) => {\n  let isTroopQuantityGreaterThanZero = true;\n  for (let i = 0; i < troops.length; i++) {\n    if (troops[i].quantity <= 0) {\n      isTroopQuantityGreaterThanZero = false;\n      return isTroopQuantityGreaterThanZero;\n    }\n  }\n  return isTroopQuantityGreaterThanZero;\n}\n\nexport default {\n  storeBattle,\n  showBattleReport,\n  showAllBattles,\n  getLatestReport\n};\n"],"file":"battle-controller.js"}