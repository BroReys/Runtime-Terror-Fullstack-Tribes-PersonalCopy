{"version":3,"sources":["../../src/controllers/kingdom-controller.js"],"names":["create","req","res","KingdomService","createKingdom","body","status","error","message","json","updateKingdomName","userId","user","id","params","kingdomName","getKingdomDetails","details","getAllKingdoms","getDTOAllKingdoms","allKingdoms"],"mappings":"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","sourcesContent":["import KingdomService from \"../services/kingdom-service\";\nimport generateErrorMessage from \"../utilities/error-message\";\n\nconst create = async (req, res) => {\n  const {status, error, message} = await KingdomService.createKingdom({...req.body});\n\n  if (error) {\n    return res.status(status).json(generateErrorMessage(error));\n  } else {\n    return res.status(status).json(message);\n  }\n};\n\nconst updateKingdomName = async (req, res) => {\n  let userId = req.user.id\n  const {status, error, message} = await KingdomService.updateKingdomName(\n      req.params.id,\n      req.body.kingdomName,userId);\n\n  if (error) {\n    res.status(status).json(generateErrorMessage(error));\n  } else {\n    res.status(status).json({status: message});\n  }\n};\n\nconst getKingdomDetails = async (req,res) => {\n  let userId = req.user.id\n  const {status, error, details} = await KingdomService.getKingdomDetails(req.params.id,userId);\n\n  if (error) {\n    res.status(status).json(generateErrorMessage(error));\n  } else {\n    res.status(status).json(details);\n  }\n};\n\nconst getAllKingdoms = async (req, res) => {\n  let allKingdoms = await KingdomService.getDTOAllKingdoms();\n  res.json(allKingdoms);\n}\n\nexport default {\n  create,\n  updateKingdomName,\n  getKingdomDetails,\n  getAllKingdoms\n}\n"],"file":"kingdom-controller.js"}